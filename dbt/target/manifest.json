{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v9.json", "dbt_version": "1.5.0", "generated_at": "2023-10-31T12:45:31.671240Z", "invocation_id": "cd6760d7-329f-45a5-bd52-880f566e5118", "env": {}, "project_id": "7e0c4706b87ced7aa8a48c0948f44d9e", "user_id": null, "send_anonymous_usage_stats": false, "adapter_type": "snowflake"}, "nodes": {"model.LGD_Project.res_sak_bankkonto_lgd_t": {"database": "RISIKO", "schema": "LGD", "name": "res_sak_bankkonto_lgd_t", "resource_type": "model", "package_name": "LGD_Project", "path": "example/res_sak_bankkonto_lgd_t.sql", "original_file_path": "models/example/res_sak_bankkonto_lgd_t.sql", "unique_id": "model.LGD_Project.res_sak_bankkonto_lgd_t", "fqn": ["LGD_Project", "example", "res_sak_bankkonto_lgd_t"], "alias": "res_sak_bankkonto_lgd_t", "checksum": {"name": "sha256", "checksum": "232f42e70b03631909ab56bdaf7249c70f513899745dbb082f45b530d76ed941"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "LGD_Project://models/example/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1698755982.86146, "relation_name": "RISIKO.LGD.res_sak_bankkonto_lgd_t", "raw_code": "select\n t.tid_id,\n t.maletidspunkt_kode,\n t.kontantstrom_kilde_kode,\n t.sk_bankkunde_biii_id,\n t.rk_bankkunde_id,\n t.rk_bankkonto_id,\n t.bk_sb1_selskap_id,\n t.kundenummer,\n t.kundenavn,\n t.overforing_arsak_init_kode,\n t.overforing_arsak_oppdat_kode,\n t.sak_start_dato,\n t.tilfrisket_dato,\n t.kontonummer,\n t.mislighold_ead_total_daglast,\n t.mislighold_saldo_renter_belop,\n t.naverdi_gjenvunnet_belop,\n t.naverdi_tid_saldo_renter_belop,\n greatest(t.mislighold_saldo_renter_belop - t.naverdi_gjenvunnet_belop - t.naverdi_tid_saldo_renter_belop, 0) brutto_observert_lgd_belop,\n round(case when ku.observert_lgd_belop = 0 then 0\n            when nvl(sum(l.lgd_belop_konto) over (partition by t.tid_id, t.maletidspunkt_kode, t.sk_bankkunde_biii_id), 0) > 0\n              then ku.observert_lgd_belop * nvl(l.lgd_belop_konto, 0) / nvl(sum(l.lgd_belop_konto) over (partition by t.tid_id, t.maletidspunkt_kode, t.sk_bankkunde_biii_id), 0)\n            when ku.mislighold_saldo_renter_belop > 0\n              then ku.observert_lgd_belop * t.mislighold_saldo_renter_belop / sum(t.mislighold_saldo_renter_belop) over (partition by t.tid_id, t.maletidspunkt_kode, t.sk_bankkunde_biii_id)\n            else ku.observert_lgd_belop * greatest(t.mislighold_saldo_renter_belop - t.naverdi_gjenvunnet_belop - t.naverdi_tid_saldo_renter_belop, 0)\n                   / sum(greatest(t.mislighold_saldo_renter_belop - t.naverdi_gjenvunnet_belop - t.naverdi_tid_saldo_renter_belop, 0)) over (partition by t.tid_id, t.maletidspunkt_kode, t.sk_bankkunde_biii_id)\n        end, 2) fordelt_observert_lgd_belop,\n t.konstatert_tap_dato,\n t.konstatert_tap_belop,\n t.naverdi_gjenvunnet_kt_belop,\n t.mislighold_vintage_irba_ead,\n t.mislighold_vintage_irba_sikk,\n l.lgd_belop_konto misl_vintage_irba_lgd_belop,\n l.lgd_konto misl_vintage_irba_lgd_faktor,\n t.gjenvunnet_nominelt_belop,\n t.gjenvunnet_nominelt_kt_belop,\n t.eksponering_flagg,\n t.kredittforetak_flagg,\n t.syndikat_flagg,\n t.eierbytte_flagg,\n t.rk_trekkonto_utenfor_lgd_flagg,\n t.korr_kilde_trans_flagg,\n t.korr_kilde_gl_flagg,\n t.korr_kilde_konflikt_flagg,\n t.ekskludert_konto_flagg,\n t.ekskludert_konto_arsak,\n t.annet_spesielt,\n t.mislighold_saldo_nok,\n t.valutakode,\n t.misl_ikkekap_kreditrente_belop,\n t.misl_ikkekap_debetrente_belop,\n t.tid_saldo_renter_belop,\n t.cp_mis_ikke_balansekonto_flagg,\n t.kks_mis_underkonto_flagg,\n t.cp_tid_ikke_balansekonto_flagg,\n t.kks_tid_underkonto_flagg,\n t.rente_navn,\n t.rente_ppoeng,\n t.rente_referanse_ppoeng,\n t.sak_start_tid_id,\n t.sak_start_dato_biii,\n t.sak_start_dato_biii_siste,\n t.sak_kilde_init,\n t.sak_kilde_oppdatert,\n t.tilfrisket_tid_id,\n t.tilfrisket_flagg,\n t.tilfrisket_senere_flagg,\n t.kundesak_antall_9mnd,\n t.historisk_realisasjon_flagg,\n t.saker_i_sak_antall,\n t.markedssegment_kode,\n t.korrigert_sak_start_dato_flagg,\n t.konto_fom_dato,\n t.konto_tom_dato,\n t.beregn_til_dato,\n t.beregn_til_tid_id,\n t.beregnet_stans_etter_score,\n '&batch_navn' as batch_navn\n  from {{ ref('m_sak_bankkonto_lgd_t') }} t\n  join {{ source('LGD_SOURCES', 'M_KONFIGURASJON_BANK') }} kb on kb.maletidspunkt_kode = t.maletidspunkt_kode\n                                      and kb.bk_sb1_selskap_id = t.bk_sb1_selskap_id\n  join {{ ref('res_sak_bankkunde_lgd_t') }}  ku on ku.tid_id = '&uttrekksdato'\n                                         and ku.batch_navn = '&batch_navn'\n                                         and ku.maletidspunkt_kode = t.maletidspunkt_kode\n                                         and ku.sk_bankkunde_biii_id = t.sk_bankkunde_biii_id\n  join {{ source('LGD_SOURCES', 'D_TID') }} mis_tid on mis_tid.tid_id = t.sak_start_tid_id\n  left join {{ source('LGD_SOURCES', 'P_LGD_BATCH') }} p_mis_lgd on p_mis_lgd.lgd_flagg = '1'\n                                         and substr(mis_tid.tid_id_depot, 1, 6) between nvl(p_mis_lgd.vintage_irba_fom, '000000') and nvl(p_mis_lgd.vintage_irba_tom, '999999')\n                                         and nvl(p_mis_lgd.vintage_irba_fom, p_mis_lgd.vintage_irba_tom) is not null\n  left join {{ source('LGD_SOURCES', 'F_LGD_T') }} l on l.tid_id = mis_tid.tid_id_depot\n                             and l.rk_bankkonto_id = t.rk_bankkonto_id\n                             and l.batch_navn = p_mis_lgd.batch_navn\nwhere t.tid_id = '&uttrekksdato'\nand t.batch_navn = '&batch_navn'", "language": "sql", "refs": [{"name": "m_sak_bankkonto_lgd_t", "package": null, "version": null}, {"name": "res_sak_bankkunde_lgd_t", "package": null, "version": null}], "sources": [["LGD_SOURCES", "D_TID"], ["LGD_SOURCES", "F_LGD_T"], ["LGD_SOURCES", "P_LGD_BATCH"], ["LGD_SOURCES", "M_KONFIGURASJON_BANK"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.LGD_Project.LGD_SOURCES.D_TID", "source.LGD_Project.LGD_SOURCES.F_LGD_T", "source.LGD_Project.LGD_SOURCES.P_LGD_BATCH", "source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK", "model.LGD_Project.m_sak_bankkonto_lgd_t", "model.LGD_Project.res_sak_bankkunde_lgd_t"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.LGD_Project.m_sak_bankkonto_lgd_t": {"database": "RISIKO", "schema": "LGD", "name": "m_sak_bankkonto_lgd_t", "resource_type": "model", "package_name": "LGD_Project", "path": "example/m_sak_bankkonto_lgd_t.sql", "original_file_path": "models/example/m_sak_bankkonto_lgd_t.sql", "unique_id": "model.LGD_Project.m_sak_bankkonto_lgd_t", "fqn": ["LGD_Project", "example", "m_sak_bankkonto_lgd_t"], "alias": "m_sak_bankkonto_lgd_t", "checksum": {"name": "sha256", "checksum": "4b75085786b1783dc2c383fec6b54bb3f4bbd36c726762f7077ed0dc394671c5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "materalized": "table", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "LGD_Project://models/example/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "materalized": "table"}, "created_at": 1698755982.860959, "relation_name": "RISIKO.LGD.m_sak_bankkonto_lgd_t", "raw_code": "{{ config(materalized= 'table') }}\nwith virkedag as (\n       select distinct \n            tid.tid_id,\n            tid.siste_manedslast_tid_id,\n            ku.rk_bankkonto_id,\n            p_sikk_mis.batch_navn\n       from {{ ref('m_d_bankkunde_biii_lgd_t') }} ku /* materialisert tabell iht. sb1_lgd.p_lgd_last*/\n       join {{ ref('d_virkedag') }} tid on tid.tid_id = ku.sak_start_tid_id \n       join {{ source('LGD_SOURCES', 'P_LGD_BATCH') }} p_sikk_mis on p_sikk_mis.fordelt_sikkerhetsverdi_flagg = '1'\n                                          and substr(tid.siste_manedslast_tid_id, 1, 6) between nvl(p_sikk_mis.vintage_irba_fom, '000000') and nvl(p_sikk_mis.vintage_irba_tom, '999999')\n                                          and nvl(p_sikk_mis.vintage_irba_fom, p_sikk_mis.vintage_irba_tom) is not null\n       where ku.tid_id = '&uttrekksdato'\n         and ku.batch_navn = '&batch_navn'\n),\nsikkerhet as (\n       select /*+ materialize parallel(sikk,4)*/ sikk.tid_id, sikk.rk_bankkonto_id, sikk.batch_navn, sum(sikk.fordelt_verdi_sikkerhet) fordelt_verdi_sikk_belop\n       from {{ source('LGD_SOURCES', 'F_FORDELT_SIKKERHETSVERDI_T') }} sikk\n       join virkedag v on v.siste_manedslast_tid_id = sikk.tid_id and v.rk_bankkonto_id = sikk.rk_bankkonto_id and v.batch_navn = sikk.batch_navn\n       group by sikk.tid_id, sikk.rk_bankkonto_id, sikk.batch_navn\n), \ncashpool as (\n       select cp.bk_bankkonto_id, balansekonto_sb1_flagg, cp.scd_gyldig_fom, cp.scd_gyldig_tom\n       from {{ source('LGD_SOURCES', 'D_CASHPOOLHIERARKI') }} cp \n       where cp.scd_slettet_i_kilde_dato is null\n),\nkks as (\n       select kks.bk_bankkonto_id, kks.scd_gyldig_fom, kks.scd_gyldig_tom\n       from {{ ref('v_reskontro_kks_underkonto') }} kks\n),\nkonto_lgd as (\n  select /*+ parallel(ead_mis,4) parallel(ead_mis_irba,4) parallel(bal_mis,4) parallel(bal_tid,4)*/\n         ku.tid_id, ku.maletidspunkt_kode, k.kontantstrom_kilde_kode, ku.sk_bankkunde_biii_id, ku.rk_bankkunde_id, ku.rk_bankkonto_id, ku.bk_sb1_selskap_id, ku.kundenummer, ku.kundenavn, ku.overforing_arsak_init_kode,\n         ku.overforing_arsak_oppdat_kode, ku.sak_start_dato, ku.tilfrisket_dato, ku.kontonummer, ead_mis.ead_total mislighold_ead_total_daglast,\n         case when (k.eksponering_flagg = '1'\n                    or cp_mis.balansekonto_sb1_flagg = '1')\n               and bal_mis.kontonummer is not null\n               and not nvl(cp_mis.balansekonto_sb1_flagg, '1') = '0'\n               and kks_mis.bk_bankkonto_id is null\n           then -1 * round(least(bal_mis.saldo_nok + nvl(bal_mis.ikkekap_debetrente_belop, 0) + nvl(bal_mis.ikkekap_kreditrente_belop, 0), 0), 0)\n           else 0\n         end mislighold_saldo_renter_belop,\n         case k.gyldig_kontantstrom_flagg\n           when '1' then k.naverdi_kontantstrom_belop\n           else 0\n          end naverdi_kontantstrom_belop,\n         case k.gyldig_kontantstrom_flagg\n           when '1' then k.kontantstrom_belop\n           else 0\n          end kontantstrom_belop,\n         case when (k.eksponering_flagg = '1'\n                    or cp_tid.balansekonto_sb1_flagg = '1')\n               and bal_tid.kontonummer is not null\n               and not nvl(cp_tid.balansekonto_sb1_flagg, '1') = '0'\n               and kks_tid.bk_bankkonto_id is null\n               and ku.konstatert_tap_dato is null\n                then greatest(-1 * nvl(bal_tid.saldo_nok + nvl(bal_tid.ikkekap_debetrente_belop, 0) + nvl(bal_tid.ikkekap_kreditrente_belop, 0), 0), 0)\n              else 0\n          end tid_saldo_renter_belop,\n         ku.konstatert_tap_dato,\n         ku.konstatert_tap_belop,\n         case when k.gyldig_kontantstrom_flagg = '1' and k.kontantstrom_dato >= ku.konstatert_tap_dato\n           then k.naverdi_kontantstrom_belop\n           else 0\n          end nv_kontantstr_etter_kt_belop,\n         case when k.gyldig_kontantstrom_flagg = '1' and k.kontantstrom_dato >= ku.konstatert_tap_dato\n           then k.kontantstrom_belop\n           else 0\n          end kontantstr_etter_kt_belop,\n         ead_mis_irba.ead_total mislighold_vintage_irba_ead, sikk_mis_irba.fordelt_verdi_sikk_belop mislighold_vintage_irba_sikk, k.eksponering_flagg, k.kredittforetak_flagg, k.syndikat_flagg, k.eierbytte_flagg, k.rk_trekkonto_utenfor_lgd_flagg, k.korr_kilde_trans_flagg, k.korr_kilde_gl_flagg,\n         k.korr_kilde_konflikt_flagg, k.ekskludert_konto_flagg, k.ekskludert_konto_arsak, k.annet_spesielt, bal_mis.saldo_nok mislighold_saldo_nok, bal_mis.valutakode, bal_mis.ikkekap_kreditrente_belop misl_ikkekap_kreditrente_belop, bal_mis.ikkekap_debetrente_belop misl_ikkekap_debetrente_belop,\n         case when cp_mis.balansekonto_sb1_flagg = '0' then '1' else '0' end cp_mis_ikke_balansekonto_flagg,\n         case when kks_mis.bk_bankkonto_id is not null then '1' else '0' end kks_mis_underkonto_flagg,\n         case when cp_tid.balansekonto_sb1_flagg = '0' then '1' else '0' end cp_tid_ikke_balansekonto_flagg,\n         case when kks_tid.bk_bankkonto_id is not null then '1' else '0' end kks_tid_underkonto_flagg,\n         k.rente_navn, k.rente_ppoeng, k.rente_referanse_ppoeng, ku.sak_start_tid_id, ku.sak_start_dato_biii, ku.sak_start_dato_biii_siste, ku.sak_kilde_init, ku.sak_kilde_oppdatert, ku.tilfrisket_tid_id, ku.tilfrisket_flagg, ku.tilfrisket_senere_flagg,\n         ku.kundesak_antall_9mnd, ku.historisk_realisasjon_flagg, ku.saker_i_sak_antall, ku.markedssegment_kode, ku.korrigert_sak_start_dato_flagg, ku.konto_fom_dato, ku.konto_tom_dato, ku.beregn_til_dato, ku.beregn_til_tid_id, ku.beregnet_stans_etter_score\n    from {{ ref('m_d_bankkunde_biii_lgd_t') }} ku \n    join {{ source('LGD_SOURCES', 'M_KONFIGURASJON_BANK') }} kb on kb.maletidspunkt_kode = ku.maletidspunkt_kode\n                                        and kb.bk_sb1_selskap_id = ku.bk_sb1_selskap_id\n    join {{ ref('d_virkedag') }} tid_mis on tid_mis.tid_id = ku.sak_start_tid_id\n    left join cashpool cp_mis on cp_mis.bk_bankkonto_id = ku.kontonummer\n                                               and tid_mis.forrige_virkedag_dato between cp_mis.scd_gyldig_fom and cp_mis.scd_gyldig_tom\n\n    left join kks kks_mis on kks_mis.bk_bankkonto_id = ku.kontonummer\n                         and tid_mis.forrige_virkedag_dato between kks_mis.scd_gyldig_fom and kks_mis.scd_gyldig_tom\n    left join {{ source('LGD_SOURCES', 'F_EAD_T') }} ead_mis on ead_mis.tid_id = tid_mis.forrige_virkedag_tid_id\n                                     and ead_mis.rk_bankkonto_id = ku.rk_bankkonto_id\n                                     and ead_mis.batch_navn = 'DAGLAST'\n    left join {{ source('LGD_SOURCES', 'P_LGD_BATCH') }} p_ead_mis on p_ead_mis.ead_flagg = '1'\n                                           and substr(tid_mis.siste_manedslast_tid_id, 1, 6) between nvl(p_ead_mis.vintage_irba_fom, '000000') and nvl(p_ead_mis.vintage_irba_tom, '999999')\n                                           and nvl(p_ead_mis.vintage_irba_fom, p_ead_mis.vintage_irba_tom) is not null\n    left join {{ source('LGD_SOURCES', 'F_EAD_T') }} ead_mis_irba on ead_mis_irba.tid_id = tid_mis.siste_manedslast_tid_id\n                                          and ead_mis_irba.rk_bankkonto_id = ku.rk_bankkonto_id\n                                          and ead_mis_irba.batch_navn = p_ead_mis.batch_navn\n    left join sikkerhet sikk_mis_irba on sikk_mis_irba.tid_id = tid_mis.siste_manedslast_tid_id\n                                     and sikk_mis_irba.rk_bankkonto_id = ku.rk_bankkonto_id \n    \n    left join {{ source('LGD_SOURCES', 'F_KONTOBALANSE_T') }} bal_mis on bal_mis.tid_id = tid_mis.forrige_virkedag_tid_id\n                                              and bal_mis.rk_bankkonto_id = ku.rk_bankkonto_id\n    left join cashpool cp_tid on cp_tid.bk_bankkonto_id = ku.kontonummer\n                             and ku.beregn_til_dato between cp_tid.scd_gyldig_fom and cp_tid.scd_gyldig_tom\n\n    left join kks kks_tid on kks_tid.bk_bankkonto_id = ku.kontonummer\n                         and ku.beregn_til_dato between kks_tid.scd_gyldig_fom and kks_tid.scd_gyldig_tom\n    left join {{ source('LGD_SOURCES', 'F_KONTOBALANSE_T') }} bal_tid on bal_tid.tid_id = ku.beregn_til_tid_id\n                                              and bal_tid.rk_bankkonto_id = ku.rk_bankkonto_id\n    left join {{ ref('m_sak_bankkonto_kontantstrom_t') }} k on k.tid_id = '&uttrekksdato'\n                                                    and k.batch_navn = '&batch_navn'\n                                                    and ku.maletidspunkt_kode = k.maletidspunkt_kode\n                                                    and ku.bk_sb1_selskap_id = k.bk_sb1_selskap_id\n                                                    and ku.sk_bankkunde_biii_id = k.sk_bankkunde_biii_id\n                                                    and ku.rk_bankkonto_id = k.rk_bankkonto_id\n   where ku.tid_id = '&uttrekksdato'\n     and ku.batch_navn = '&batch_navn'\n)\nselect ku.tid_id, ku.maletidspunkt_kode, ku.kontantstrom_kilde_kode, ku.sk_bankkunde_biii_id, ku.rk_bankkunde_id, ku.rk_bankkonto_id, ku.bk_sb1_selskap_id, ku.kundenummer,\n       case ku.markedssegment_kode when 'PM' then 'NN (PM)' else ku.kundenavn end kundenavn,\n       ku.overforing_arsak_init_kode, ku.overforing_arsak_oppdat_kode, ku.sak_start_dato, ku.tilfrisket_dato, ku.kontonummer, ku.mislighold_ead_total_daglast, ku.mislighold_saldo_renter_belop,\n       sum(ku.naverdi_kontantstrom_belop) naverdi_gjenvunnet_belop,\n /*       round(ku.tid_saldo_renter_belop / power(1 + ku.rente_referanse_ppoeng / 100, (ku.beregn_til_dato - ku.sak_start_dato) / 365),2) as naverdi_tid_saldo_renter_belop,*/\n        round(disc_naverdi(ku.tid_saldo_renter_belop, ku.rente_referanse_ppoeng, ku.sak_start_dato, ku.beregn_til_dato), 2) naverdi_tid_saldo_renter_belop,\n       ku.konstatert_tap_dato, ku.konstatert_tap_belop,\n       sum(ku.nv_kontantstr_etter_kt_belop) naverdi_gjenvunnet_kt_belop,\n       ku.mislighold_vintage_irba_ead, ku.mislighold_vintage_irba_sikk,\n       sum(ku.kontantstrom_belop) gjenvunnet_nominelt_belop,\n       sum(ku.kontantstr_etter_kt_belop) gjenvunnet_nominelt_kt_belop,\n       ku.eksponering_flagg, ku.kredittforetak_flagg, ku.syndikat_flagg, ku.eierbytte_flagg, ku.rk_trekkonto_utenfor_lgd_flagg, ku.korr_kilde_trans_flagg, ku.korr_kilde_gl_flagg, ku.korr_kilde_konflikt_flagg, ku.ekskludert_konto_flagg,\n       ku.ekskludert_konto_arsak, ku.annet_spesielt, ku.mislighold_saldo_nok, ku.valutakode, ku.misl_ikkekap_kreditrente_belop, ku.misl_ikkekap_debetrente_belop, ku.tid_saldo_renter_belop, ku.cp_mis_ikke_balansekonto_flagg, ku.kks_mis_underkonto_flagg,\n       ku.cp_tid_ikke_balansekonto_flagg, ku.kks_tid_underkonto_flagg, ku.rente_navn, ku.rente_ppoeng, ku.rente_referanse_ppoeng, ku.sak_start_tid_id, ku.sak_start_dato_biii, ku.sak_start_dato_biii_siste, ku.sak_kilde_init, ku.sak_kilde_oppdatert,\n       ku.tilfrisket_tid_id, ku.tilfrisket_flagg, ku.tilfrisket_senere_flagg, ku.kundesak_antall_9mnd, ku.historisk_realisasjon_flagg, ku.saker_i_sak_antall, ku.markedssegment_kode, ku.korrigert_sak_start_dato_flagg, ku.konto_fom_dato,\n       ku.konto_tom_dato, ku.beregn_til_dato, ku.beregn_til_tid_id, ku.beregnet_stans_etter_score,\n       '&batch_navn' as batch_navn\n  from konto_lgd ku\n group by ku.tid_id, ku.maletidspunkt_kode, ku.kontantstrom_kilde_kode, ku.sk_bankkunde_biii_id, ku.rk_bankkunde_id, ku.rk_bankkonto_id, ku.bk_sb1_selskap_id, ku.kundenummer, ku.kundenavn, ku.overforing_arsak_init_kode, ku.overforing_arsak_oppdat_kode,\n         ku.sak_start_dato, ku.tilfrisket_dato, ku.kontonummer, ku.mislighold_ead_total_daglast, ku.mislighold_saldo_renter_belop, ku.tid_saldo_renter_belop, ku.konstatert_tap_dato, ku.konstatert_tap_belop, ku.mislighold_vintage_irba_ead,\n         ku.mislighold_vintage_irba_sikk, ku.eksponering_flagg, ku.kredittforetak_flagg, ku.syndikat_flagg, ku.eierbytte_flagg, ku.rk_trekkonto_utenfor_lgd_flagg, ku.korr_kilde_trans_flagg, ku.korr_kilde_gl_flagg, ku.korr_kilde_konflikt_flagg,\n         ku.ekskludert_konto_flagg, ku.ekskludert_konto_arsak, ku.annet_spesielt, ku.mislighold_saldo_nok, ku.valutakode, ku.misl_ikkekap_kreditrente_belop, ku.misl_ikkekap_debetrente_belop, ku.cp_mis_ikke_balansekonto_flagg, ku.kks_mis_underkonto_flagg,\n         ku.cp_tid_ikke_balansekonto_flagg, ku.kks_tid_underkonto_flagg, ku.rente_navn, ku.rente_ppoeng, ku.rente_referanse_ppoeng, ku.sak_start_tid_id, ku.sak_start_dato_biii, ku.sak_start_dato_biii_siste, ku.sak_kilde_init, ku.sak_kilde_oppdatert,\n         ku.tilfrisket_tid_id, ku.tilfrisket_flagg, ku.tilfrisket_senere_flagg, ku.kundesak_antall_9mnd, ku.historisk_realisasjon_flagg, ku.saker_i_sak_antall, ku.markedssegment_kode, ku.korrigert_sak_start_dato_flagg, ku.konto_fom_dato,\n         ku.konto_tom_dato, ku.beregn_til_dato, ku.beregn_til_tid_id, ku.beregnet_stans_etter_score", "language": "sql", "refs": [{"name": "m_d_bankkunde_biii_lgd_t", "package": null, "version": null}, {"name": "d_virkedag", "package": null, "version": null}, {"name": "v_reskontro_kks_underkonto", "package": null, "version": null}, {"name": "m_d_bankkunde_biii_lgd_t", "package": null, "version": null}, {"name": "d_virkedag", "package": null, "version": null}, {"name": "m_sak_bankkonto_kontantstrom_t", "package": null, "version": null}], "sources": [["LGD_SOURCES", "F_KONTOBALANSE_T"], ["LGD_SOURCES", "P_LGD_BATCH"], ["LGD_SOURCES", "F_EAD_T"], ["LGD_SOURCES", "M_KONFIGURASJON_BANK"], ["LGD_SOURCES", "F_FORDELT_SIKKERHETSVERDI_T"], ["LGD_SOURCES", "D_CASHPOOLHIERARKI"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.LGD_Project.LGD_SOURCES.F_KONTOBALANSE_T", "source.LGD_Project.LGD_SOURCES.P_LGD_BATCH", "source.LGD_Project.LGD_SOURCES.F_EAD_T", "source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK", "source.LGD_Project.LGD_SOURCES.F_FORDELT_SIKKERHETSVERDI_T", "source.LGD_Project.LGD_SOURCES.D_CASHPOOLHIERARKI", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.d_virkedag", "model.LGD_Project.v_reskontro_kks_underkonto", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.d_virkedag", "model.LGD_Project.m_sak_bankkonto_kontantstrom_t"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.LGD_Project.res_sak_bankkonto_kontantstr_t": {"database": "RISIKO", "schema": "LGD", "name": "res_sak_bankkonto_kontantstr_t", "resource_type": "model", "package_name": "LGD_Project", "path": "example/res_sak_bankkonto_kontantstr_t.sql", "original_file_path": "models/example/res_sak_bankkonto_kontantstr_t.sql", "unique_id": "model.LGD_Project.res_sak_bankkonto_kontantstr_t", "fqn": ["LGD_Project", "example", "res_sak_bankkonto_kontantstr_t"], "alias": "res_sak_bankkonto_kontantstr_t", "checksum": {"name": "sha256", "checksum": "d04f7265f2a4ba4b419d6b39b2abb3c59ae5cfdc065789b760c3ff97d7bd46e9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "materalized": "table", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "LGD_Project://models/example/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "materalized": "table"}, "created_at": 1698755982.8603778, "relation_name": "RISIKO.LGD.res_sak_bankkonto_kontantstr_t", "raw_code": "{{ config(materalized = 'table') }}\nselect\nt.tid_id,\nt.maletidspunkt_kode,\nt.kontantstrom_kilde_kode,\nt.sk_bankkunde_biii_id,\nt.rk_bankkunde_id,\nt.rk_bankkonto_id,\nt.bk_sb1_selskap_id,\nt.sak_start_dato,\nt.tilfrisket_dato,\nt.kontonummer,\nt.eksponering_flagg,\nt.kontantstrom_tid_id,\nt.kontantstrom_dato,\nt.kontantstrom_belop,\nt.naverdi_kontantstrom_belop,\nt.gyldig_kontantstrom_flagg,\nt.gl_belop,\nt.gl_korr_henl_saldo_belop,\nt.ujust_korr_henl_saldo_belop,\nt.gl_korr_over_underkurs_belop,\nt.kaptrans_belop,\nt.syndikat_deltaker_belop,\nt.rentetrekk_belop,\nt.cp_kks_exit_belop,\nt.nv_gl_belop,\nt.nv_gl_korr_henl_saldo_belop,\nt.nv_gl_korr_o_underkurs_belop,\nt.nv_kaptrans_belop,\nt.nv_syndikat_deltakr_belop,\nt.nv_rentetrekk_belop,\nt.nv_cp_kks_exit_belop,\nt.kredittforetak_flagg,\nt.syndikat_flagg,\nt.eierbytte_flagg,\nt.rk_trekkonto_utenfor_lgd_flagg,\nt.korr_kilde_trans_flagg,\nt.korr_kilde_gl_flagg,\nt.korr_kilde_konflikt_flagg,\nt.ekskludert_konto_flagg,\nt.ekskludert_konto_arsak,\nt.annet_spesielt,\nt.rente_navn,\nt.rente_ppoeng,\nt.rente_referanse_ppoeng,\nt.batch_navn\nfrom {{ ref('m_sak_bankkonto_kontantstrom_t') }} t\njoin {{ source('LGD_SOURCES', 'M_KONFIGURASJON_BANK') }} kb on kb.maletidspunkt_kode = t.maletidspunkt_kode\n                                    and kb.bk_sb1_selskap_id = t.bk_sb1_selskap_id\nwhere t.tid_id = '&uttrekksdato'\nand t.batch_navn = '&batch_navn'", "language": "sql", "refs": [{"name": "m_sak_bankkonto_kontantstrom_t", "package": null, "version": null}], "sources": [["LGD_SOURCES", "M_KONFIGURASJON_BANK"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK", "model.LGD_Project.m_sak_bankkonto_kontantstrom_t"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.LGD_Project.m_sak_bankkonto_kontantstrom_t": {"database": "RISIKO", "schema": "LGD", "name": "m_sak_bankkonto_kontantstrom_t", "resource_type": "model", "package_name": "LGD_Project", "path": "example/m_sak_bankkonto_kontantstrom_t.sql", "original_file_path": "models/example/m_sak_bankkonto_kontantstrom_t.sql", "unique_id": "model.LGD_Project.m_sak_bankkonto_kontantstrom_t", "fqn": ["LGD_Project", "example", "m_sak_bankkonto_kontantstrom_t"], "alias": "m_sak_bankkonto_kontantstrom_t", "checksum": {"name": "sha256", "checksum": "35dee1329151b3dbd35eb7d54c336f683f6207ca882c72dbd09cabdb62d83b26"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "materalized": "table", "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "materalized": "table"}, "created_at": 1698755982.7738926, "relation_name": "RISIKO.LGD.m_sak_bankkonto_kontantstrom_t", "raw_code": "{{ config(materalized = 'table') }}\n      with\n      diskonteringsrente as (\n        select dato, rente_navn, rente_ppoeng, rente_referanse_ppoeng\n        from (\n                select t.dato,\n                     trim(r.rentenavn) as rente_navn,\n                     to_char(coalesce(r.rentesats, lag(r.rentesats) over (partition by trim(r.rentenavn) order by dato))) as rente_ppoeng,  /*Det finnes enkelte hull rente-tidsserien, aldri mer enn 1 dag*/\n                     coalesce(r.rentesats, lag(r.rentesats) over (partition by trim(r.rentenavn) order by dato)) + 5 as rente_referanse_ppoeng,\n                     rank()over(partition by dato order by gjeldende_fra_dato desc) as rnk\n                from {{ ref('d_virkedag') }} t\n                left join {{ source('LGD_SOURCES', 'D_RENTE_BASIS_SATS') }} r on r.gjeldende_fra_dato between t.forrige_virkedag_dato and t.dato\n                     and trim(r.rentenavn) = 'NIBOR3M'\n                where r.rentenavn is not null\n             ) where rnk = 1\n      ),\n      \n      syndikat as (\n        select s.tid_id, s.kontonummer_hovedandel\n          from {{ source('LGD_SOURCES', 'F_KNYTNING_SYNDIKAT') }} s\n        group by s.tid_id, s.kontonummer_hovedandel\n        ),\n      cashpool as (\n        select cp.bk_bankkonto_id, cp.balansekonto_sb1_flagg, cp.scd_gyldig_fom, cp.scd_gyldig_tom\n        from {{ source('LGD_SOURCES', 'D_CASHPOOLHIERARKI') }} cp \n        where cp.scd_slettet_i_kilde_dato is null\n      ),\n      kks as (\n        select kks.bk_bankkonto_id, kks.scd_gyldig_fom, kks.scd_gyldig_tom\n        from {{ ref('v_reskontro_kks_underkonto') }} kks \n      ),\n\n   konto_lgd as (\n        select distinct ku.tid_id, ku.maletidspunkt_kode, flagg.kontantstrom_kilde_kode, ku.sk_bankkunde_biii_id, ku.rk_bankkunde_id, ku.rk_bankkonto_id, ku.bk_sb1_selskap_id, ku.kundenummer, ku.sak_start_dato, ku.tilfrisket_dato, ku.kontonummer, ku.konstatert_tap_dato,\n               koflagg.eksponering_flagg, koflagg.kredittforetak_flagg, koflagg.syndikat_flagg, koflagg.eierbytte_flagg, koflagg.rk_trekkonto_utenfor_lgd_flagg, koflagg.korr_kilde_trans_flagg, koflagg.korr_kilde_gl_flagg, flagg.korr_kilde_konflikt_flagg,\n               koflagg.ekskludert_konto_flagg, koflagg.ekskludert_konto_arsak, koflagg.annet_spesielt, ku.sak_start_tid_id, ku.beregn_til_dato, ku.beregn_til_tid_id,\n               cp.balansekonto_sb1_flagg, s.kontonummer_hovedandel, kksx.bk_bankkonto_id as kks_bk_bankkonto_id\n          from {{ ref('m_d_bankkunde_biii_lgd_t') }} ku \n          join {{ source('LGD_SOURCES', 'P_LGD_M_KONFIGURASJON') }} kb on kb.maletidspunkt_kode = ku.maletidspunkt_kode\n         \n          join {{ ref('m_d_bankkunde_biii_flagg_t') }} flagg on flagg.tid_id = '&uttrekksdato'\n                                                       and flagg.batch_navn = '&batch_navn'\n                                                       and flagg.sk_bankkunde_biii_id = ku.sk_bankkunde_biii_id\n                                                       and flagg.maletidspunkt_kode = ku.maletidspunkt_kode\n          join {{ ref('m_d_bankkonto_biii_flagg_t') }} koflagg on koflagg.tid_id = '&uttrekksdato'\n                                                         and koflagg.batch_navn = '&batch_navn'\n                                                         and koflagg.sk_bankkunde_biii_id = ku.sk_bankkunde_biii_id\n                                                         and koflagg.rk_bankkonto_id = ku.rk_bankkonto_id\n                                                         and koflagg.maletidspunkt_kode = ku.maletidspunkt_kode\n        left join cashpool cp on cp.bk_bankkonto_id = ku.kontonummer\n                             and (ku.sak_start_dato between cp.scd_gyldig_fom and cp.scd_gyldig_tom\n                                 or ku.beregn_til_dato between cp.scd_gyldig_fom and cp.scd_gyldig_tom)\n\n        left join syndikat s on s.tid_id between ku.sak_start_tid_id and ku.beregn_til_tid_id\n                            and s.kontonummer_hovedandel = ku.kontonummer\n                            \n        left join kks kksx on kksx.bk_bankkonto_id = ku.kontonummer\n                          and (ku.sak_start_dato between kksx.scd_gyldig_fom and kksx.scd_gyldig_tom\n                              or ku.beregn_til_dato between kksx.scd_gyldig_fom and kksx.scd_gyldig_tom)\n\n          where ku.tid_id = '&uttrekksdato'\n          and   ku.batch_navn = '&batch_navn'   \n\n      )\nselect \n       ku.tid_id, ku.maletidspunkt_kode, ku.kontantstrom_kilde_kode, ku.sk_bankkunde_biii_id, ku.rk_bankkunde_id, ku.rk_bankkonto_id, ku.bk_sb1_selskap_id, ku.sak_start_dato, ku.tilfrisket_dato, ku.kontonummer, ku.eksponering_flagg, tid.tid_id kontantstrom_tid_id, tid.dato kontantstrom_dato,\n       nvl(k.gjenvinning_belop, 0)\n         + case when nvl(k2.gjenvinning_belop, 0) < 0 and nvl(k.gjenvinning_belop, 0) >= 0 then greatest(k2.gjenvinning_belop, -nvl(k.gjenvinning_belop, 0)) else 0 end\n         + nvl(k3.gjenvinning_belop, 0)\n         + nvl(tk1a.gjenvinning_belop, 0)\n         + nvl(tk1b.gjenvinning_belop, 0)\n         + nvl(tk2.gjenvinning_belop, 0)\n         + nvl(tk3.gjenvinning_belop, 0) kontantstrom_belop,\n       round(\n         nvl(disc_naverdi(k.gjenvinning_belop, dr.rente_referanse_ppoeng, ku.sak_start_dato, k.dato), 0)\n           + nvl(disc_naverdi(case when nvl(k2.gjenvinning_belop, 0) < 0 and nvl(k.gjenvinning_belop, 0) >= 0 then greatest(k2.gjenvinning_belop, -nvl(k.gjenvinning_belop, 0)) else 0 end, dr.rente_referanse_ppoeng, ku.sak_start_dato, k2.dato), 0)\n           + nvl(disc_naverdi(k3.gjenvinning_belop, dr.rente_referanse_ppoeng, ku.sak_start_dato, k3.dato), 0)\n           + nvl(disc_naverdi(tk1a.gjenvinning_belop, dr.rente_referanse_ppoeng, ku.sak_start_dato, tk1a.dato), 0)\n           + nvl(disc_naverdi(tk1b.gjenvinning_belop, dr.rente_referanse_ppoeng, ku.sak_start_dato, tk1b.dato), 0)\n           + nvl(disc_naverdi(tk2.gjenvinning_belop, dr.rente_referanse_ppoeng, ku.sak_start_dato, tk2.dato), 0)\n           + nvl(disc_naverdi(tk3.gjenvinning_belop, dr.rente_referanse_ppoeng, ku.sak_start_dato, tk3.dato), 0)\n         , 2) naverdi_kontantstrom_belop,\n       case when (ku.eksponering_flagg = '1'\n                  or ku.balansekonto_sb1_flagg = '1'\n                  or ku.kontonummer_hovedandel is not null)\n                 and not nvl(ku.balansekonto_sb1_flagg, '1') = '0'\n                 and ku.kks_bk_bankkonto_id is null\n                  /* Unnlater \u00e5 regne med gjenvinninger p\u00e5 dato for konstatert tap, da dette som regel er feilkodet tapsf\u00f8ring */\n                 and not (nvl(ku.konstatert_tap_dato, tid.dato - 1) = tid.dato   /* Manglende konstatert tap-dato skal ikke gi match */\n                          and (nvl(k.gjenvinning_belop, 0)\n                               + case when nvl(k2.gjenvinning_belop, 0) < 0 and nvl(k.gjenvinning_belop, 0) >= 0 then greatest(k2.gjenvinning_belop, -nvl(k.gjenvinning_belop, 0)) else 0 end\n                               + nvl(k3.gjenvinning_belop, 0)\n                               + nvl(tk1a.gjenvinning_belop, 0)) > 0)\n              then '1'\n              else '0'\n        end gyldig_kontantstrom_flagg,\n       k.gjenvinning_belop gl_belop,\n       case when nvl(k2.gjenvinning_belop, 0) < 0 and nvl(k.gjenvinning_belop, 0) >= 0 then greatest(k2.gjenvinning_belop, -nvl(k.gjenvinning_belop, 0)) else 0 end gl_korr_henl_saldo_belop,\n       k2.gjenvinning_belop ujust_korr_henl_saldo_belop, k3.gjenvinning_belop gl_korr_over_underkurs_belop, tk1a.gjenvinning_belop kaptrans_belop, tk1b.gjenvinning_belop syndikat_deltaker_belop, tk2.gjenvinning_belop rentetrekk_belop, tk3.gjenvinning_belop cp_kks_exit_belop,\n       round(disc_naverdi(k.gjenvinning_belop, dr.rente_referanse_ppoeng, ku.sak_start_dato, k.dato), 2) nv_gl_belop,\n       round(disc_naverdi(case when nvl(k2.gjenvinning_belop, 0) < 0 and nvl(k.gjenvinning_belop, 0) >= 0 then greatest(k2.gjenvinning_belop, -nvl(k.gjenvinning_belop, 0)) else 0 end, dr.rente_referanse_ppoeng, ku.sak_start_dato, k2.dato), 2) nv_gl_korr_henl_saldo_belop,\n       round(disc_naverdi(k3.gjenvinning_belop, dr.rente_referanse_ppoeng, ku.sak_start_dato, k3.dato), 2) nv_gl_korr_o_underkurs_belop,\n       round(disc_naverdi(tk1a.gjenvinning_belop, dr.rente_referanse_ppoeng, ku.sak_start_dato, tk1a.dato), 2) nv_kaptrans_belop,\n       round(disc_naverdi(tk1b.gjenvinning_belop, dr.rente_referanse_ppoeng, ku.sak_start_dato, tk1b.dato), 2) nv_syndikat_deltakr_belop,\n       round(disc_naverdi(tk2.gjenvinning_belop, dr.rente_referanse_ppoeng, ku.sak_start_dato, tk2.dato), 2) nv_rentetrekk_belop,\n       round(disc_naverdi(tk3.gjenvinning_belop, dr.rente_referanse_ppoeng, ku.sak_start_dato, tk3.dato), 2) nv_cp_kks_exit_belop,\n       ku.kredittforetak_flagg, ku.syndikat_flagg, ku.eierbytte_flagg, ku.rk_trekkonto_utenfor_lgd_flagg, ku.korr_kilde_trans_flagg, ku.korr_kilde_gl_flagg, ku.korr_kilde_konflikt_flagg, ku.ekskludert_konto_flagg, ku.ekskludert_konto_arsak, ku.annet_spesielt,\n       dr.rente_navn, dr.rente_ppoeng, dr.rente_referanse_ppoeng,\n       '&batch_navn' as batch_navn\n       \n        from konto_lgd ku\n        join {{ ref('d_virkedag') }} tid on tid.dato between ku.sak_start_dato and ku.beregn_til_dato \n        /* Holder kontantstr\u00f8mmer for saker med sak_start_dato < 1.1.2009 utenfor, saker er da ev. med i datasettet av andre \u00e5rsaker enn \u00e5 beregne historisk LGD*/\n        left join {{ ref('m_gl_kontantstrom_t') }} k on k.dato = tid.dato\n                                             and k.sk_bankkunde_biii_id = ku.sk_bankkunde_biii_id\n                                             and k.kontonummer = ku.kontonummer\n                                             and k.trans_kilde_kode = 'gl'\n                                             and ku.kontantstrom_kilde_kode = 'GL'\n                                             and ku.sak_start_dato >= to_date('20090101', 'yyyymmdd')\n                                             and ku.maletidspunkt_kode = k.maletidspunkt_kode\n                                             and k.tid_id = '&uttrekksdato'\n                                             and k.batch_navn = '&batch_navn'\n        left join {{ ref('m_gl_kontantstrom_t') }} k2 on k2.dato = tid.dato\n                                              and k2.sk_bankkunde_biii_id = ku.sk_bankkunde_biii_id\n                                              and k2.kontonummer = ku.kontonummer\n                                              and k2.trans_kilde_kode = 'HENLEGGELSE_SALDO'\n                                              and ku.kontantstrom_kilde_kode = 'GL'\n                                              and ku.sak_start_dato >= to_date('20090101', 'yyyymmdd')\n                                              and ku.maletidspunkt_kode = k2.maletidspunkt_kode\n                                              and k2.tid_id = '&uttrekksdato'\n                                              and k2.batch_navn = '&batch_navn'\n\n        left join {{ ref('m_gl_kontantstrom_t') }} k3 on k3.dato = tid.dato\n                                              and k3.sk_bankkunde_biii_id = ku.sk_bankkunde_biii_id\n                                              and k3.kontonummer = ku.kontonummer\n                                              and k3.trans_kilde_kode = 'OVER-UNDERKURS'\n                                              and ku.kontantstrom_kilde_kode = 'GL'\n                                              and ku.sak_start_dato >= to_date('20090101', 'yyyymmdd')\n                                              and ku.maletidspunkt_kode = k3.maletidspunkt_kode\n                                              and k3.tid_id = '&uttrekksdato'\n                                              and k3.batch_navn = '&batch_navn'\n\n        left join {{ ref('m_trans_kontantstrom_t') }}  tk1a on tk1a.dato = tid.dato\n                                                   and tk1a.sk_bankkunde_biii_id = ku.sk_bankkunde_biii_id\n                                                   and tk1a.rk_bankkonto_id = ku.rk_bankkonto_id\n                                                   and tk1a.trans_kilde_kode = 'ordin\u00e6r'\n                                                   and ku.kontantstrom_kilde_kode = 'TRANS'\n                                                   and ku.sak_start_dato >= to_date('20090101', 'yyyymmdd')\n                                                   and ku.maletidspunkt_kode = tk1a.maletidspunkt_kode\n                                                   and tk1a.tid_id = '&uttrekksdato'\n                                                   and tk1a.batch_navn = '&batch_navn'\n                                                   \n        left join {{ ref('m_trans_kontantstrom_t') }} tk1b on tk1b.dato = tid.dato\n                                                   and tk1b.sk_bankkunde_biii_id = ku.sk_bankkunde_biii_id\n                                                   and tk1b.rk_bankkonto_id = ku.rk_bankkonto_id\n                                                   and tk1b.trans_kilde_kode = 'syndikat'\n                                                   and ku.kontantstrom_kilde_kode = 'TRANS'\n                                                   and ku.sak_start_dato >= to_date('20090101', 'yyyymmdd')\n                                                   and ku.maletidspunkt_kode = tk1b.maletidspunkt_kode\n                                                   and tk1b.tid_id = '&uttrekksdato'\n                                                   and tk1b.batch_navn = '&batch_navn'\n                                                   \n        left join {{ ref('m_trans_kontantstrom_rente_t') }} tk2 on tk2.dato = tid.dato\n                                                        and tk2.sk_bankkunde_biii_id = ku.sk_bankkunde_biii_id\n                                                        and tk2.rk_bankkonto_id = ku.rk_bankkonto_id\n                                                        and ku.kontantstrom_kilde_kode = 'TRANS'\n                                                        and ku.sak_start_dato >= to_date('20090101', 'yyyymmdd')\n                                                        and ku.maletidspunkt_kode = tk2.maletidspunkt_kode\n                                                        and tk2.tid_id = '&uttrekksdato'\n                                                        and tk2.batch_navn = '&batch_navn'\n\n        left join {{ ref('v_trans_kontantstrom_cp_kks') }} tk3 on tk3.dato = tid.dato\n                                                         and tk3.sk_bankkunde_biii_id = ku.sk_bankkunde_biii_id\n                                                         and tk3.rk_bankkonto_id = ku.rk_bankkonto_id\n                                                         and ku.kontantstrom_kilde_kode = 'TRANS'\n                                                         and ku.sak_start_dato >= to_date('20090101', 'yyyymmdd')\n\n        left join diskonteringsrente dr on dr.dato = ku.sak_start_dato\n\n       where /* \u00f8nsker i hovedsak reelle kontantstr\u00f8mmer*/\n       ((ku.eksponering_flagg = '1'\n         or ku.balansekonto_sb1_flagg = '1'\n         or ku.kontonummer_hovedandel is not null)\n        and not nvl(ku.balansekonto_sb1_flagg, '1') = '0'\n        and ku.kks_bk_bankkonto_id is null\n        and nvl(k.gjenvinning_belop, 0)\n             + nvl(k2.gjenvinning_belop, 0)\n             + nvl(k3.gjenvinning_belop, 0)\n             + nvl(tk1a.gjenvinning_belop, 0)\n             + nvl(tk1b.gjenvinning_belop, 0)\n             + nvl(tk2.gjenvinning_belop, 0)\n             + nvl(tk3.gjenvinning_belop, 0) <> 0)\n    or tid.dato = ku.sak_start_dato /* \u00f8nsker minimum 1 rad per bankkonto ut av viewet */", "language": "sql", "refs": [{"name": "d_virkedag", "package": null, "version": null}, {"name": "v_reskontro_kks_underkonto", "package": null, "version": null}, {"name": "m_d_bankkunde_biii_lgd_t", "package": null, "version": null}, {"name": "m_d_bankkunde_biii_flagg_t", "package": null, "version": null}, {"name": "m_d_bankkonto_biii_flagg_t", "package": null, "version": null}, {"name": "d_virkedag", "package": null, "version": null}, {"name": "m_gl_kontantstrom_t", "package": null, "version": null}, {"name": "m_gl_kontantstrom_t", "package": null, "version": null}, {"name": "m_gl_kontantstrom_t", "package": null, "version": null}, {"name": "m_trans_kontantstrom_t", "package": null, "version": null}, {"name": "m_trans_kontantstrom_t", "package": null, "version": null}, {"name": "m_trans_kontantstrom_rente_t", "package": null, "version": null}, {"name": "v_trans_kontantstrom_cp_kks", "package": null, "version": null}], "sources": [["LGD_SOURCES", "D_CASHPOOLHIERARKI"], ["LGD_SOURCES", "P_LGD_M_KONFIGURASJON"], ["LGD_SOURCES", "F_KNYTNING_SYNDIKAT"], ["LGD_SOURCES", "D_RENTE_BASIS_SATS"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.LGD_Project.LGD_SOURCES.D_CASHPOOLHIERARKI", "source.LGD_Project.LGD_SOURCES.P_LGD_M_KONFIGURASJON", "source.LGD_Project.LGD_SOURCES.F_KNYTNING_SYNDIKAT", "source.LGD_Project.LGD_SOURCES.D_RENTE_BASIS_SATS", "model.LGD_Project.d_virkedag", "model.LGD_Project.v_reskontro_kks_underkonto", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_flagg_t", "model.LGD_Project.m_d_bankkonto_biii_flagg_t", "model.LGD_Project.d_virkedag", "model.LGD_Project.m_gl_kontantstrom_t", "model.LGD_Project.m_gl_kontantstrom_t", "model.LGD_Project.m_gl_kontantstrom_t", "model.LGD_Project.m_trans_kontantstrom_t", "model.LGD_Project.m_trans_kontantstrom_t", "model.LGD_Project.m_trans_kontantstrom_rente_t", "model.LGD_Project.v_trans_kontantstrom_cp_kks"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.LGD_Project.m_d_bankkunde_biii_flagg_t": {"database": "RISIKO", "schema": "LGD", "name": "m_d_bankkunde_biii_flagg_t", "resource_type": "model", "package_name": "LGD_Project", "path": "example/m_d_bankkunde_biii_flagg_t.sql", "original_file_path": "models/example/m_d_bankkunde_biii_flagg_t.sql", "unique_id": "model.LGD_Project.m_d_bankkunde_biii_flagg_t", "fqn": ["LGD_Project", "example", "m_d_bankkunde_biii_flagg_t"], "alias": "m_d_bankkunde_biii_flagg_t", "checksum": {"name": "sha256", "checksum": "cf17a658ce49228a08e7561a41e728d44848bb2066f17d6e66d9705a5bc7d0be"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1698755982.7798831, "relation_name": "RISIKO.LGD.m_d_bankkunde_biii_flagg_t", "raw_code": "select\n '&uttrekksdato' as tid_id,\n ku.maletidspunkt_kode,\n ku.bk_sb1_selskap_id,\n ku.sk_bankkunde_biii_id,\n ku.kredittforetak_flagg,\n ku.syndikat_flagg,\n ku.eierbytte_flagg,\n ku.rk_trekkonto_utenfor_lgd_flagg,\n ku.korr_kilde_trans_flagg,\n ku.korr_kilde_gl_flagg,\n ku.korr_kilde_konflikt_flagg,\n ku.ekskludert_konto_flagg,\n --ku.annet_spesielt,\n case when ku.korr_kilde_konflikt_flagg = '0' and (ku.korr_kilde_trans_flagg = '1' or ku.korr_kilde_gl_flagg = '1')\n        then case when ku.korr_kilde_gl_flagg = '1'\n                   and ku.sak_start_dato >= gl.trans_fom_dato\n                   and ku.beregn_til_dato <= gl.trans_tom_dato then 'GL'\n                  else 'TRANS'\n              end\n      else case when ku.sak_start_dato >= gl.trans_fom_dato\n                 and ku.beregn_til_dato <= gl.trans_tom_dato\n                 and ku.kredittforetak_flagg = '0'\n                 and ku.syndikat_flagg = '0' then 'GL'\n                else 'TRANS'\n            end\n  end kontantstrom_kilde_kode,\n  '&batch_navn' as batch_navn\n  from (select ku.sk_bankkunde_biii_id,\n               ku.maletidspunkt_kode,\n               ku.bk_sb1_selskap_id,\n               ku.sak_start_dato,\n               max(ku.beregn_til_dato) beregn_til_dato,\n               max(ku.kredittforetak_flagg) kredittforetak_flagg,\n               max(ku.syndikat_flagg) syndikat_flagg,\n               max(ku.eierbytte_flagg) eierbytte_flagg,\n               max(ku.rk_trekkonto_utenfor_lgd_flagg) rk_trekkonto_utenfor_lgd_flagg,\n               max(ku.korr_kilde_trans_flagg) korr_kilde_trans_flagg,\n               max(ku.korr_kilde_gl_flagg) korr_kilde_gl_flagg,\n               case when max(ku.korr_kilde_trans_flagg) || max(ku.korr_kilde_gl_flagg) = '11' then '1' else '0' end korr_kilde_konflikt_flagg,\n               max(ku.ekskludert_konto_flagg) ekskludert_konto_flagg\n              -- listagg(nullif(spesielt, 'x'), ', ') within group (order by spesielt) annet_spesielt\n                from (select ku.sk_bankkunde_biii_id,\n                             ku.maletidspunkt_kode,\n                             ku.bk_sb1_selskap_id,\n                             ku.sak_start_dato,\n                             max(ku.beregn_til_dato) beregn_til_dato,\n                             max(ku.kredittforetak_flagg) kredittforetak_flagg,\n                             max(ku.syndikat_flagg) syndikat_flagg,\n                             max(ku.eierbytte_flagg) eierbytte_flagg,\n                             max(ku.rk_trekkonto_utenfor_lgd_flagg) rk_trekkonto_utenfor_lgd_flagg,\n                             max(ku.korr_kilde_trans_flagg) korr_kilde_trans_flagg,\n                             max(ku.korr_kilde_gl_flagg) korr_kilde_gl_flagg,\n                             max(ku.ekskludert_konto_flagg) ekskludert_konto_flagg\n                        --     trim(x.column_value) spesielt\n                        from {{ ref('m_d_bankkonto_biii_flagg_t') }} ku\n                        --     xmltable(('\"' || nvl(replace(ku.annet_spesielt, ',', '\",\"'), 'x') || '\"')) x\n\n                        where ku.tid_id = '&uttrekksdato'\n                          and ku.batch_navn = '&batch_navn'\n                          and (ku.maletidspunkt_kode,ku.bk_sb1_selskap_id) in (select maletidspunkt_kode, bk_sb1_selskap_id from {{ source('LGD_SOURCES', 'M_KONFIGURASJON_BANK') }} )\n                       group by ku.sk_bankkunde_biii_id, ku.maletidspunkt_kode, ku.bk_sb1_selskap_id, ku.sak_start_dato --, trim(x.column_value)\n                     ) ku\n               group by ku.sk_bankkunde_biii_id, ku.maletidspunkt_kode, ku.bk_sb1_selskap_id, ku.sak_start_dato\n        ) ku\n  left join {{ ref('m_gl_periode_t') }} gl on gl.gl_bankkode = ku.bk_sb1_selskap_id and gl.tid_id = '&uttrekksdato' and gl.batch_navn = '&batch_navn' and gl.maletidspunkt_kode = ku.maletidspunkt_kode", "language": "sql", "refs": [{"name": "m_d_bankkonto_biii_flagg_t", "package": null, "version": null}, {"name": "m_gl_periode_t", "package": null, "version": null}], "sources": [["LGD_SOURCES", "M_KONFIGURASJON_BANK"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK", "model.LGD_Project.m_d_bankkonto_biii_flagg_t", "model.LGD_Project.m_gl_periode_t"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.LGD_Project.m_d_bankkonto_biii_flagg_t": {"database": "RISIKO", "schema": "LGD", "name": "m_d_bankkonto_biii_flagg_t", "resource_type": "model", "package_name": "LGD_Project", "path": "example/m_d_bankkonto_biii_flagg_t.sql", "original_file_path": "models/example/m_d_bankkonto_biii_flagg_t.sql", "unique_id": "model.LGD_Project.m_d_bankkonto_biii_flagg_t", "fqn": ["LGD_Project", "example", "m_d_bankkonto_biii_flagg_t"], "alias": "m_d_bankkonto_biii_flagg_t", "checksum": {"name": "sha256", "checksum": "0da91eacd4af877412ba8b34a49d2015875f0b8727966eb817e1778e5f8be312"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Viewet setter flagg verdier p\u00e5 en rekke kolonner p\u00e5 kontoniv\u00e5.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "LGD_Project://models/example/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1698755982.865936, "relation_name": "RISIKO.LGD.m_d_bankkonto_biii_flagg_t", "raw_code": "/**********************************************************************************************\nBeskrivelse: View som genererer opp relevante flagg for beregning av LGD per konto.\n             For at ikke saker skal vingle mellom beregninger basert p\u00e5 m\u00e5letidspunktet,\n             s\u00e5 beregnes flagg alltid per m\u00e5letidspunkt tid_id.\n\nTabellgrunnlag:  m_d_bankkunde_biii_lgd\n                 f_ead\n                 d_tid\n                 d_bankkonto_biii\n                 f_knytning_syndikat\n                 f_kontobalanse\n                 d_reskontro_trekkonto\n                 p_korr_trans_kilde_kode\n                 f_kontobalanse_t\n\nEndringslogg:\nInitialier   Dato         Beskrivelse\nMBJ          15.12.20     Opprettet view\nMJ           19.01.23     Overf\u00f8rt til tabellstyrt tool-entilen\n\n***********************************************************************************************/\n{{ config(materialized='table') }}\nwith\neksponering as (\n  select /*+ MATERIALIZE */ ku.sk_bankkunde_biii_id, ku.rk_bankkonto_id, ku.kontonummer,\n         max(case when eksp.ead_total > 0 then '1' else '0' end) eksponering_flagg\n    from {{ ref('m_d_bankkunde_biii_lgd_t') }} ku\n    join {{ source('LGD_SOURCES', 'M_KONFIGURASJON_BANK') }} kb on kb.bk_sb1_selskap_id = ku.bk_sb1_selskap_id\n                                        and kb.maletidspunkt_kode = ku.maletidspunkt_kode\n    join {{ ref('d_virkedag') }} tid_start on ku.sak_start_tid_id  = tid_start.tid_id\n    left join {{ source('LGD_SOURCES', 'F_EAD_T') }} eksp on eksp.tid_id between tid_start.forrige_virkedag_tid_id and least(ku.beregn_til_tid_id, ku.tilfrisket_tid_id, nvl(ku.konto_tom_tid_id, ku.tilfrisket_tid_id), ku.tid_id)\n                                and case when eksp.ead_total > 0 then eksp.rk_bankkonto_id else null end = ku.rk_bankkonto_id\n  where ku.tid_id = '20230331'\n    and ku.batch_navn = 'batch_navn'                                \n   group by ku.sk_bankkunde_biii_id, ku.rk_bankkonto_id, ku.kontonummer\n),\nkredittforetak as (\n  select /*+ MATERIALIZE */ ku.sk_bankkunde_biii_id, ku.rk_bankkonto_id, ku.kontonummer,\n         max(case when ko.rk_bankkonto_id is not null then '1' else '0' end) kredittforetak_flagg\n    from {{ ref('m_d_bankkunde_biii_lgd_t') }} ku\n    join {{ source('LGD_SOURCES', 'M_KONFIGURASJON_BANK') }} kb on kb.bk_sb1_selskap_id = ku.bk_sb1_selskap_id\n                                        and kb.maletidspunkt_kode = ku.maletidspunkt_kode\n\n    left join {{ source('LGD_SOURCES', 'FAKE_D_BANKKONTO') }} ko on ku.rk_bankkonto_id = ko.rk_bankkonto_id\n                                         and ko.scd_gyldig_fom <= ku.tid_dato\n                                         /* Inkluderer ogs\u00e5 kontroll mot dagen f\u00f8r sak_start_dato, fordi en tibakef\u00f8ring til bankene fra og med sak_start_dato vil for\u00e5rsake rot i regnskapet*/\n                                         and ko.scd_gyldig_tom >= ku.sak_start_dato - 1\n                                         and ko.bk_sb1_selskap_forvalter_id <> ko.bk_sb1_selskap_eier_id\n   where ku.tid_id = '20230331'\n   and ku.batch_navn = 'batch_navn'\n   group by ku.sk_bankkunde_biii_id, ku.rk_bankkonto_id, ku.kontonummer\n),\nsyndikat as (\n  select /*+ MATERIALIZE */ ku.sk_bankkunde_biii_id, ku.rk_bankkonto_id, ku.kontonummer,\n         max(case when s.kontonummer_deltakerandel is not null then '1' else '0' end) syndikat_flagg\n    from {{ ref('m_d_bankkunde_biii_lgd_t') }} ku\n    join {{ source('LGD_SOURCES', 'M_KONFIGURASJON_BANK') }} kb on kb.bk_sb1_selskap_id = ku.bk_sb1_selskap_id\n                                        and kb.maletidspunkt_kode = ku.maletidspunkt_kode\n\n    left join {{ source('LGD_SOURCES', 'F_KNYTNING_SYNDIKAT') }} s on s.tid_id between ku.sak_start_tid_id and ku.tid_id\n                                           and s.kontonummer_hovedandel = ku.kontonummer\n   where ku.tid_id = '20230331'\n   and ku.batch_navn = 'batch_navn'\n   group by ku.sk_bankkunde_biii_id, ku.rk_bankkonto_id, ku.kontonummer\n),\nrk_trekkonto_utenfor_lgd as (\n  select /*+ MATERIALIZE */ ku.sk_bankkunde_biii_id, ku.rk_bankkonto_id, ku.kontonummer,\n         max(case when rkt.kontonummer is not null and rkt_ak.kontonummer is null then '1' else '0' end) rk_trekkonto_utenfor_lgd_flagg\n    from {{ ref('m_d_bankkunde_biii_lgd_t') }} ku\n    join {{ source('LGD_SOURCES', 'M_KONFIGURASJON_BANK') }} kb on kb.bk_sb1_selskap_id = ku.bk_sb1_selskap_id\n                                        and kb.maletidspunkt_kode = ku.maletidspunkt_kode\n\n    left join {{ source('LGD_SOURCES', 'D_RESKONTRO_TREKKONTO') }} rkt on rkt.kontonummer = ku.kontonummer\n                                               and rkt.scd_gyldig_tom >= ku.sak_start_dato\n                                               and rkt.scd_gyldig_fom <= ku.beregn_til_dato\n    left join {{ source('LGD_SOURCES', 'FAKE_D_BANKKONTO') }} rkt_ak on rkt_ak.kontonummer = rkt.kontonummer_trekkonto\n   where ku.tid_id = '20230331'\n   and ku.batch_navn = 'batch_navn'\n\n   group by ku.sk_bankkunde_biii_id, ku.rk_bankkonto_id, ku.kontonummer\n),\nkorr_trans_kilde as (\n  select /*+ MATERIALIZE */ ku.sk_bankkunde_biii_id, ku.rk_bankkonto_id, ku.kontonummer,\n         max(case when p.trans_kilde_kode = 'TRANS' then '1' else '0' end) korr_kilde_trans_flagg,\n         max(case when p.trans_kilde_kode = 'GL' then '1' else '0' end) korr_kilde_gl_flagg\n    from {{ ref('m_d_bankkunde_biii_lgd_t') }} ku\n    join {{ source('LGD_SOURCES', 'M_KONFIGURASJON_BANK') }} kb on kb.bk_sb1_selskap_id = ku.bk_sb1_selskap_id\n                                        and kb.maletidspunkt_kode = ku.maletidspunkt_kode\n    \n    left join {{ source('LGD_SOURCES', 'P_KORR_TRANS_KILDE_KODE') }} p on p.rk_bankkunde_id = ku.rk_bankkunde_id\n\n   where ku.tid_id = '20230331'\n   and ku.batch_navn = 'batch_navn'\n   group by ku.sk_bankkunde_biii_id, ku.rk_bankkonto_id, ku.kontonummer\n),\nsmn_bal_mangler_20180108 as (\n  select /*+ MATERIALIZE */ ku.sk_bankkunde_biii_id, ku.rk_bankkonto_id, ku.kontonummer,\n         case when FIRST_VALUE(ku.bk_sb1_selskap_id) OVER (ORDER BY 1) = '4210'\n         --case when max(ku.bk_sb1_selskap_id) keep (dense_rank first order by 1) = '4210'\n                   and max(case when bal_mangler.tid_id in ('20180105', '20180109') then '1' else '0' end) = '1'\n                   and max(case when bal_mangler.tid_id in ('20180108') then '1' else '0' end) = '0'\n                   and max(case when bal_mangler.tid_id in ('20180109') then bal_mangler.saldo_valuta else null end) - max(case when bal_mangler.tid_id in ('20180105') then bal_mangler.saldo_valuta else null end) <> 0\n                   and (max(case when bal_mangler.tid_id in ('20180109') then bal_mangler.saldo_valuta else null end) < 0\n                        or max(case when bal_mangler.tid_id in ('20180105') then bal_mangler.saldo_valuta else null end) < 0)\n                then '1:SMN kontobalansemangel 20180108' else '' end spesielt\n    from {{ ref('m_d_bankkunde_biii_lgd_t') }} ku\n    join {{ source('LGD_SOURCES', 'M_KONFIGURASJON_BANK') }} kb on kb.bk_sb1_selskap_id = ku.bk_sb1_selskap_id\n                                        and kb.maletidspunkt_kode = ku.maletidspunkt_kode\n    \n    left join {{ source('LGD_SOURCES', 'F_KONTOBALANSE_T') }} bal_mangler on bal_mangler.tid_id between '20180105' and '20180109'\n                                                      and bal_mangler.tid_id between ku.sak_start_tid_id and ku.beregn_til_tid_id\n                                                      and bal_mangler.rk_bankkonto_id = ku.rk_bankkonto_id\n   where ku.tid_id = '20230331'\n   and ku.batch_navn = 'batch_navn'\n   group by ku.sk_bankkunde_biii_id, ku.rk_bankkonto_id, ku.kontonummer, ku.bk_sb1_selskap_id\n),\nul_trans_mangler_20190826 as (\n  select /*+ MATERIALIZE */ ku.sk_bankkunde_biii_id, ku.rk_bankkonto_id, ku.kontonummer,\n         case when FIRST_VALUE(ko.edb_rutine) OVER (ORDER BY 1) = 'U'\n         --case when max(ko.edb_rutine) keep (dense_rank first order by 1) = 'U'\n                   and max(case when bal_mangler.tid_id in ('20190823', '20190827') then '1' else '0' end) = '1'\n                   and max(case when bal_mangler.tid_id in ('20190826') then '1' else '0' end) = '0'\n                   and max(case when bal_mangler.tid_id in ('20190827') then bal_mangler.saldo_valuta else null end) - max(case when bal_mangler.tid_id in ('20190823') then bal_mangler.saldo_valuta else null end) <> 0\n                   and (max(case when bal_mangler.tid_id in ('20190827') then bal_mangler.saldo_valuta else null end) < 0\n                        or max(case when bal_mangler.tid_id in ('20190823') then bal_mangler.saldo_valuta else null end) < 0)\n                then '2:UL-kapitaltransaksjoner mangler 20190826' else '' end spesielt\n    from {{ ref('m_d_bankkunde_biii_lgd_t') }} ku\n    join {{ source('LGD_SOURCES', 'M_KONFIGURASJON_BANK') }} kb on kb.bk_sb1_selskap_id = ku.bk_sb1_selskap_id\n                                        and kb.maletidspunkt_kode = ku.maletidspunkt_kode\n    \n    left join {{ source('LGD_SOURCES', 'FAKE_D_BANKKONTO') }} ko on ku.rk_bankkonto_id = ko.rk_bankkonto_id\n                                    and ku.beregn_til_dato between ko.scd_gyldig_fom and ko.scd_gyldig_tom\n    left join {{ source('LGD_SOURCES', 'F_KONTOBALANSE_T') }} bal_mangler on bal_mangler.tid_id between '20190823' and '20190827'\n                                                  and bal_mangler.tid_id between ku.sak_start_tid_id and ku.beregn_til_tid_id\n                                                  and bal_mangler.rk_bankkonto_id = ku.rk_bankkonto_id\n   where ku.tid_id = '20230331'\n   and ku.batch_navn = 'batch_navn'\n   group by ku.sk_bankkunde_biii_id, ku.rk_bankkonto_id, ku.kontonummer, ko.edb_rutine\n),\nekskludert_konto as (\n  select /*+ MATERIALIZE */ ku.sk_bankkunde_biii_id, ku.rk_bankkonto_id, ku.kontonummer,\n         max(ku.ekskludert_konto_flagg) ekskludert_konto_flagg,\n         listagg(case when ku.ekskludert_konto_arsak is not null then replace(ku.ekskludert_konto_arsak, ',', '') end, ',') within group (order by ku.ekskludert_konto_arsak) ekskludert_konto_arsak\n    from (select distinct ku.sk_bankkunde_biii_id, ku.rk_bankkonto_id, ku.kontonummer,\n             case\n                   /*Ekskluderte forbruksl\u00e5n for BN Bank (avsluttet produkt og n\u00e6r avsluttet portef\u00f8lje, beregnes feil)*/\n               when ku.bk_sb1_selskap_id = '9236' and ko.ko_kode in ('701002', '621912') then '1'\n               else '0'\n              end ekskludert_konto_flagg,\n             case /* Ekskluderte forbruksl\u00e5n for BN Bank (avsluttet produkt og n\u00e6r avsluttet portef\u00f8lje, beregnes feil)*/\n               when ku.bk_sb1_selskap_id = '9236' and ko.ko_kode in ('701002', '621912') then 'Forbruksl\u00e5n (KO-kode ' || ko.ko_kode || ')'\n              end ekskludert_konto_arsak\n    from {{ ref('m_d_bankkunde_biii_lgd_t') }} ku\n    join {{ source('LGD_SOURCES', 'M_KONFIGURASJON_BANK') }} kb on kb.bk_sb1_selskap_id = ku.bk_sb1_selskap_id\n                                        and kb.maletidspunkt_kode = ku.maletidspunkt_kode\n    \n    left join {{ source('LGD_SOURCES', 'FAKE_D_BANKKONTO') }} ko on ku.rk_bankkonto_id = ko.rk_bankkonto_id\n    where ku.tid_id = '20230331'\n      and ku.batch_navn = 'batch_navn'\n    ) ku\n   group by ku.sk_bankkunde_biii_id, ku.rk_bankkonto_id, ku.kontonummer\n),\nannet_spesielt as (\n  select /*+ MATERIALIZE */ sk_bankkunde_biii_id, rk_bankkonto_id, kontonummer,\n         listagg(case when spesielt is not null then replace(spesielt, ',', '') else null end, ',') within group (order by spesielt) annet_spesielt\n    from (select * from smn_bal_mangler_20180108\n          union all\n          select * from ul_trans_mangler_20190826)\n   group by sk_bankkunde_biii_id, rk_bankkonto_id, kontonummer\n)\nselect ku.tid_id,\n       ku.sk_bankkunde_biii_id,\n       kb.maletidspunkt_kode,\n       ku.bk_sb1_selskap_id,\n       ku.sak_start_dato,\n       ku.beregn_til_dato,\n       ku.rk_bankkonto_id,\n       ku.kontonummer,\n       e.eksponering_flagg,\n       k.kredittforetak_flagg,\n       s.syndikat_flagg,\n       ku.annen_eier_i_lgd_db_flagg eierbytte_flagg,\n       r.rk_trekkonto_utenfor_lgd_flagg,\n       ktk.korr_kilde_trans_flagg,\n       ktk.korr_kilde_gl_flagg,\n       ek.ekskludert_konto_flagg,\n       ek.ekskludert_konto_arsak,\n       sp.annet_spesielt,\n       'batch_navn' as batch_navn\n  from {{ ref('m_d_bankkunde_biii_lgd_t') }} ku \n  join {{ source('LGD_SOURCES', 'M_KONFIGURASJON_BANK') }} kb on kb.bk_sb1_selskap_id = ku.bk_sb1_selskap_id\n                                      and kb.maletidspunkt_kode = ku.maletidspunkt_kode\n  join eksponering e on e.sk_bankkunde_biii_id = ku.sk_bankkunde_biii_id\n                    and e.rk_bankkonto_id = ku.rk_bankkonto_id\n  join kredittforetak k on k.sk_bankkunde_biii_id = ku.sk_bankkunde_biii_id\n                       and k.rk_bankkonto_id = ku.rk_bankkonto_id\n  join syndikat s on s.sk_bankkunde_biii_id = ku.sk_bankkunde_biii_id\n                 and s.rk_bankkonto_id = ku.rk_bankkonto_id\n  join rk_trekkonto_utenfor_lgd r on r.sk_bankkunde_biii_id = ku.sk_bankkunde_biii_id\n                                 and r.rk_bankkonto_id = ku.rk_bankkonto_id\n  join korr_trans_kilde ktk on ktk.sk_bankkunde_biii_id = ku.sk_bankkunde_biii_id\n                           and ktk.rk_bankkonto_id = ku.rk_bankkonto_id\n  join ekskludert_konto ek on ek.sk_bankkunde_biii_id = ku.sk_bankkunde_biii_id\n                          and ek.rk_bankkonto_id = ku.rk_bankkonto_id\n  join annet_spesielt sp on sp.sk_bankkunde_biii_id = ku.sk_bankkunde_biii_id\n                        and sp.rk_bankkonto_id = ku.rk_bankkonto_id\nwhere ku.tid_id = '20230331'\nand ku.batch_navn = 'batch_navn'", "language": "sql", "refs": [{"name": "m_d_bankkunde_biii_lgd_t", "package": null, "version": null}, {"name": "d_virkedag", "package": null, "version": null}, {"name": "m_d_bankkunde_biii_lgd_t", "package": null, "version": null}, {"name": "m_d_bankkunde_biii_lgd_t", "package": null, "version": null}, {"name": "m_d_bankkunde_biii_lgd_t", "package": null, "version": null}, {"name": "m_d_bankkunde_biii_lgd_t", "package": null, "version": null}, {"name": "m_d_bankkunde_biii_lgd_t", "package": null, "version": null}, {"name": "m_d_bankkunde_biii_lgd_t", "package": null, "version": null}, {"name": "m_d_bankkunde_biii_lgd_t", "package": null, "version": null}, {"name": "m_d_bankkunde_biii_lgd_t", "package": null, "version": null}], "sources": [["LGD_SOURCES", "F_KONTOBALANSE_T"], ["LGD_SOURCES", "F_EAD_T"], ["LGD_SOURCES", "F_KNYTNING_SYNDIKAT"], ["LGD_SOURCES", "M_KONFIGURASJON_BANK"], ["LGD_SOURCES", "FAKE_D_BANKKONTO"], ["LGD_SOURCES", "D_RESKONTRO_TREKKONTO"], ["LGD_SOURCES", "P_KORR_TRANS_KILDE_KODE"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.LGD_Project.LGD_SOURCES.F_KONTOBALANSE_T", "source.LGD_Project.LGD_SOURCES.F_EAD_T", "source.LGD_Project.LGD_SOURCES.F_KNYTNING_SYNDIKAT", "source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK", "source.LGD_Project.LGD_SOURCES.FAKE_D_BANKKONTO", "source.LGD_Project.LGD_SOURCES.D_RESKONTRO_TREKKONTO", "source.LGD_Project.LGD_SOURCES.P_KORR_TRANS_KILDE_KODE", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.d_virkedag", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.LGD_Project.m_gl_kontantstrom_t": {"database": "RISIKO", "schema": "LGD", "name": "m_gl_kontantstrom_t", "resource_type": "model", "package_name": "LGD_Project", "path": "example/m_gl_kontantstrom_t.sql", "original_file_path": "models/example/m_gl_kontantstrom_t.sql", "unique_id": "model.LGD_Project.m_gl_kontantstrom_t", "fqn": ["LGD_Project", "example", "m_gl_kontantstrom_t"], "alias": "m_gl_kontantstrom_t", "checksum": {"name": "sha256", "checksum": "b3c26fcc4133b8ad43c842c78673d15565212d422993c220f5baf336a091636c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "LGD_Project://models/example/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1698755982.8668733, "relation_name": "RISIKO.LGD.m_gl_kontantstrom_t", "raw_code": "{{ config(materialized = 'table') }}\nwith nedskrivning as (select /*+ materialize*/ n.bk_bankkonto_id,\n                             n.bk_sb1_selskap_forvalter_id,\n                             n.nedskrivning_belop - nvl(lag(n.nedskrivning_belop) over(partition by n.bk_nedskrivning_id,\n                                                                     n.bk_sb1_selskap_forvalter_id order by n.scf_gyldig_fom),\n                                                                0) endring_nedskrivning_belop,\n                             n.scf_gyldig_fom,\n                             n.scf_gyldig_tom\n                                from {{ source('LGD_SOURCES', 'F_NEDSKRIVNING') }} n), \ncashpool as (select cp.bk_bankkonto_id, cp.scd_gyldig_fom, cp.scd_gyldig_tom\n             from {{ ref('v_cashpool_ikke_balanse') }} cp\n            ),\nkks as (select kks_u.bk_bankkonto_id, kks_u.scd_gyldig_fom, kks_u.scd_gyldig_tom\n        from {{ ref('v_reskontro_kks_underkonto') }} kks_u\n      ), \n\nm_gl_kontantstrom_temp2 as (\nselect \n   t.dato,\n   t.tid_id,\n   t.bk_sb1_selskap_id,\n   t.sk_bankkunde_biii_id,\n   t.rk_bankkonto_id,\n   t.kontonummer,\n   t.kontantstrom,\n   t.p_belop,\n   t.ul_flagg,\n   t.forrige_virkedag_tid_id,\n   n.endring_nedskrivning_belop,\n   t.p_belop - nvl(n.endring_nedskrivning_belop, 0) as p_belop_korr, /* inntekt er - p? P, f.eks. -5000 betyr nedskrivning redusert med 5000, som vil si -5000 i nedskrivning-endring.*/\n   t.trans_kilde_kode,\n   t.konto_sak_konstatert_tap_dato\n    from {{ ref('m_gl_kontantstrom_temp1') }} t\n    left join cashpool cp on cp.bk_bankkonto_id = t.kontonummer\n                         and t.dato between cp.scd_gyldig_fom and cp.scd_gyldig_tom\n    left join kks kks on kks.bk_bankkonto_id = t.kontonummer\n                     and t.dato between kks.scd_gyldig_fom and kks.scd_gyldig_tom\n    left join nedskrivning n on n.bk_sb1_selskap_forvalter_id = t.bk_sb1_selskap_id\n                            and n.bk_bankkonto_id = t.kontonummer\n                            and n.scf_gyldig_fom = t.dato\n                            and t.trans_kilde_kode = 'gl'\n   where cp.bk_bankkonto_id is null\n     and kks.bk_bankkonto_id is null\n\n)                 \nselect '&uttrekksdato' as tid_id,\n                konf.maletidspunkt_kode,\n                t.dato,\n                t.bk_sb1_selskap_id,\n                t.sk_bankkunde_biii_id,\n                t.rk_bankkonto_id,\n                t.kontonummer,\n                case\n                  when ul_flagg = '1' or t.trans_kilde_kode <> 'gl' or t.konto_sak_konstatert_tap_dato < t.dato then\n                   t.kontantstrom /* Ser bort fra fortegnet p? saldo for utl?nskontoer, korrigeringer og inngang konstaterte tap*/\n                  else\n                   case\n                     when bal.saldo_nok >= 0 then\n                      case\n                        when nvl(bal1.saldo_nok, 0) >= 0 then\n                         0\n                        else\n                         -nvl(bal1.saldo_nok, 0) - least(t.p_belop_korr, -nvl(bal1.saldo_nok, 0))\n                      end\n                     else /*saldo_samme_dag < 0*/\n                      case\n                        when nvl(bal1.saldo_nok, 0) >= 0 then\n                         bal.saldo_nok - case\n                           when t.p_belop_korr < 0 then\n                            t.p_belop_korr + least(nvl(bal1.saldo_nok, 0), -least(t.p_belop_korr, 0))\n                           else\n                            0\n                         end /* Trekker fra ikke-gjenvunnet renter/gebyrer, skal ikke telles som opptrekk*/\n                         +least(nvl(bal1.saldo_nok, 0), -least(t.p_belop_korr, 0)) /* Legger til renter/gebyrer dekket av positiv saldo forrige dag (som opptrekk)*/\n                        else\n                         kontantstrom\n                      end\n                   end\n                end as gjenvinning_belop,\n                t.kontantstrom,\n                t.p_belop,\n                t.ul_flagg,\n                t.endring_nedskrivning_belop,\n                t.p_belop_korr,\n                bal.saldo_nok saldo_samme_dag,\n                nvl(bal1.saldo_nok, 0) saldo_forrige_dag,\n                t.trans_kilde_kode,\n                t.konto_sak_konstatert_tap_dato,\n                '&batch_navn' as batch_navn\n           from m_gl_kontantstrom_temp2 t\n           join {{ source('LGD_SOURCES', 'F_KONTOBALANSE_T') }} bal on bal.tid_id = t.tid_id\n                                            and bal.rk_bankkonto_id = t.rk_bankkonto_id\n           left join {{ source('LGD_SOURCES', 'F_KONTOBALANSE_T') }} bal1 on bal1.tid_id = t.forrige_virkedag_tid_id\n                                                  and bal1.rk_bankkonto_id = t.rk_bankkonto_id\n           cross join {{ source('LGD_SOURCES', 'P_LGD_M_KONFIGURASJON') }} konf", "language": "sql", "refs": [{"name": "v_cashpool_ikke_balanse", "package": null, "version": null}, {"name": "v_reskontro_kks_underkonto", "package": null, "version": null}, {"name": "m_gl_kontantstrom_temp1", "package": null, "version": null}], "sources": [["LGD_SOURCES", "F_KONTOBALANSE_T"], ["LGD_SOURCES", "P_LGD_M_KONFIGURASJON"], ["LGD_SOURCES", "F_NEDSKRIVNING"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.LGD_Project.LGD_SOURCES.F_KONTOBALANSE_T", "source.LGD_Project.LGD_SOURCES.P_LGD_M_KONFIGURASJON", "source.LGD_Project.LGD_SOURCES.F_NEDSKRIVNING", "model.LGD_Project.v_cashpool_ikke_balanse", "model.LGD_Project.v_reskontro_kks_underkonto", "model.LGD_Project.m_gl_kontantstrom_temp1"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.LGD_Project.m_gl_kontantstrom_temp1": {"database": "RISIKO", "schema": "LGD", "name": "m_gl_kontantstrom_temp1", "resource_type": "model", "package_name": "LGD_Project", "path": "example/m_gl_kontantstrom_temp1.sql", "original_file_path": "models/example/m_gl_kontantstrom_temp1.sql", "unique_id": "model.LGD_Project.m_gl_kontantstrom_temp1", "fqn": ["LGD_Project", "example", "m_gl_kontantstrom_temp1"], "alias": "m_gl_kontantstrom_temp1", "checksum": {"name": "sha256", "checksum": "c757dff690125bede203ec62c5c8318fd712d9f77a6b469b6f2172292a72d7ad"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "LGD_Project://models/example/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1698755982.8664217, "relation_name": "RISIKO.LGD.m_gl_kontantstrom_temp1", "raw_code": "{{ config(materialized = 'table') }}\n\nselect \ndato,\ntid_id,\nforrige_virkedag_tid_id,\nbk_sb1_selskap_id,\nsk_bankkunde_biii_id,\nrk_bankkonto_id,\nkontonummer,\nkontantstrom,\np_belop,\nul_flagg,\ntrans_kilde_kode,\nkonto_sak_konstatert_tap_dato\nfrom (\n\nwith\ntid as (\n  select /*+ mateialize */ t.tid_id, t.dato, v.tid_id as virkedag_tid_id, v.dato as virkedag_dato, v.forrige_virkedag_tid_id, v.forrige_virkedag_dato, v.neste_virkedag_tid_id, v.neste_virkedag_dato\n    from {{ source('LGD_SOURCES', 'D_TID') }} t\n    join {{ ref('d_virkedag') }} v on t.tid_id < v.neste_virkedag_tid_id and t.tid_id >= v.tid_id\n),\nst_trans as (\nselect /*+ parallel(t,4) full(k) full(kb)*/\n       'gl' as trans_kilde_kode,\n       tid.virkedag_dato as dato,\n       tid.virkedag_tid_id as tid_id,\n       tid.forrige_virkedag_tid_id,       \n       k.sk_bankkunde_biii_id,\n       k.rk_bankkonto_id,\n       t.kontonummer,\n       t.gl_konto_id art,\n       t.klassifisering_type,\n       t.transaksjon_belop belop,\n       t.gl_system_id systemkode,\n       k.bk_sb1_selskap_id,\n       k.konstatert_tap_dato konto_sak_konstatert_tap_dato\n  from {{ ref('m_d_bankkunde_biii_lgd_t') }} k \n  join {{ source('LGD_SOURCES', 'M_KONFIGURASJON_BANK') }} kb on kb.bk_sb1_selskap_id = k.bk_sb1_selskap_id\n                                      and kb.maletidspunkt_kode = k.maletidspunkt_kode\n\n  join {{ source('LGD_SOURCES', 'F_GL_BANKKONTO_TRANS_B') }} t on t.kontonummer = k.kontonummer\n                                       /* m\u00e5 f\u00e5 med transaksjoner i sak, ink. som kan bli flyttet tilbake til en virkedag, tidskriterie er likevel med her, og ikke bare i where, for bedre ytelse*/\n                                       and t.transaksjon_dato between k.sak_start_dato and k.beregn_til_dato + 7\n  join tid tid on t.transaksjon_dato = tid.dato\n where tid.virkedag_dato <= k.beregn_til_dato\n and k.tid_id = 'uttrekksdato'\n and k.batch_navn = 'batch_navn'\n\nunion all   \nselect /*+ parallel(t,4) full(k) full(kb) full(t) full(ko)*/\n       ko.kategori trans_kilde_kode,\n       tid.dato,\n       t.tid_id as tid_id,\n       tid.forrige_virkedag_tid_id,\n       k.sk_bankkunde_biii_id,\n       k.rk_bankkonto_id,\n       k.kontonummer,\n       null art,\n       null klassifisering_type,\n       case ko.snu_gl_fortegn when '1' then -1 else 1 end * t.transaksjonsbelop_nok belop,\n       'KAPTRANS' systemkode,\n       k.bk_sb1_selskap_id,\n       k.konstatert_tap_dato konto_sak_konstatert_tap_dato\n from {{ ref('m_d_bankkunde_biii_lgd_t') }} k\n join {{ source('LGD_SOURCES', 'M_KONFIGURASJON_BANK') }} kb on kb.bk_sb1_selskap_id = k.bk_sb1_selskap_id\n                                     and kb.maletidspunkt_kode = k.maletidspunkt_kode\n\n join {{ source('LGD_SOURCES', 'F_KAPITALTRANSAKSJON_T') }} t on t.tid_id between k.sak_start_tid_id and k.beregn_til_tid_id\n                                        and t.rk_bankkonto_id = k.rk_bankkonto_id\n join {{ source('LGD_SOURCES', 'P_KAPITALTRANSAKSJONSKODE') }} ko on t.bk_transaksjonskode_id = ko.kode\n                                          and ko.korriger_gl_flagg = '1'\n join tid tid on tid.tid_id = t.tid_id\n where k.tid_id = '&uttrekksdato'\n and k.batch_navn = '&batch_navn'\n )\n  select t.dato,\n         t.tid_id,\n         t.forrige_virkedag_tid_id,\n         t.bk_sb1_selskap_id,\n         t.sk_bankkunde_biii_id,\n         t.rk_bankkonto_id,\n         t.kontonummer,\n         sum(-t.belop) kontantstrom,\n         sum(case when t.klassifisering_type = 'P' then t.belop else 0 end) p_belop,\n         max(case when t.systemkode = 'UL' then '1' else '0' end) as ul_flagg,\n         t.trans_kilde_kode,\n         t.konto_sak_konstatert_tap_dato\n    from st_trans t\n   where t.systemkode in ('RK', 'UL', 'VR', 'GA', 'SC', 'KAPTRANS')\n     and (t.klassifisering_type in ('P', 'A') or t.systemkode = 'KAPTRANS')\n   group by t.dato,\n            t.tid_id,\n            t.forrige_virkedag_tid_id,\n            t.bk_sb1_selskap_id,\n            t.sk_bankkunde_biii_id,\n            t.rk_bankkonto_id,\n            t.kontonummer,\n            t.trans_kilde_kode,\n            t.konto_sak_konstatert_tap_dato\n)", "language": "sql", "refs": [{"name": "d_virkedag", "package": null, "version": null}, {"name": "m_d_bankkunde_biii_lgd_t", "package": null, "version": null}, {"name": "m_d_bankkunde_biii_lgd_t", "package": null, "version": null}], "sources": [["LGD_SOURCES", "P_KAPITALTRANSAKSJONSKODE"], ["LGD_SOURCES", "D_TID"], ["LGD_SOURCES", "M_KONFIGURASJON_BANK"], ["LGD_SOURCES", "F_KAPITALTRANSAKSJON_T"], ["LGD_SOURCES", "F_GL_BANKKONTO_TRANS_B"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.LGD_Project.LGD_SOURCES.P_KAPITALTRANSAKSJONSKODE", "source.LGD_Project.LGD_SOURCES.D_TID", "source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK", "source.LGD_Project.LGD_SOURCES.F_KAPITALTRANSAKSJON_T", "source.LGD_Project.LGD_SOURCES.F_GL_BANKKONTO_TRANS_B", "model.LGD_Project.d_virkedag", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.LGD_Project.m_trans_kontantstrom_rente_t": {"database": "RISIKO", "schema": "LGD", "name": "m_trans_kontantstrom_rente_t", "resource_type": "model", "package_name": "LGD_Project", "path": "example/m_trans_kontantstrom_rente_t.sql", "original_file_path": "models/example/m_trans_kontantstrom_rente_t.sql", "unique_id": "model.LGD_Project.m_trans_kontantstrom_rente_t", "fqn": ["LGD_Project", "example", "m_trans_kontantstrom_rente_t"], "alias": "m_trans_kontantstrom_rente_t", "checksum": {"name": "sha256", "checksum": "b469431626e4ac42ccbf77acdd5c0276346702e78705ad579d0367b5133469c2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "LGD_Project://models/example/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1698755982.8674715, "relation_name": "RISIKO.LGD.m_trans_kontantstrom_rente_t", "raw_code": "select '&uttrekksdato' as tid_id,\n       k.maletidspunkt_kode,\n       tid.dato,\n       k.sk_bankkunde_biii_id,\n       k.rk_bankkonto_id,\n       k.bk_sb1_selskap_id,\n       k.kontonummer,\n       -sum(t.transaksjonsbelop_nok) as gjenvinning_belop,\n       '&batch_navn' as batch_navn\n  from {{ ref('m_d_bankkunde_biii_lgd_t') }} k \n  join {{ source('LGD_SOURCES', 'M_KONFIGURASJON_BANK') }} kb on kb.maletidspunkt_kode = k.maletidspunkt_kode\n                                      and kb.bk_sb1_selskap_id = k.bk_sb1_selskap_id\n  join {{ ref('m_kapitaltransaksjon_lgd') }} t on k.kontonummer =\n                                               replace(substr(regexp_substr(t.kapitaltransaksjon_beskrivelse, 'FRA KTO \\d{4}\\.\\d{2}\\.\\d{5}'), 9),\n                                                       '.',\n                                                       '')\n                                           and t.tid_id between k.sak_start_tid_id and k.beregn_til_tid_id\n  join {{ source('LGD_SOURCES', 'D_TID') }} tid on t.tid_id = tid.tid_id\n  left join {{ ref('v_cashpool_ikke_balanse') }} cash on cash.bk_bankkonto_id = t.kontonummer\n                                                and tid.dato between cash.scd_gyldig_fom and cash.scd_gyldig_tom\n where k.tid_id = '&uttrekksdato'\n   and k.batch_navn = '&batch_navn'\n   and cash.bk_bankkonto_id is null\n   and t.bk_transaksjonskode_id in ('R_744', 'R_745', 'R_746')\n   and t.transaksjonsbelop_nok < 0\n group by t.tid_id, k.maletidspunkt_kode, tid.dato, k.sk_bankkunde_biii_id, k.rk_bankkonto_id, k.bk_sb1_selskap_id, k.kontonummer", "language": "sql", "refs": [{"name": "m_d_bankkunde_biii_lgd_t", "package": null, "version": null}, {"name": "m_kapitaltransaksjon_lgd", "package": null, "version": null}, {"name": "v_cashpool_ikke_balanse", "package": null, "version": null}], "sources": [["LGD_SOURCES", "D_TID"], ["LGD_SOURCES", "M_KONFIGURASJON_BANK"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.LGD_Project.LGD_SOURCES.D_TID", "source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_kapitaltransaksjon_lgd", "model.LGD_Project.v_cashpool_ikke_balanse"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.LGD_Project.m_trans_kontantstrom_t": {"database": "RISIKO", "schema": "LGD", "name": "m_trans_kontantstrom_t", "resource_type": "model", "package_name": "LGD_Project", "path": "example/m_trans_kontantstrom_t.sql", "original_file_path": "models/example/m_trans_kontantstrom_t.sql", "unique_id": "model.LGD_Project.m_trans_kontantstrom_t", "fqn": ["LGD_Project", "example", "m_trans_kontantstrom_t"], "alias": "m_trans_kontantstrom_t", "checksum": {"name": "sha256", "checksum": "315c55680efa89c8f0ae791ad9047bf2335635b56d7e1206fa8b4ffdc20886c7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1698755982.8008132, "relation_name": "RISIKO.LGD.m_trans_kontantstrom_t", "raw_code": "{{ config(materialized = 'table') }}\nwith\ntrans as (\nselect t.tid_id,\n       tid.dato,\n       k.sk_bankkunde_biii_id,\n       t.kontonummer,\n       t.transaksjonsbelop_nok,\n       t.transaksjonsbelop_valuta,\n       t.bk_avleverende_system_id,\n       t.bk_transaksjonskode_id,\n       'ordin\u00e6r' trans_kilde_kode,\n       tid.forrige_virkedag_tid_id as tid_forrige_virkedag_id,\n       t.bk_sb1_selskap_id,\n       t.rk_bankkonto_id\n  from {{ ref('m_d_bankkunde_biii_lgd_t') }} k \n  join {{ source('LGD_SOURCES', 'M_KONFIGURASJON_BANK') }} kb on kb.maletidspunkt_kode = k.maletidspunkt_kode\n                                      and kb.bk_sb1_selskap_id = k.bk_sb1_selskap_id\n  join {{ source('LGD_SOURCES', 'F_KAPITALTRANSAKSJON_T') }} t on t.rk_bankkonto_id = k.rk_bankkonto_id\n                                         and t.tid_id between k.sak_start_tid_id and k.beregn_til_tid_id\n  join {{ ref('d_virkedag') }} tid on t.tid_id = tid.tid_id\n  left join {{ source('LGD_SOURCES', 'D_CASHPOOLHIERARKI') }} cash on cash.bk_bankkonto_id = t.kontonummer\n                                                  and tid.dato between cash.scd_gyldig_fom and cash.scd_gyldig_tom\n                                                  and cash.scd_slettet_i_kilde_dato is null\n  left join {{ ref('v_reskontro_kks_underkonto') }} kks on kks.bk_bankkonto_id = t.kontonummer\n                                                  and tid.dato between kks.scd_gyldig_fom and kks.scd_gyldig_tom\n where nvl(cash.balansekonto_sb1_flagg, '1') = '1'\n   and kks.bk_bankkonto_id is null\n   and k.tid_id = '&uttrekksdato'\n   and k.batch_navn = '&batch_navn'\n),\ntrans_fra_synd_del as (\nselect t.tid_id,\n       tid.dato,\n       k.sk_bankkunde_biii_id,\n       s.kontonummer_hovedandel as kontonummer,\n       t.transaksjonsbelop_nok,\n       t.transaksjonsbelop_valuta,\n       t.bk_avleverende_system_id,\n       t.bk_transaksjonskode_id,\n       'syndikat' trans_kilde_kode,\n       tid.forrige_virkedag_tid_id as tid_forrige_virkedag_id,\n       t.bk_sb1_selskap_id,\n       s.rk_bankkonto_hovedandel_id as rk_bankkonto_id\n  from {{ ref('m_d_bankkunde_biii_lgd_t') }} k /* materialisert tabell iht. sb1_lgd.p_lgd_last*/\n  join {{ source('LGD_SOURCES', 'M_KONFIGURASJON_BANK') }} kb on kb.maletidspunkt_kode = k.maletidspunkt_kode\n                                      and kb.bk_sb1_selskap_id = k.bk_sb1_selskap_id\n  join {{ source('LGD_SOURCES', 'F_KNYTNING_SYNDIKAT') }} s on k.kontonummer = s.kontonummer_hovedandel\n\n  join {{ ref('m_kapitaltransaksjon_lgd') }} t on t.rk_bankkonto_id = s.rk_bankkonto_deltakerandel_id\n                                         and t.tid_id = s.tid_id\n                                         and t.tid_id between k.sak_start_tid_id and k.beregn_til_tid_id\n\n  join {{ ref('d_virkedag') }} tid on t.tid_id = tid.tid_id\n  where k.tid_id = '&uttrekksdato'\n   and k.batch_navn = '&batch_navn'\n),\nm_trans_kontantstrom_temp as  (select * from (select t.tid_id,\n               t.dato,\n               t.sk_bankkunde_biii_id,\n               t.kontonummer,\n               sum(case when not (f.kode is not null\n                                  and nvl(t.bk_avleverende_system_id, 'x') not in ('30', '31'))\n                          then t.transaksjonsbelop_nok\n                        else 0\n                    end) kontantstrom_belop,\n               sum(case when f.kode is not null\n                             and nvl(t.bk_avleverende_system_id, 'x') not in ('30', '31')\n                          then t.transaksjonsbelop_nok\n                        else 0 end) rente_gebyr_belop,\n               max(case when substr(t.bk_transaksjonskode_id, 1, 1) = 'U' then '1' else '0' end) u_flagg,\n               t.trans_kilde_kode,\n               t.tid_forrige_virkedag_id,\n               t.bk_sb1_selskap_id,\n               t.rk_bankkonto_id,\n               sum(t.transaksjonsbelop_nok) kontantstrom_brutto,\n               sum(t.transaksjonsbelop_valuta) kontantstrom_valuta_brutto\n          from (select * from trans\n                union all\n                select * from trans_fra_synd_del\n               ) t\n               left join {{ source('LGD_SOURCES', 'P_KAPITALTRANSAKSJONSKODE') }} f on f.kode = t.bk_transaksjonskode_id\n         where nvl(f.kategori, 'x') <> 'HENLEGGELSE_SALDO'\n         group by t.tid_id, t.dato, t.tid_forrige_virkedag_id, t.sk_bankkunde_biii_id, t.rk_bankkonto_id, t.bk_sb1_selskap_id, t.kontonummer, t.trans_kilde_kode\n        )\n where kontantstrom_belop <> 0\n    or rente_gebyr_belop <> 0\n)\n\n\n\nselect '&uttrekksdato' as tid_id,\n       g.maletidspunkt_kode,\n       g.dato,\n       g.sk_bankkunde_biii_id,\n       g.kontonummer,\n       case g.u_flagg\n         when '1' then g.kontantstrom_belop\n         else g.rente_dekket_av_innskudd_belop + g.kontantstrom_ut_belop + g.kontantstrom_inn_belop\n        end as gjenvinning_belop,\n       g.rente_dekket_av_innskudd_belop, /* Ev. positiv saldo forrige dag vil kunne gi rentegjenvinning ved rentebelastning*/\n       g.kontantstrom_ut_belop,\n       g.kontantstrom_inn_belop,\n       g.u_flagg,\n       g.saldo_forrige_dag,\n       g.saldo_samme_dag,\n       g.trans_kilde_kode,\n       g.avvik_kontobalanse_trans_flagg,\n       g.bk_sb1_selskap_id,\n       g.rk_bankkonto_id,\n       g.kontantstrom_belop,\n       g.rente_gebyr_belop,\n       g.kontantstrom_brutto,\n       g.kontantstrom_valuta_brutto,\n       '&batch_navn' as batch_navn\nfrom (\nselect \n               t.tid_id,\n               t.dato,\n               konf.maletidspunkt_kode,\n               t.sk_bankkunde_biii_id,\n               t.kontonummer,\n               least(greatest(nvl(bal1.saldo_nok, 0), 0), -least(t.rente_gebyr_belop, 0)) as rente_dekket_av_innskudd_belop, /* Ev. positiv saldo forrige dag vil kunne gi rentegjenvinning ved rentebelastning*/\n               case when t.kontantstrom_belop < 0 and bal.saldo_nok < 0 /* Teller kun kontantstr\u00f8m ut dersom det faktisk er en faktisk overf\u00f8ring ut, samt at saldo ender i minus*/\n                      then t.kontantstrom_belop + case when t.rente_gebyr_belop < 0 then greatest(greatest(nvl(bal1.saldo_nok, 0), 0) + t.rente_gebyr_belop, 0) /* Ved rentebelasning, korrigerer for ev. innskudd dagen f\u00f8r etter at renter er betalt*/\n                                                       else greatest(nvl(bal1.saldo_nok, 0) + t.rente_gebyr_belop, 0) end /* Ved rentereversering/innskuddsrente, korrigerer for ev. positiv inng\u00e5ende saldo etter renteinngangen*/\n                 else 0 end as kontantstrom_ut_belop,\n               case when t.kontantstrom_belop > 0 and greatest(nvl(bal1.saldo_nok, 0), 0) + least(t.rente_gebyr_belop, 0) <= 0 /* Teller kun kontanstr\u00f8m inn dersom det faktisk er en overf\u00f8ring inn, og at saldo forrige dag + ev. rentereversering/inngang ikke er positiv*/\n                      then greatest(t.kontantstrom_belop - greatest(bal.saldo_nok, 0), 0) /* Korrigerer for positiv saldo etter inngang, men unng\u00e5r overkompensering og negativt tall*/\n                    else 0 end as kontantstrom_inn_belop,\n               t.u_flagg,\n               bal1.saldo_nok saldo_forrige_dag,\n               bal.saldo_nok saldo_samme_dag,\n               t.trans_kilde_kode,\n               case when t.kontantstrom_valuta_brutto <> nvl(bal.saldo_valuta, 0) - nvl(bal1.saldo_valuta, 0) then '1' else '0' end avvik_kontobalanse_trans_flagg,\n               t.bk_sb1_selskap_id,\n               t.rk_bankkonto_id,\n               t.kontantstrom_belop,\n               t.rente_gebyr_belop,\n               t.kontantstrom_brutto,\n               t.kontantstrom_valuta_brutto\n          from m_trans_kontantstrom_temp t\n          left join {{ source('LGD_SOURCES', 'F_KONTOBALANSE_T') }} bal on bal.tid_id = t.tid_id\n                                                and bal.rk_bankkonto_id = t.rk_bankkonto_id\n          left join {{ source('LGD_SOURCES', 'F_KONTOBALANSE_T') }} bal1 on bal1.tid_id = t.tid_forrige_virkedag_id\n                                                 and bal1.rk_bankkonto_id = t.rk_bankkonto_id\n          cross join {{ source('LGD_SOURCES', 'P_LGD_M_KONFIGURASJON') }} konf\n         where t.u_flagg = '1'\n            or least(greatest(nvl(bal1.saldo_nok, 0), 0), -least(t.rente_gebyr_belop, 0)) <> 0 /* rente_gebyr_belop*/\n            or case when t.kontantstrom_belop < 0 and bal.saldo_nok < 0\n                      then t.kontantstrom_belop + case when t.rente_gebyr_belop < 0 then greatest(greatest(nvl(bal1.saldo_nok, 0), 0) + t.rente_gebyr_belop, 0)\n                                                       else greatest(nvl(bal1.saldo_nok, 0) + t.rente_gebyr_belop, 0) end\n                    else 0 end <> 0 /* kontantstrom_ut_belop*/\n            or case when t.kontantstrom_belop > 0 and greatest(nvl(bal1.saldo_nok, 0), 0) + least(t.rente_gebyr_belop, 0) <= 0 /* Teller kun kontanstr\u00f8m inn dersom det faktisk er en overf\u00f8ring inn, og at saldo forrige dag + ev. rentereversering/inngang ikke er positiv*/\n                      then greatest(t.kontantstrom_belop - greatest(bal.saldo_nok, 0), 0) /* Korrigerer for positiv saldo etter inngang, men unng\u00e5r overkompensering og negativt tall*/\n                    else 0 end <> 0 /* kontantstrom_inn_belop*/\n            ) g\n where case g.u_flagg when '1' then g.kontantstrom_belop else g.rente_dekket_av_innskudd_belop + g.kontantstrom_ut_belop + g.kontantstrom_inn_belop end <> 0 /* beregnet kontantstr\u00f8m <> 0 */", "language": "sql", "refs": [{"name": "m_d_bankkunde_biii_lgd_t", "package": null, "version": null}, {"name": "d_virkedag", "package": null, "version": null}, {"name": "v_reskontro_kks_underkonto", "package": null, "version": null}, {"name": "m_d_bankkunde_biii_lgd_t", "package": null, "version": null}, {"name": "m_kapitaltransaksjon_lgd", "package": null, "version": null}, {"name": "d_virkedag", "package": null, "version": null}], "sources": [["LGD_SOURCES", "P_KAPITALTRANSAKSJONSKODE"], ["LGD_SOURCES", "F_KONTOBALANSE_T"], ["LGD_SOURCES", "P_LGD_M_KONFIGURASJON"], ["LGD_SOURCES", "F_KNYTNING_SYNDIKAT"], ["LGD_SOURCES", "M_KONFIGURASJON_BANK"], ["LGD_SOURCES", "D_CASHPOOLHIERARKI"], ["LGD_SOURCES", "F_KAPITALTRANSAKSJON_T"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.LGD_Project.LGD_SOURCES.P_KAPITALTRANSAKSJONSKODE", "source.LGD_Project.LGD_SOURCES.F_KONTOBALANSE_T", "source.LGD_Project.LGD_SOURCES.P_LGD_M_KONFIGURASJON", "source.LGD_Project.LGD_SOURCES.F_KNYTNING_SYNDIKAT", "source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK", "source.LGD_Project.LGD_SOURCES.D_CASHPOOLHIERARKI", "source.LGD_Project.LGD_SOURCES.F_KAPITALTRANSAKSJON_T", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.d_virkedag", "model.LGD_Project.v_reskontro_kks_underkonto", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_kapitaltransaksjon_lgd", "model.LGD_Project.d_virkedag"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.LGD_Project.m_kapitaltransaksjon_lgd": {"database": "RISIKO", "schema": "LGD", "name": "m_kapitaltransaksjon_lgd", "resource_type": "model", "package_name": "LGD_Project", "path": "example/m_kapitaltransaksjon_lgd.sql", "original_file_path": "models/example/m_kapitaltransaksjon_lgd.sql", "unique_id": "model.LGD_Project.m_kapitaltransaksjon_lgd", "fqn": ["LGD_Project", "example", "m_kapitaltransaksjon_lgd"], "alias": "m_kapitaltransaksjon_lgd", "checksum": {"name": "sha256", "checksum": "463f791fc2f100e51d608ce5edc2b251a2ac65371cc1292d241832663e48c88b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1698755982.804975, "relation_name": "RISIKO.LGD.m_kapitaltransaksjon_lgd", "raw_code": "select\n/* Del 1: Transaksjoner direkte p\u00e5 kontoer i sak*/\n t.tid_id,\n t.bk_transaksjon_id,\n t.bk_avleverende_system_id,\n t.sk_transaksjonskode_id,\n t.bk_transaksjonskode_id,\n t.rk_bankkonto_id,\n t.bk_sb1_selskap_id,\n t.kontonummer,\n t.transaksjonsbelop_valuta,\n t.transaksjonsbelop_nok,\n t.valutakode,\n t.bokfort_dato,\n t.kapitaltransaksjon_beskrivelse\n    from {{ source('LGD_SOURCES', 'F_KAPITALTRANSAKSJON_T') }} t\n    join {{ ref('m_d_bankkunde_biii_lgd_t') }} k on t.rk_bankkonto_id = k.rk_bankkonto_id\n                                         and t.tid_id between k.sak_start_tid_id and k.beregn_til_tid_id\n    join {{ source('LGD_SOURCES', 'M_KONFIGURASJON_BANK') }} kb on kb.maletidspunkt_kode = k.maletidspunkt_kode\n                                        and kb.bk_sb1_selskap_id = k.bk_sb1_selskap_id\n    /*join sb1_lgd.m_d_bankkunde_biii_kto bk on bk.rk_bankkonto_id = k.rk_bankkonto_id\n                                         and t.bokfort_dato <= nvl(bk.konto_tom_dato, bk.beregn_til_dato)  Lagt til for \u00e5 tilpasse gjenbruk av kontoer*/\n    where k.tid_id = '&uttrekksdato'\n    and k.batch_navn = '&batch_navn'\nunion\n\n/* Del 2: Rentetrekk-transaksjoner med knytning til konto i sak*/\nselect\n t.tid_id,\n t.bk_transaksjon_id,\n t.bk_avleverende_system_id,\n t.sk_transaksjonskode_id,\n t.bk_transaksjonskode_id,\n t.rk_bankkonto_id,\n t.bk_sb1_selskap_id,\n t.kontonummer,\n t.transaksjonsbelop_valuta,\n t.transaksjonsbelop_nok,\n t.valutakode,\n t.bokfort_dato,\n t.kapitaltransaksjon_beskrivelse\n  from {{ source('LGD_SOURCES', 'F_KAPITALTRANSAKSJON_T') }} t\n  join {{ ref('m_d_bankkunde_biii_lgd_t') }} k2 on k2.kontonummer = replace(substr(regexp_substr(t.kapitaltransaksjon_beskrivelse, 'FRA KTO \\d{4}\\.\\d{2}\\.\\d{5}'), 9), '.', '')\n                                        and t.tid_id between k2.sak_start_tid_id and k2.beregn_til_tid_id\n\n  join {{ source('LGD_SOURCES', 'M_KONFIGURASJON_BANK') }} kb on kb.maletidspunkt_kode = k2.maletidspunkt_kode\n                                      and kb.bk_sb1_selskap_id = k2.bk_sb1_selskap_id\n\n  where k2.tid_id = '&uttrekksdato'\n  and k2.batch_navn = '&batch_navn'\nunion\n\n/* Del 3: Deltaker-transaksjoner for syndikatl\u00e5n*/\nselect\n t.tid_id,\n t.bk_transaksjon_id,\n t.bk_avleverende_system_id,\n t.sk_transaksjonskode_id,\n t.bk_transaksjonskode_id,\n t.rk_bankkonto_id,\n t.bk_sb1_selskap_id,\n t.kontonummer,\n t.transaksjonsbelop_valuta,\n t.transaksjonsbelop_nok,\n t.valutakode,\n t.bokfort_dato,\n t.kapitaltransaksjon_beskrivelse\n  from {{ source('LGD_SOURCES', 'F_KAPITALTRANSAKSJON_T') }} t\n  join {{ source('LGD_SOURCES', 'F_KNYTNING_SYNDIKAT') }} ks on ks.rk_bankkonto_deltakerandel_id = t.rk_bankkonto_id\n                                     and ks.tid_id = t.tid_id\n  join {{ ref('m_d_bankkunde_biii_lgd_t') }} k3 on k3.rk_bankkonto_id = ks.rk_bankkonto_hovedandel_id\n                                        and t.tid_id between k3.sak_start_tid_id and k3.beregn_til_tid_id\n  join {{ source('LGD_SOURCES', 'M_KONFIGURASJON_BANK') }} kb on kb.maletidspunkt_kode = k3.maletidspunkt_kode\n                                      and kb.bk_sb1_selskap_id = k3.bk_sb1_selskap_id\n\n where k3.tid_id = '&uttrekksdato'\n and k3.batch_navn = '&batch_navn'", "language": "sql", "refs": [{"name": "m_d_bankkunde_biii_lgd_t", "package": null, "version": null}, {"name": "m_d_bankkunde_biii_lgd_t", "package": null, "version": null}, {"name": "m_d_bankkunde_biii_lgd_t", "package": null, "version": null}], "sources": [["LGD_SOURCES", "M_KONFIGURASJON_BANK"], ["LGD_SOURCES", "F_KNYTNING_SYNDIKAT"], ["LGD_SOURCES", "F_KAPITALTRANSAKSJON_T"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK", "source.LGD_Project.LGD_SOURCES.F_KNYTNING_SYNDIKAT", "source.LGD_Project.LGD_SOURCES.F_KAPITALTRANSAKSJON_T", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.LGD_Project.v_trans_kontantstrom_cp_kks": {"database": "RISIKO", "schema": "LGD", "name": "v_trans_kontantstrom_cp_kks", "resource_type": "model", "package_name": "LGD_Project", "path": "example/v_trans_kontantstrom_cp_kks.sql", "original_file_path": "models/example/v_trans_kontantstrom_cp_kks.sql", "unique_id": "model.LGD_Project.v_trans_kontantstrom_cp_kks", "fqn": ["LGD_Project", "example", "v_trans_kontantstrom_cp_kks"], "alias": "v_trans_kontantstrom_cp_kks", "checksum": {"name": "sha256", "checksum": "afb70b2c9d943169fbb4e9b978ffce7e96303f5ee0851a186ed8424ab004e270"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1698755982.809092, "relation_name": "RISIKO.LGD.v_trans_kontantstrom_cp_kks", "raw_code": "{{ config(materialized = 'view') }}\nwith\n/**********************************************************************************************\nBeskrivelse: Viewet identifiserer opptrekk som f\u00f8lge av at konto er tatt ut av en\n             konsernkontostruktur eller et cashpool-hierarki.\n\nTabellgrunnlag: m_d_bankkunde_biii_lgd_t\n                d_cashpoolhierarki\n                d_reskontro\n                f_kontobalanse_t\n                d_tid\n\nEndringslogg:\nInitialier   Dato         Beskrivelse\nMBJ          16.12.20     Opprettet view\nMJ           25.01.23     Endret frs \u00e5 sl\u00e5 opp mot m_d_bankkunde_biii_lgd til \u00e5 sl\u00e5 opp mot m_d_bankkunde_biii_lgd_t samt lagt til filter p\u00e5 tid og batch\n***********************************************************************************************/\ntid as (\n  select tid_id, dato, lag(tid_id) over (partition by 1 order by tid_id) tid_forrige_virkedag_id from {{ source('LGD_SOURCES', 'D_TID') }} where virkedag_flagg = '1'\n),\ncp_exit as (\n  select c.bk_bankkonto_id, c.scd_slettet_i_kilde_dato\n    from {{ source('LGD_SOURCES', 'D_CASHPOOLHIERARKI') }} c\n   where c.scd_slettet_i_kilde_dato = c.scd_gyldig_fom\n     and c.balansekonto_sb1_flagg = '0'\n     and c.cashpoolkonto_status = 'LEAVING'\n),\nkks as (\nselect rk.bk_bankkonto_id, rk.scd_gyldig_fom, rk.scd_gyldig_tom\n  from (select rk.rk_bankkonto_id,\n               rk.bk_bankkonto_id,\n               rk.kks_kode,\n               rk.kks_hovedkonto_nummer,\n               rk.kks_eierkonto_nummer,\n               rk.kks_konto_rolle_kode,\n               rk.kks_konto_type_kode,\n               lag(rk.kks_hovedkonto_nummer) over (partition by rk.bk_bankkonto_id order by rk.scd_gyldig_fom) lag_kks_hovedkonto_nummer,\n               lag(rk.kks_konto_type_kode) over (partition by rk.bk_bankkonto_id order by rk.scd_gyldig_fom) lag_kks_konto_type_kode,\n               rk.scd_gyldig_fom,\n               rk.scd_gyldig_tom,\n               rk.scd_aktiv_flagg\n          from {{ source('LGD_SOURCES', 'D_RESKONTRO') }} rk) rk\n where nvl(nullif(rk.kks_hovedkonto_nummer, '00000000000'), rk.bk_bankkonto_id) = rk.bk_bankkonto_id -- Ikke KKS eller ER hovedkonto\n   and nvl(nullif(rk.lag_kks_hovedkonto_nummer, '00000000000'), rk.bk_bankkonto_id) <> rk.bk_bankkonto_id -- KKS hovedkonto forrige rad m\u00e5 v\u00e6re ulik bk_bankkonto_id, null og '000..' gir ikke ulikhet\n   and nvl(rk.lag_kks_konto_type_kode, 'X') = 'KOVF' -- KKS konto type forrige rad m\u00e5 v\u00e6re KOVF\n)\nselect tid.tid_id,\n       tid.dato,\n       k.sk_bankkunde_biii_id,\n       k.rk_bankkonto_id,\n       k.bk_sb1_selskap_id,\n       k.kontonummer,\n       least(b.saldo_nok + nvl(b.ikkekap_kreditrente_belop, 0) + nvl(b.ikkekap_debetrente_belop, 0), 0) as gjenvinning_belop\n  from {{ ref('m_d_bankkunde_biii_lgd_t') }} k -- materialisert tabell iht. sb1_lgd.p_lgd_last\n  left join cp_exit c on c.bk_bankkonto_id = k.kontonummer\n                     and c.scd_slettet_i_kilde_dato between k.sak_start_dato and k.beregn_til_dato\n  join tid tid on tid.dato = c.scd_slettet_i_kilde_dato\n  join {{ source('LGD_SOURCES', 'F_KONTOBALANSE_T') }} b on b.tid_id = tid_forrige_virkedag_id\n                                 and b.rk_bankkonto_id = k.rk_bankkonto_id\n where b.saldo_nok + nvl(b.ikkekap_kreditrente_belop, 0) + nvl(b.ikkekap_debetrente_belop, 0) < 0\n   and k.tid_id = '&uttrekksdato'\n   and k.batch_navn = '&batch_navn'\nunion\nselect tid.tid_id,\n       tid.dato,\n       k.sk_bankkunde_biii_id,\n       k.rk_bankkonto_id,\n       k.bk_sb1_selskap_id,\n       k.kontonummer,\n       least(b.saldo_nok + nvl(b.ikkekap_kreditrente_belop, 0) + nvl(b.ikkekap_debetrente_belop, 0), 0) as gjenvinning_belop\n  from {{ ref('m_d_bankkunde_biii_lgd_t') }} k -- materialisert tabell iht. sb1_lgd.p_lgd_last\n  left join kks kks on kks.bk_bankkonto_id = k.kontonummer\n                   and kks.scd_gyldig_fom between k.sak_start_dato and k.beregn_til_dato\n  join tid tid on tid.dato = kks.scd_gyldig_fom\n  join {{ source('LGD_SOURCES', 'F_KONTOBALANSE_T') }} b on b.tid_id = tid_forrige_virkedag_id\n                                 and b.rk_bankkonto_id = k.rk_bankkonto_id\n where b.saldo_nok + nvl(b.ikkekap_kreditrente_belop, 0) + nvl(b.ikkekap_debetrente_belop, 0) < 0\n  and k.tid_id = '&uttrekksdato'\n  and k.batch_navn = '&batch_navn'", "language": "sql", "refs": [{"name": "m_d_bankkunde_biii_lgd_t", "package": null, "version": null}, {"name": "m_d_bankkunde_biii_lgd_t", "package": null, "version": null}], "sources": [["LGD_SOURCES", "D_TID"], ["LGD_SOURCES", "F_KONTOBALANSE_T"], ["LGD_SOURCES", "D_CASHPOOLHIERARKI"], ["LGD_SOURCES", "D_RESKONTRO"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.LGD_Project.LGD_SOURCES.D_TID", "source.LGD_Project.LGD_SOURCES.F_KONTOBALANSE_T", "source.LGD_Project.LGD_SOURCES.D_CASHPOOLHIERARKI", "source.LGD_Project.LGD_SOURCES.D_RESKONTRO", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.LGD_Project.m_d_bankkunde_biii_lgd_t": {"database": "RISIKO", "schema": "LGD", "name": "m_d_bankkunde_biii_lgd_t", "resource_type": "model", "package_name": "LGD_Project", "path": "example/m_d_bankkunde_biii_lgd_t.sql", "original_file_path": "models/example/m_d_bankkunde_biii_lgd_t.sql", "unique_id": "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "fqn": ["LGD_Project", "example", "m_d_bankkunde_biii_lgd_t"], "alias": "m_d_bankkunde_biii_lgd_t", "checksum": {"name": "sha256", "checksum": "6277699cfd07db6e6606276fba4f495a6e38c5721545d6ba8c058041ad6462d3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Viewet standardiserer viktige saksdatoer til virkedager, samt beregner informasjon om konstatert tap per sak iht. konfigurasjon per konto.", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "LGD_Project://models/example/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1698755982.865448, "relation_name": "RISIKO.LGD.m_d_bankkunde_biii_lgd_t", "raw_code": "/**********************************************************************************************\nBeskrivelse: Viewet standardiserer viktige saksdatoer til virkedager, samt beregner informasjon\n             om konstatert tap per sak iht. konfigurasjon per konto.\n\n             Vi baserer seg p\u00e5 allerede materialisert tabell iht. p_lgd_m_konfigurasjon.\n\nTabellgrunnlag:  m_d_bankkunde_biii_kto\n                 d_tid\n                 f_konstatert_tap\n\nEndringslogg:\nInitialier   Dato         Beskrivelse\nMBJ          15.12.20     Opprettet view\nMJ           19.01.23     Flyttet over i tabellstyrt tool-entilen\nPB           10.02.23     Joinet inn f_konstatert_tap_korr for \u00e5 hente konstaterte tap p\u00e5 \n                          kontoer hvor det konstaterte tapet har variert mellom 0 og ikke-0 \n                          i sb1_dvh.f_mislighold\nBLG          25.10.23     I forbindelse med migrering p\u00e5 sky m\u00e5tte syntaxen for enkelte kolonner endres. \n                          I dette tilfelle gjalt det KONSTATERT_TAP_BELOP. M\u00e5tte dense_rank til konstatert_tap sp\u00f8rringen \n                          for deretter \u00e5 benyttes i neste with. Grunnen til dette er at max aggregeringsfunksjon ikke kan brukes \n                          med vindusfunksjonen dense_rank i Snowflake.\n***********************************************************************************************/\n{{ config(materialized='table') }}\nwith\ntid as (\n  select t.tid_id, t.dato, v.tid_id as virkedag_tid_id, v.dato as virkedag_dato, v.forrige_virkedag_tid_id as virkedag_for_tid_id, \n         v.forrige_virkedag_dato as virkedag_for_dato, v.neste_virkedag_tid_id, v.neste_virkedag_dato\n    from {{ source('LGD_SOURCES', 'D_TID') }} t\n    join {{ ref('d_virkedag') }} v on t.tid_id < v.neste_virkedag_tid_id and t.tid_id >= v.tid_id\n),\nkonstatert_tap as (\n select rk_bankkunde_id, rk_bankkonto_id, bk_mislighold_id, bk_misligholdstype_id, konstatert_tap_dato, konstatert_tap_belop, scf_gyldig_fom, scf_gyldig_tom from (\n  select nvl(kk.rk_bankkunde_id, kt.rk_bankkunde_id) as rk_bankkunde_id,\n         nvl(kk.rk_bankkonto_id, kt.rk_bankkonto_id) as rk_bankkonto_id,\n         nvl(kk.bk_mislighold_id, kt.bk_mislighold_id) as bk_mislighold_id,\n         nvl(kk.bk_misligholdstype_id, kt.bk_misligholdstype_id) as bk_misligholdstype_id,\n         nvl(kk.konstatert_tap_dato_korr, kt.konstatert_tap_dato) as konstatert_tap_dato,\n         FIRST_VALUE(nvl(kk.konstatert_tap_i_ar_tidl_korr, kt.konstatert_tap_belop)) over (PARTITION BY kt.rk_bankkunde_id ORDER BY kt.bk_misligholdstype_id) konstatert_tap_belop,\n         nvl(kk.scf_gyldig_fom, kt.scf_gyldig_fom) as scf_gyldig_fom,\n         nvl(kk.scf_gyldig_tom, kt.scf_gyldig_tom) as scf_gyldig_tom    \n   from {{ source('LGD_SOURCES', 'F_KONSTATERT_TAP') }} kt\n   left join {{ source('LGD_SOURCES', 'F_KONSTATERT_TAP_KORR') }} kk on kt.rk_bankkonto_id = kk.rk_bankkonto_id\n                                              and kt.rk_bankkunde_id = kk.rk_bankkunde_id\n                                              and kt.bk_mislighold_id = kk.bk_mislighold_id\n )\n group by rk_bankkunde_id, rk_bankkonto_id, bk_mislighold_id, bk_misligholdstype_id, konstatert_tap_dato, konstatert_tap_belop, scf_gyldig_fom, scf_gyldig_tom\n),\n\nkonto_tap as (\n  select ku.sk_bankkunde_biii_id,\n         ku.maletidspunkt_kode,\n         ku.tid_id,\n         ku.batch_navn,\n         ku.rk_bankkonto_id,\n         kt.konstatert_tap_dato,\n         tid.virkedag_dato virkedag_kt_dato,\n  --       max(kt.konstatert_tap_belop) keep (dense_rank first order by kt.bk_misligholdstype_id) konstatert_tap_belop\n        max(kt.konstatert_tap_belop) konstatert_tap_belop\n    from {{ ref('m_d_bankkunde_biii_kto_t') }} ku\n    join konstatert_tap kt on kt.rk_bankkonto_id = ku.rk_bankkonto_id\n                          and kt.konstatert_tap_dato >= ku.sak_start_dato\n                          and ku.tid_dato between kt.scf_gyldig_fom and kt.scf_gyldig_tom\n    join tid tid on tid.dato = kt.konstatert_tap_dato\n    join {{ source('LGD_SOURCES', 'M_KONFIGURASJON_BANK') }} kf on kf.maletidspunkt_kode = ku.maletidspunkt_kode \n                                        and kf.bk_sb1_selskap_id = ku.bk_sb1_selskap_id\n                                        and kf.batch_navn = ku.batch_navn\n                                        and kf.tid_id = ku.tid_id\n    where ku.tid_id = '20230331'\n    and ku.batch_navn = 'ETTER_TETTING_AV_F_EAD_T'\n   group by ku.sk_bankkunde_biii_id,\n            ku.maletidspunkt_kode,\n            ku.tid_id,\n            ku.batch_navn,\n            ku.rk_bankkonto_id,\n            kt.konstatert_tap_dato,\n            tid.virkedag_dato\n)\nselect ku.tid_id,\n       ku.maletidspunkt_kode,\n       ku.sk_bankkunde_biii_id,\n       ku.sk_bankkunde_biii_id_siste,\n       ku.rk_bankkunde_id,\n       ku.bk_sb1_selskap_id,\n       ku.kundenummer,\n       ku.kundenavn,\n       ku.edb_kunde_id,\n       ku.overforing_arsak_init_kode,\n       ku.overforing_arsak_oppdat_kode,\n       ku.sak_start_dato,\n       ku.sak_start_tid_id,\n       ku.sak_start_dato_biii,\n       ku.sak_start_dato_biii_siste,\n       ku.sak_kilde_init,\n       ku.sak_kilde_oppdatert,\n       ku.kundesak_antall_9mnd,\n       nvl(tid_tfr.virkedag_dato, to_date('99991231', 'yyyymmdd')) as tilfrisket_dato,\n       nvl(tid_tfr.virkedag_tid_id, '99991231') as tilfrisket_tid_id,\n       case ku.tilfrisket_tid_id\n         when '99991231' then '0' else '1' end tilfrisket_flagg,\n       ku.tilfrisket_flagg tilfrisket_senere_flagg,\n       ku.markedssegment_kode,\n       ku.historisk_realisasjon_flagg,\n       ku.saker_i_sak_antall,\n       ku.korrigert_sak_start_dato_flagg,\n       ku.rk_bankkonto_id,\n       ku.kontonummer,\n       tid_til.virkedag_dato beregn_til_dato,\n       tid_til.virkedag_tid_id beregn_til_tid_id,\n       min(case when kt.virkedag_kt_dato <= tid_til.virkedag_dato then kt.konstatert_tap_dato end) konstatert_tap_dato,\n       sum(case when kt.virkedag_kt_dato <= tid_til.virkedag_dato then kt.konstatert_tap_belop end) konstatert_tap_belop,\n       ku.konto_fom_dato,\n       ku.konto_fom_tid_id,\n       ku.konto_tom_dato,\n       ku.konto_tom_tid_id,\n       ku.annen_eier_i_lgd_db_flagg,\n       ku.tid_dato,\n       ku.beregnet_stans_etter_score,\n       'batch_navn' as batch_navn\n  from {{ ref('m_d_bankkunde_biii_kto_t') }} ku\n  left join konto_tap kt on kt.sk_bankkunde_biii_id = ku.sk_bankkunde_biii_id\n                        and kt.maletidspunkt_kode = ku.maletidspunkt_kode\n                        and kt.rk_bankkonto_id = ku.rk_bankkonto_id\n                        and kt.tid_id = ku.tid_id\n                        and kt.batch_navn = ku.batch_navn\n  join tid tid_til on tid_til.dato = ku.beregn_til_dato\n  join {{ source('LGD_SOURCES', 'P_LGD_M_KONFIGURASJON') }} konf on konf.maletidspunkt_kode = ku.maletidspunkt_kode\n  left join tid tid_tfr on tid_tfr.dato = ku.tilfrisket_dato\n  where ku.tid_id = '20230331'\n  and ku.batch_navn = 'batch_navn'\n group by ku.tid_id,\n          ku.maletidspunkt_kode,\n          ku.sk_bankkunde_biii_id,\n          ku.sk_bankkunde_biii_id_siste,\n          ku.rk_bankkunde_id,\n          ku.bk_sb1_selskap_id,\n          ku.kundenummer,\n          ku.kundenavn,\n          ku.edb_kunde_id,\n          ku.overforing_arsak_init_kode,\n          ku.overforing_arsak_oppdat_kode,\n          ku.sak_start_dato,\n          ku.sak_start_tid_id,\n          ku.sak_start_dato_biii,\n          ku.sak_start_dato_biii_siste,\n          ku.sak_kilde_init,\n          ku.sak_kilde_oppdatert,\n          ku.kundesak_antall_9mnd,\n          ku.tilfrisket_dato,\n          ku.tilfrisket_tid_id,\n          ku.tilfrisket_flagg,\n          ku.markedssegment_kode,\n          ku.historisk_realisasjon_flagg,\n          ku.saker_i_sak_antall,\n          ku.korrigert_sak_start_dato_flagg,\n          ku.rk_bankkonto_id,\n          ku.kontonummer,\n          ku.beregn_til_dato,\n          tid_til.virkedag_dato,\n          tid_til.virkedag_tid_id,\n          tid_tfr.virkedag_dato,\n          tid_tfr.virkedag_tid_id,\n          /*kt2.seneste_konstatert_tap_dato,*/\n          ku.konto_fom_dato,\n          ku.konto_fom_tid_id,\n          ku.konto_tom_dato,\n          ku.konto_tom_tid_id,\n          ku.annen_eier_i_lgd_db_flagg,\n          ku.tid_dato,\n          ku.beregnet_stans_etter_score", "language": "sql", "refs": [{"name": "d_virkedag", "package": null, "version": null}, {"name": "m_d_bankkunde_biii_kto_t", "package": null, "version": null}, {"name": "m_d_bankkunde_biii_kto_t", "package": null, "version": null}], "sources": [["LGD_SOURCES", "F_KONSTATERT_TAP"], ["LGD_SOURCES", "D_TID"], ["LGD_SOURCES", "P_LGD_M_KONFIGURASJON"], ["LGD_SOURCES", "M_KONFIGURASJON_BANK"], ["LGD_SOURCES", "F_KONSTATERT_TAP_KORR"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.LGD_Project.LGD_SOURCES.F_KONSTATERT_TAP", "source.LGD_Project.LGD_SOURCES.D_TID", "source.LGD_Project.LGD_SOURCES.P_LGD_M_KONFIGURASJON", "source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK", "source.LGD_Project.LGD_SOURCES.F_KONSTATERT_TAP_KORR", "model.LGD_Project.d_virkedag", "model.LGD_Project.m_d_bankkunde_biii_kto_t", "model.LGD_Project.m_d_bankkunde_biii_kto_t"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.LGD_Project.testfile": {"database": "RISIKO", "schema": "LGD", "name": "testfile", "resource_type": "model", "package_name": "LGD_Project", "path": "example/testfile.sql", "original_file_path": "models/example/testfile.sql", "unique_id": "model.LGD_Project.testfile", "fqn": ["LGD_Project", "example", "testfile"], "alias": "testfile", "checksum": {"name": "sha256", "checksum": "732b39c07c2fca491d0e7fd7b0668413f19a8e19401590cf92e4e7fdfd8b3beb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Testfile", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "LGD_Project://models/example/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1698755982.8679311, "relation_name": "RISIKO.LGD.testfile", "raw_code": "{{ config(materialized='table') }}\nwith\ntid as (\n  select t.tid_id, t.dato, v.tid_id as virkedag_tid_id, v.dato as virkedag_dato, v.forrige_virkedag_tid_id as virkedag_for_tid_id, \n         v.forrige_virkedag_dato as virkedag_for_dato, v.neste_virkedag_tid_id, v.neste_virkedag_dato\n    from {{ source('LGD_SOURCES', 'D_TID') }} t\n    join {{ ref('d_virkedag') }} v on t.tid_id < v.neste_virkedag_tid_id and t.tid_id >= v.tid_id\n),\nkonstatert_tap as (\n select rk_bankkunde_id, rk_bankkonto_id, bk_mislighold_id, bk_misligholdstype_id, konstatert_tap_dato, konstatert_tap_belop, scf_gyldig_fom, scf_gyldig_tom from (\n  select nvl(kk.rk_bankkunde_id, kt.rk_bankkunde_id) as rk_bankkunde_id,\n         nvl(kk.rk_bankkonto_id, kt.rk_bankkonto_id) as rk_bankkonto_id,\n         nvl(kk.bk_mislighold_id, kt.bk_mislighold_id) as bk_mislighold_id,\n         nvl(kk.bk_misligholdstype_id, kt.bk_misligholdstype_id) as bk_misligholdstype_id,\n         nvl(kk.konstatert_tap_dato_korr, kt.konstatert_tap_dato) as konstatert_tap_dato,\n         FIRST_VALUE(nvl(kk.konstatert_tap_i_ar_tidl_korr, kt.konstatert_tap_belop)) over (PARTITION BY kt.rk_bankkunde_id ORDER BY kt.bk_misligholdstype_id) konstatert_tap_belop,\n         nvl(kk.scf_gyldig_fom, kt.scf_gyldig_fom) as scf_gyldig_fom,\n         nvl(kk.scf_gyldig_tom, kt.scf_gyldig_tom) as scf_gyldig_tom    \n   from {{ source('LGD_SOURCES', 'F_KONSTATERT_TAP') }} kt\n   left join {{ source('LGD_SOURCES', 'F_KONSTATERT_TAP_KORR') }} kk on kt.rk_bankkonto_id = kk.rk_bankkonto_id\n                                              and kt.rk_bankkunde_id = kk.rk_bankkunde_id\n                                              and kt.bk_mislighold_id = kk.bk_mislighold_id\n )\n group by rk_bankkunde_id, rk_bankkonto_id, bk_mislighold_id, bk_misligholdstype_id, konstatert_tap_dato, konstatert_tap_belop, scf_gyldig_fom, scf_gyldig_tom\n),\n\nkonto_tap as (\n  select ku.sk_bankkunde_biii_id,\n         ku.maletidspunkt_kode,\n         ku.tid_id,\n         ku.batch_navn,\n         ku.rk_bankkonto_id,\n         kt.konstatert_tap_dato,\n         tid.virkedag_dato virkedag_kt_dato,\n  --       max(kt.konstatert_tap_belop) keep (dense_rank first order by kt.bk_misligholdstype_id) konstatert_tap_belop\n        max(kt.konstatert_tap_belop)\n    from {{ ref('m_d_bankkunde_biii_kto_t') }} ku\n    join konstatert_tap kt on kt.rk_bankkonto_id = ku.rk_bankkonto_id\n                          and kt.konstatert_tap_dato >= ku.sak_start_dato\n                          and ku.tid_dato between kt.scf_gyldig_fom and kt.scf_gyldig_tom\n    join tid tid on tid.dato = kt.konstatert_tap_dato\n    join {{ source('LGD_SOURCES', 'M_KONFIGURASJON_BANK') }} kf on kf.maletidspunkt_kode = ku.maletidspunkt_kode \n                                        and kf.bk_sb1_selskap_id = ku.bk_sb1_selskap_id\n                                        and kf.batch_navn = ku.batch_navn\n                                        and kf.tid_id = ku.tid_id\n    where ku.tid_id = '20230331'\n    and ku.batch_navn = 'ETTER_TETTING_AV_F_EAD_T'\n   group by ku.sk_bankkunde_biii_id,\n            ku.maletidspunkt_kode,\n            ku.tid_id,\n            ku.batch_navn,\n            ku.rk_bankkonto_id,\n            kt.konstatert_tap_dato,\n            tid.virkedag_dato\n)\nselect * from konto_tap", "language": "sql", "refs": [{"name": "d_virkedag", "package": null, "version": null}, {"name": "m_d_bankkunde_biii_kto_t", "package": null, "version": null}], "sources": [["LGD_SOURCES", "D_TID"], ["LGD_SOURCES", "F_KONSTATERT_TAP_KORR"], ["LGD_SOURCES", "F_KONSTATERT_TAP"], ["LGD_SOURCES", "M_KONFIGURASJON_BANK"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.LGD_Project.LGD_SOURCES.D_TID", "source.LGD_Project.LGD_SOURCES.F_KONSTATERT_TAP_KORR", "source.LGD_Project.LGD_SOURCES.F_KONSTATERT_TAP", "source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK", "model.LGD_Project.d_virkedag", "model.LGD_Project.m_d_bankkunde_biii_kto_t"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.LGD_Project.m_d_bankkunde_biii_kto_t": {"database": "RISIKO", "schema": "LGD", "name": "m_d_bankkunde_biii_kto_t", "resource_type": "model", "package_name": "LGD_Project", "path": "example/m_d_bankkunde_biii_kto_t.sql", "original_file_path": "models/example/m_d_bankkunde_biii_kto_t.sql", "unique_id": "model.LGD_Project.m_d_bankkunde_biii_kto_t", "fqn": ["LGD_Project", "example", "m_d_bankkunde_biii_kto_t"], "alias": "m_d_bankkunde_biii_kto_t", "checksum": {"name": "sha256", "checksum": "75ca2523dba968b44ee44116faf4234530919d283a7a4bf7badab4a3ebf8b82b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Sammenstilling av kontoer som tilh\u00f8rer en sak", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "LGD_Project://models/example/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1698755982.8649406, "relation_name": "RISIKO.LGD.m_d_bankkunde_biii_kto_t", "raw_code": "/**********************************************************************************************\nBeskrivelse: Viewet sammenstiller relevante konti per kundesak, samt utleder slutt-dato for\n             beregning av kontantstr\u00f8m iht. til valgt m\u00e5letidspunkt.\n\n             Viewet tar utgangspunkt i en tid_id, m\u00e5letidspunkt, aktuelle banker og ev. dato-intervall\n             som begrenser saksutvalget definert i p_lgd_last-tabellen.\n\n             Beregn til-dato, som sier n\u00e5r siste dato for kontantstr\u00f8m skal inkluderes i sak, settes\n             basert p\u00e5 type m\u00e5letidspunkt, og kan begrenses av angitt tid_id, tapskonstateringsdato p\u00e5\n             kunde, logikk opp mot tapskonstateringsdato p\u00e5 kunde dersom denne ikke scores lenger\n             eller et gitt antall m\u00e5neder fra sak-start-dato.\n\n             Viewet utleder ogs\u00e5 om kontoen har hatt en annen eier ved inn- eller utgangen av misligholdssaken.\n\nSpesielt: Viewet er forh\u00e5ndsfiltrert vha. sb1_lgd.z_mbj_p_lgd_last\n\nTabellgrunnlag:   v_d_bankkunde_biii_korr\n                  d_bankkonto\n                  d_sb1_selskap_fusjon\n                  p_lgd_last\n                  p_maletidspunkt\n                  f_konstatert_tap\n\nEndringslogg:\nInitialier   Dato         Beskrivelse\nMBJ          15.12.20     Opprettet view\nMJ           19.01.23     Flyttet til tabellstyrt tool-entilen\nMJ           23.01.23     Lagt til filter p\u00e5 bankkoder som skal beregnes samt join mot sb1_selskap_fusjonert\n                          for \u00e5 mappe bankkoder som er infusjonert i annen bank riktig.\nBLG          23.10.23     I forbindelse med migrering p\u00e5 sky m\u00e5tte syntaxen for enkelte kolonner endres. \n                          I dette tilfelle gjalt det KONTO_FOM/KONTO_TOM. M\u00e5tte dense_rank til konto_grl sp\u00f8rringen \n                          for deretter \u00e5 benyttes i neste with. Grunnen til dette er at max aggregeringsfunksjon ikke kan brukes \n                          med vindusfunksjonen dense_rank i Snowflake.                            \n***********************************************************************************************/\n\n{{ config(materialized='table') }}\n\nwith p_last as\n (select p2.tid_id,\n         to_date(p2.tid_id, 'yyyymmdd') dato,\n         p2.maletidspunkt_kode,\n         p2.sak_start_dato_fra,\n         p2.sak_start_dato_til\n    from {{ source('LGD_SOURCES', 'P_LGD_M_KONFIGURASJON') }} p2),\nkonto_grl as\n (select ko.rk_bankkonto_id,\n         ko.kontonummer,\n         ko.rk_bankkunde_id,\n         ko.bk_sb1_selskap_eier_id,\n         ko.konto_fom_dato,\n         ko.konto_tom_dato,\n         ko.scd_gyldig_fom,\n         ko.scd_gyldig_tom,\n         case\n           when nvl(lag(ko.rk_bankkunde_id)\n                    over(partition by ko.rk_bankkonto_id order by\n                         ko.scd_gyldig_fom),\n                    ko.rk_bankkunde_id) <> ko.rk_bankkunde_id then\n            '1'\n           else\n            '0'\n         end annen_eier_for_flagg,\n         case\n           when nvl(lead(ko.rk_bankkunde_id)\n                    over(partition by ko.rk_bankkonto_id order by\n                         ko.scd_gyldig_fom),\n                    ko.rk_bankkunde_id) <> ko.rk_bankkunde_id then\n            '1'\n           else\n            '0'\n         end annen_eier_etter_flagg, \n         DENSE_RANK() OVER (PARTITION BY KO.RK_BANKKONTO_ID ORDER BY KO.SCD_GYLDIG_FOM DESC) DENSE_RANK\n\n    from {{ source('LGD_SOURCES', 'FAKE_D_BANKKONTO') }} ko\n   inner join {{ source('LGD_SOURCES','M_KONFIGURASJON_BANK') }} kb\n      on kb.bk_sb1_selskap_id = ko.bk_sb1_selskap_eier_id)\nselect p2.tid_id,\n       p2.dato tid_dato,\n       p.kode maletidspunkt_kode,\n       ku.sk_bankkunde_biii_id,\n       ku.sk_bankkunde_biii_id_siste,\n       ku.rk_bankkunde_id,\n       ku.bk_sb1_selskap_id,\n       ku.kundenummer,\n       ku.kundenavn,\n       ku.edb_kunde_id,\n       ku.overforing_arsak_init_kode,\n       ku.overforing_arsak_oppdat_kode,\n       ku.sak_start_dato,\n       to_char(ku.sak_start_dato, 'yyyymmdd') sak_start_tid_id,\n       ku.sak_start_dato_biii,\n       ku.sak_start_dato_biii_siste,\n       ku.sak_kilde_init,\n       ku.sak_kilde_oppdatert,\n       ku.kundesak_antall_9mnd,\n       ku.tilfrisket_dato,\n       to_char(ku.tilfrisket_dato, 'yyyymmdd') tilfrisket_tid_id,\n       ku.tilfrisket_flagg,\n       ku.markedssegment_kode,\n       ku.historisk_realisasjon_flagg,\n       ku.saker_i_sak_antall,\n       ku.korrigert_sak_start_dato_flagg,\n       ko.rk_bankkonto_id,\n       ko.kontonummer,\n       greatest(max(ko.annen_eier_for_flagg),\n                max(ko.annen_eier_etter_flagg)) annen_eier_i_lgd_db_flagg,\n    --   max(ko.konto_fom_dato) keep(dense_rank last order by ko.scd_gyldig_fom) konto_fom_dato,\n       max(CASE WHEN ko.DENSE_RANK = 1 then ko.konto_fom_dato\n        else NULL end) as konto_fom_dato, \n       to_char(max(case when ko.dense_rank = 1 then ko.konto_fom_dato else NULL end), 'yyyymmdd') as KONTO_FOM_TID_ID, \n    --   to_char(max(ko.konto_fom_dato)\n    --           keep(dense_rank last order by ko.scd_gyldig_fom),\n    --           'yyyymmdd') konto_fom_tid_id,\n      max(CASE WHEN ko.DENSE_RANK = 1 then ko.konto_tom_dato\n        else NULL end) as konto_tom_dato, \n    --   max(ko.konto_tom_dato) keep(dense_rank last order by ko.scd_gyldig_fom) konto_tom_dato,\n    --   to_char(max(ko.konto_tom_dato)\n    --           keep(dense_rank last order by ko.scd_gyldig_fom),\n    --           'yyyymmdd') konto_tom_tid_id,\n      to_char(max(case when ko.dense_rank = 1 then ko.konto_tom_dato else NULL end), 'yyyymmdd') as KONTO_TOM_TID_ID, \n      case p.kode /* Siste ledd i least(..): Logikken for sak_avsluttet_dato settes i v_d_bankkunde_biii_9mnd. Denne fastsettes ved laveste dato av tilfriskning og siste scoring av kunden pluss karens(3 m\u00e5neder eller 12 m\u00e5neder ved OVERFORING_ARSAK_OPPDAT_KODE = TAP). Dette for at ikke kundeengasjement som lever videre uten l\u00e5n, og aldri blir tilfrisket i LGD-DB, ikke skal gjenvinne betalte gebyrer p\u00e5 f.eks. brukskonto \"for alltid\".*/\n         when 'tap' then least(p2.dato,\n                               ku.tilfrisket_dato,\n                               nvl(min(kt.konstatert_tap_dato), p2.dato),\n                               nvl(ku.sak_avsluttet_dato, p2.dato))\n         when 'tid_id' then least(p2.dato,\n                                  ku.tilfrisket_dato,\n                                  nvl(ku.sak_avsluttet_dato, p2.dato))\n         else least(p2.dato,\n                    ku.tilfrisket_dato,\n                    add_months(ku.sak_start_dato, p.mnd_antall),\n                    nvl(ku.sak_avsluttet_dato, p2.dato))\n       end beregn_til_dato,\n       nvl(ku.sak_avsluttet_dato, p2.dato) beregnet_stans_etter_score,\n       'ETTER_TETTING_AV_F_EAD_T' as batch_navn,\n       ku.sak_avsluttet_dato\n  from {{ ref('v_d_bankkunde_biii_korr') }} ku\n  join p_last p2\n    on p2.dato >= ku.sak_start_dato\n   and ku.sak_start_dato between p2.sak_start_dato_fra and\n       p2.sak_start_dato_til\n  join {{ source('LGD_SOURCES', 'P_MALETIDSPUNKT') }} p\n    on p.kode = p2.maletidspunkt_kode\n  join konto_grl ko\n    on ko.rk_bankkunde_id = ku.rk_bankkunde_id\n   and nvl(ko.konto_tom_dato, to_date('99991231', 'yyyymmdd')) >=\n       ku.sak_start_dato /* Konto m\u00e5 ha fantes etter misligholdsstart*/\n   and nvl(ko.konto_fom_dato, to_date('00010101', 'yyyymmdd')) <=\n       ku.sak_avsluttet_dato /* Konto m\u00e5 ha v\u00e6rt opprettet f\u00f8r tilfriskning*/\n   and ko.scd_gyldig_fom <= ku.sak_avsluttet_dato /*Konto m\u00e5 ha v\u00e6rt koblet til kunden f\u00f8r tilfriskning*/\n   and ko.scd_gyldig_tom >= ku.sak_start_dato /* Konto m\u00e5 ha v\u00e6rt koblet til etter misligholdets start-dato*/\n  left join {{ source('LGD_SOURCES', 'F_KONSTATERT_TAP') }} kt\n    on kt.rk_bankkonto_id = ko.rk_bankkonto_id\n   and kt.konstatert_tap_dato >= ku.sak_start_dato\n   and p2.dato between kt.scf_gyldig_fom and kt.scf_gyldig_tom\n group by p2.tid_id,\n          p2.dato,\n          p.kode,\n          ku.sk_bankkunde_biii_id,\n          ku.sk_bankkunde_biii_id_siste,\n          ku.rk_bankkunde_id,\n          ku.bk_sb1_selskap_id,\n          ku.kundenummer,\n          ku.kundenavn,\n          ku.edb_kunde_id,\n          ku.overforing_arsak_init_kode,\n          ku.overforing_arsak_oppdat_kode,\n          ku.sak_start_dato,\n          ku.sak_start_dato_biii,\n          ku.sak_start_dato_biii_siste,\n          ku.sak_kilde_init,\n          ku.sak_kilde_oppdatert,\n          ku.kundesak_antall_9mnd,\n          ku.tilfrisket_dato,\n          ku.tilfrisket_flagg,\n          ku.sist_scoret_misl_i_sak_dato,\n          ku.markedssegment_kode,\n          ku.historisk_realisasjon_flagg,\n          ku.saker_i_sak_antall,\n          ku.korrigert_sak_start_dato_flagg,\n          ko.rk_bankkonto_id,\n          ko.kontonummer,\n          p.mnd_antall,\n          ku.sak_avsluttet_dato", "language": "sql", "refs": [{"name": "v_d_bankkunde_biii_korr", "package": null, "version": null}], "sources": [["LGD_SOURCES", "F_KONSTATERT_TAP"], ["LGD_SOURCES", "P_LGD_M_KONFIGURASJON"], ["LGD_SOURCES", "P_MALETIDSPUNKT"], ["LGD_SOURCES", "M_KONFIGURASJON_BANK"], ["LGD_SOURCES", "FAKE_D_BANKKONTO"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.LGD_Project.LGD_SOURCES.F_KONSTATERT_TAP", "source.LGD_Project.LGD_SOURCES.P_LGD_M_KONFIGURASJON", "source.LGD_Project.LGD_SOURCES.P_MALETIDSPUNKT", "source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK", "source.LGD_Project.LGD_SOURCES.FAKE_D_BANKKONTO", "model.LGD_Project.v_d_bankkunde_biii_korr"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.LGD_Project.v_d_bankkunde_biii_korr": {"database": "RISIKO", "schema": "LGD", "name": "v_d_bankkunde_biii_korr", "resource_type": "model", "package_name": "LGD_Project", "path": "example/v_d_bankkunde_biii_korr.sql", "original_file_path": "models/example/v_d_bankkunde_biii_korr.sql", "unique_id": "model.LGD_Project.v_d_bankkunde_biii_korr", "fqn": ["LGD_Project", "example", "v_d_bankkunde_biii_korr"], "alias": "v_d_bankkunde_biii_korr", "checksum": {"name": "sha256", "checksum": "837d23cdfccaf78b9d421f6c1b2080c42ec6129dab2c307bdc6c42d500ca19ba"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "korreksjonsview, som tar h\u00f8yde for saker som startet f\u00f8r ny basel III implementering.", "columns": {"sk_bankkunde_biii_id": {"name": "sk_bankkunde_biii_id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "LGD_Project://models/example/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1698755982.8644376, "relation_name": "RISIKO.LGD.v_d_bankkunde_biii_korr", "raw_code": "/**********************************************************************************************\nBeskrivelse: Korrigerer sak_start_dato i ny misligholdsdefinisjon med tidligste sak_start_dato\n             fra ev. saker i gammel definisjon som var \u00e5pne p\u00e5 sak_start_dato etter ny definisjon.\n             Dette fordi at beregnet gjenvunnet m\u00e5 ta h\u00f8yde for at banken agerte etter forl\u00f8pet iht.\n             gammel definisjon, og ikke den nye som de p\u00e5 det tidspunktet visste ingenting om.\n\n             Resultatet blir det som er ment \u00e5 v\u00e6re SB1s misligholdssaksdefinisjon.\n\n             LGD-databasekunder som ikke har noen misligholdssak (kun med pga. realisasjonsinformasjon)\n             tas ogs\u00e5 med i viewet, disse vil bl.a. mangle sak_start_dato.\n\nTabellgrunnlag:   v_d_bankkunde_biii_9mnd\n                  d_bankkunde_biii\n                  d_bankkunde\n                  d_tid\n\nEndringslogg:\nInitialier   Dato         Beskrivelse\nMBJ          15.12.20     Opprettet view\nBLG          27.02.23     Lagt til kolonnen sak_avsluttet_dato\n\n***********************************************************************************************/\nwith\nvirkedag as (\n  select lead(tid_id) over (order by tid_id) neste_virkedag_tid_id,\n         lead(dato) over (order by tid_id) neste_virkedag_dato,\n         tid_id virkedag_tid_id,\n         dato virkedag_dato,\n         lag(tid_id) over (order by tid_id) virkedag_for_tid_id,\n         lag(dato) over (order by tid_id) virkedag_for_dato\n    from RISIKO.LGD.d_tid\n   where virkedag_flagg = '1'\n),\ntid as (\n  select t.tid_id, t.dato, v.virkedag_tid_id, v.virkedag_dato, v.virkedag_for_tid_id, v.virkedag_for_dato, v.neste_virkedag_tid_id, v.neste_virkedag_dato\n    from RISIKO.LGD.d_tid t\n    join virkedag v on t.tid_id < v.neste_virkedag_tid_id and t.tid_id >= v.virkedag_tid_id\n),\nbankkunde_biii_korr as (\n  select\n   t.sk_bankkunde_biii_id,\n   t.sk_bankkunde_biii_id_siste,\n   t.rk_bankkunde_id,\n   t.bk_sb1_selskap_id,\n   t.kundenummer,\n   t.kundenavn,\n   t.edb_kunde_id,\n   t.overforing_arsak_init_kode,\n   t.overforing_arsak_oppdat_kode,\n   case when t2.sk_bankkunde_biii_id is null\n          then least(s.sak_start_dato + 90, t.sak_start_dato)\n        else t.sak_start_dato\n    end as sak_start_dato,\n   t.sak_start_dato as sak_start_dato_biii,\n   t.sak_start_dato_siste as sak_start_dato_biii_siste,\n   t.sak_kilde_init,\n   t.sak_kilde_oppdatert,\n   t.kundesak_antall_9mnd,\n   t.tilfrisket_dato,\n   t.tilfrisket_flagg,\n   t.sist_scoret_misl_i_sak_dato,\n   t.markedssegment_kode,\n   t.historisk_realisasjon_flagg,\n   t.saker_i_sak_antall,\n   t.siste_kundesak_flagg,\n   case when t2.sk_bankkunde_biii_id is null and s.sak_start_dato + 90 < t.sak_start_dato then '1' else '0' end as korrigert_sak_start_dato_flagg,\n   row_number() over (partition by t.sk_bankkunde_biii_id order by s.sak_start_dato) as rn, -- rangerer for \u00e5 kunne finne den tidligste start-datoen fra gammel definisjon, ved overlapp\n   t.sak_avsluttet_dato\n    from {{ ref('v_d_bankkunde_biii_9mnd') }}  t\n    left join {{ source('LGD_SOURCES', 'D_BANKKUNDE') }} s on t.rk_bankkunde_id = s.rk_bankkunde_id\n                                   and s.overforing_arsak_init_kode = 'MIS'\n                                   and t.sak_start_dato between s.sak_start_dato + 90 and nvl(s.tilfrisket_dato, to_date('99991231', 'yyyymmdd'))\n                                   and s.sak_start_dato < to_date('20210101', 'yyyymmdd')\n    left join {{ source('LGD_SOURCES', 'FAKE_D_BANKKUNDE_BIII') }} t2 on t2.rk_bankkunde_id = t.rk_bankkunde_id\n                                          and t2.sak_start_dato < t.sak_start_dato\n                                          and t2.sak_start_dato between s.sak_start_dato and nvl(s.tilfrisket_dato, to_date('99991231', 'yyyymmdd'))\n)\nselect t.sk_bankkunde_biii_id,\n       t.sk_bankkunde_biii_id_siste,\n       t.rk_bankkunde_id,\n       t.bk_sb1_selskap_id, \n       t.kundenummer,\n       t.kundenavn,\n       t.edb_kunde_id,\n       case t.korrigert_sak_start_dato_flagg when '1' then 'MIS' else t.overforing_arsak_init_kode end overforing_arsak_init_kode,\n       t.overforing_arsak_oppdat_kode,\n       mis_tid.virkedag_dato as sak_start_dato,\n       t.sak_start_dato_biii,\n       t.sak_start_dato_biii_siste,\n       t.sak_kilde_init,\n       t.sak_kilde_oppdatert,\n       t.kundesak_antall_9mnd,\n       t.tilfrisket_dato,\n       t.tilfrisket_flagg,\n       t.sist_scoret_misl_i_sak_dato,\n       t.markedssegment_kode,\n       t.historisk_realisasjon_flagg,\n       t.saker_i_sak_antall,\n       t.korrigert_sak_start_dato_flagg,\n       t.siste_kundesak_flagg,\n       t.sak_avsluttet_dato\n  from bankkunde_biii_korr t\n  join tid mis_tid on nvl(t.sak_start_dato, t.sak_start_dato_biii) = mis_tid.dato\n where t.rn = 1\n\nunion all\n\nselect t.sk_bankkunde_biii_id,\n       t.sk_bankkunde_biii_id as sk_bankkunde_biii_id_siste,\n       t.rk_bankkunde_id,\n       t.bk_sb1_selskap_id,\n       t.kundenummer,\n       t.kundenavn,\n       t.edb_kunde_id,\n       t.overforing_arsak_init_kode,\n       t.overforing_arsak_oppdat_kode,\n       t.sak_start_dato,\n       t.sak_start_dato as sak_start_dato_biii,\n       t.sak_start_dato as sak_start_dato_biii_siste,\n       t.sak_kilde_init,\n       t.sak_kilde_oppdatert,\n       nvl(c.antall, 0) as kundesak_antall_9mnd,\n       t.tilfrisket_dato,\n       t.tilfrisket_flagg,\n       t.sist_scoret_misl_i_sak_dato,\n       t.markedssegment_kode,\n       t.historisk_realisasjon_flagg,\n       0 as saker_i_sak_antall,\n       '0' as korrigert_sak_start_dato_flagg,\n       case when c.rk_bankkunde_id is not null then '0' else '1' end siste_kundesak_flagg,\n       null as sak_avsluttet_dato\n  from {{ source('LGD_SOURCES', 'FAKE_D_BANKKUNDE_BIII') }} t\n  left join (select rk_bankkunde_id, count(8) antall from RISIKO.LGD.FAKE_D_BANKKUNDE_BIII where sak_start_dato is not null group by rk_bankkunde_id) c on t.rk_bankkunde_id = c.rk_bankkunde_id\n where t.sak_start_dato is null", "language": "sql", "refs": [{"name": "v_d_bankkunde_biii_9mnd", "package": null, "version": null}], "sources": [["LGD_SOURCES", "D_BANKKUNDE"], ["LGD_SOURCES", "FAKE_D_BANKKUNDE_BIII"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.LGD_Project.LGD_SOURCES.D_BANKKUNDE", "source.LGD_Project.LGD_SOURCES.FAKE_D_BANKKUNDE_BIII", "model.LGD_Project.v_d_bankkunde_biii_9mnd"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.LGD_Project.v_d_bankkunde_biii_9mnd": {"database": "RISIKO", "schema": "LGD", "name": "v_d_bankkunde_biii_9mnd", "resource_type": "model", "package_name": "LGD_Project", "path": "example/v_d_bankkunde_biii_9mnd.sql", "original_file_path": "models/example/v_d_bankkunde_biii_9mnd.sql", "unique_id": "model.LGD_Project.v_d_bankkunde_biii_9mnd", "fqn": ["LGD_Project", "example", "v_d_bankkunde_biii_9mnd"], "alias": "v_d_bankkunde_biii_9mnd", "checksum": {"name": "sha256", "checksum": "16ba72d5d1eb9144a645707e2ee4f830df8df7aaa46685ba1e9e7aa28bae72e9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "# 9mnd model\n\n### Om tabellen\nDenne modelen/view sammenstiller saker fra samme kunde som har mindre enn 9 m\u00e5neder forskjell mellom avsluttet dato p\u00e5 den eldste og saks start dato p\u00e5 den nyeste, iht til EBA rettningslinjer.\n\n### Datakilder\nDenne tabellen henter data fra:\n - f_lgd_bankkunde_biii_t: dette er m\u00e5ltabellen for skyggeimplementeringen av misligholdsmodulen. Tabellen her b\u00e5de SCD1 og SCD2 h\u00e5ndteres i overf\u00f8ringen til LGD schemaet.", "columns": {"sk_bankkunde_biii_id": {"name": "sk_bankkunde_biii_id", "description": "The primary key for this table", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "LGD_Project://models/example/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1698755982.8634796, "relation_name": "RISIKO.LGD.v_d_bankkunde_biii_9mnd", "raw_code": "{{ config(materialized='view') }}\n\nwith\nkunde_uten_avsl as (\n  select t.sk_bankkunde_biii_id,\n         t.rk_bankkunde_id,\n         t.bk_sb1_selskap_id,\n         t.kundenummer,\n         t.kundenavn,\n         t.edb_kunde_id,\n         t.overforing_arsak_init_kode,\n         t.overforing_arsak_oppdat_kode,\n         t.sak_start_dato, \n         t.sak_kilde_init,\n         t.sak_kilde_oppdatert,\n         t.kundesak_antall,\n         nvl(t.tilfrisket_dato, to_date('99991231', 'yyyymmdd')) tilfrisket_dato,\n         t.tilfrisket_flagg,\n         t.sist_scoret_misl_i_sak_dato,\n         t.markedssegment_kode,\n         t.scd_gyldig_fom,\n         t.scd_gyldig_tom,\n         t.scd_aktiv_flagg,\n         t.historisk_realisasjon_flagg,\n         row_number() over (partition by t.rk_bankkunde_id order by t.sak_start_dato, t.tilfrisket_dato nulls last) kundesak_nr\n\n    from {{ source('LGD_SOURCES','FAKE_D_BANKKUNDE_BIII') }} t\n   where t.sak_start_dato is not null\n),\n--En ny kolonne blir lagt til. Denne kolonne skal funke som en proxy for avsluttet sak dato. Denne skal videre brukes for beregn til logikk. Kolonnen blir lagd siden n\u00e5v\u00e6rende bruk av kun tilfrisket dato er ikke tilstrekkelig i situasjoner hvor saken ikke lenger har eksponering, men er med i lgd.\nkunde_med_avsl as (\n      select k.*,\n      least(k.tilfrisket_dato, nvl(last_day(add_months(k.sist_scoret_misl_i_sak_dato, case k.overforing_arsak_oppdat_kode when 'TAP' then 12 else 3 end)), k.tilfrisket_dato)) sak_avsluttet_dato\n   from kunde_uten_avsl k\n),\n\nkunde_start  AS (\n  SELECT\n    k2.sk_bankkunde_biii_id,\n    k2.rk_bankkunde_id\n  FROM\n    kunde_med_avsl k2\n  LEFT JOIN\n    kunde_med_avsl k3\n  ON\n    k3.rk_bankkunde_id = k2.rk_bankkunde_id\n    AND k3.sk_bankkunde_biii_id <> k2.sk_bankkunde_biii_id\n    AND k3.kundesak_nr < k2.kundesak_nr \n    AND months_between(k2.sak_start_dato, k3.sak_avsluttet_dato) <= 9\n  WHERE\n    k3.sk_bankkunde_biii_id IS NULL\n),\n\nkunde_connected as (\n   \n  SELECT level, \n  connect_by_root sk_bankkunde_biii_id as parent_sk_bankkunde_biii_id, \n  connect_by_root overforing_arsak_init_kode as parent_overforing_arsak_init_kode,\n  connect_by_root rk_bankkunde_id as parent_rk_bankkunde_id, \n  connect_by_root sak_start_dato as parent_sak_start_dato,\n  connect_by_root sak_kilde_init as parent_sak_kilde_init,\n  SYS_CONNECT_BY_PATH(kundesak_nr, ' -> ') as hierarkisk_rangering, \n  k.*\n  FROM kunde_med_avsl k\n    START WITH sk_bankkunde_biii_id in (select sk_bankkunde_biii_id from kunde_start)\n    CONNECT BY prior k.rk_bankkunde_id = k.rk_bankkunde_id\n           and prior k.kundesak_nr + 1 = k.kundesak_nr\n           and months_between(k.sak_start_dato, prior k.sak_avsluttet_dato) <= 9\n)\n\n-- Trenger \u00e5 hente ut \u00e9n rad per mislighold med riktige verdier (fra f\u00f8rste til siste)\nselect c.parent_sk_bankkunde_biii_id as sk_bankkunde_biii_id,\n       c.sk_bankkunde_biii_id as sk_bankkunde_biii_id_siste,\n       c.rk_bankkunde_id,\n       c.bk_sb1_selskap_id,\n       c.kundenummer,\n       c.kundenavn,\n       c.edb_kunde_id,\n       c.parent_overforing_arsak_init_kode as overforing_arsak_init_kode,\n       c.overforing_arsak_oppdat_kode,\n       c.parent_sak_start_dato as sak_start_dato,\n       c.sak_start_dato as sak_start_dato_siste,\n       c.parent_sak_kilde_init as sak_kilde_init,\n       c.sak_kilde_oppdatert,\n       count(8) over (partition by c.rk_bankkunde_id order by c.parent_sak_start_dato) kundesak_antall_9mnd,\n       c.tilfrisket_dato,\n       c.sak_avsluttet_dato,\n       c.tilfrisket_flagg,\n       c.sist_scoret_misl_i_sak_dato,\n       c.markedssegment_kode,\n       c.historisk_realisasjon_flagg,\n       c.level saker_i_sak_antall,\n       case when row_number() over (partition by c.rk_bankkunde_id order by c.parent_sak_start_dato)\n                  = count(8) over (partition by c.rk_bankkunde_id)\n              then '1'\n              else '0'\n        end siste_kundesak_flagg\n  from kunde_connected c\n where c.hierarkisk_rangering = ' -> 1'", "language": "sql", "refs": [], "sources": [["LGD_SOURCES", "FAKE_D_BANKKUNDE_BIII"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.LGD_Project.LGD_SOURCES.FAKE_D_BANKKUNDE_BIII"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.LGD_Project.m_gl_periode_t": {"database": "RISIKO", "schema": "LGD", "name": "m_gl_periode_t", "resource_type": "model", "package_name": "LGD_Project", "path": "example/m_gl_periode_t.sql", "original_file_path": "models/example/m_gl_periode_t.sql", "unique_id": "model.LGD_Project.m_gl_periode_t", "fqn": ["LGD_Project", "example", "m_gl_periode_t"], "alias": "m_gl_periode_t", "checksum": {"name": "sha256", "checksum": "37d7290705f72c4ec67c745ba35984ac3b9559c7a24e8f633bb17cbbaf0eab46"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1698755982.8340936, "relation_name": "RISIKO.LGD.m_gl_periode_t", "raw_code": "{{ config(materialized='table') }}\nselect\n '20230331' as tid_id,\n konf.maletidspunkt_kode,\n t.bankkode,\n t.gl_bankkode,\n case t.bankkode\n   when '4702' then greatest('20160701', to_char(trunc(min(t.transaksjon_dato), 'MM'), 'YYYYMMDD'))\n   else to_char(trunc(min(t.transaksjon_dato), 'MM'), 'YYYYMMDD')\n  end trans_fom_tid_id,\n to_char(last_day(max(t.transaksjon_dato)), 'YYYYMMDD') trans_tom_tid_id,\n case t.bankkode\n   when '4702' then greatest(to_date('20160701', 'yyyymmdd'), trunc(min(t.transaksjon_dato), 'MM'))\n   else trunc(min(t.transaksjon_dato), 'MM')\n  end trans_fom_dato, \n last_day(max(t.transaksjon_dato)) trans_tom_dato,\n max(date(CURRENT_TIMESTAMP)) CURRENT_TIMESTAMP,\n 'batch_navn' as batch_navn\n  from {{ source('LGD_SOURCES', 'F_GL_BANKKONTO_TRANS_B') }} t\n  cross join {{ source('LGD_SOURCES', 'P_LGD_M_KONFIGURASJON') }} konf\n group by t.bankkode, t.gl_bankkode,konf.maletidspunkt_kode", "language": "sql", "refs": [], "sources": [["LGD_SOURCES", "F_GL_BANKKONTO_TRANS_B"], ["LGD_SOURCES", "P_LGD_M_KONFIGURASJON"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.LGD_Project.LGD_SOURCES.F_GL_BANKKONTO_TRANS_B", "source.LGD_Project.LGD_SOURCES.P_LGD_M_KONFIGURASJON"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.LGD_Project.d_virkedag": {"database": "RISIKO", "schema": "LGD", "name": "d_virkedag", "resource_type": "model", "package_name": "LGD_Project", "path": "example/d_virkedag.sql", "original_file_path": "models/example/d_virkedag.sql", "unique_id": "model.LGD_Project.d_virkedag", "fqn": ["LGD_Project", "example", "d_virkedag"], "alias": "d_virkedag", "checksum": {"name": "sha256", "checksum": "6bcb61a743c20d3b557d7403fe95eae74da6eed0f847d84b6e8fb361712a5802"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Oversikt over virkedager", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "LGD_Project://models/example/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1698755982.8684163, "relation_name": "RISIKO.LGD.d_virkedag", "raw_code": "{{ config(materialized='table')}}\nSELECT\n     tid_id as tid_id,\n     dato as dato,\n     lag(tid_id) over (order by tid_id) forrige_virkedag_tid_id,\n     lag(dato) over (order by tid_id) forrige_virkedag_dato,\n     lead(tid_id) over (order by tid_id) neste_virkedag_tid_id,\n     lead(dato) over (order by tid_id) neste_virkedag_dato,\n     tid_id_depot siste_manedslast_tid_id\nFROM {{ source('LGD_SOURCES', 'D_TID') }} \nWHERE virkedag_flagg = '1'\n    AND tid_id BETWEEN '20040101' AND TO_CHAR(DATEADD(MONTH, 12, CURRENT_DATE), 'yyyymmdd')", "language": "sql", "refs": [], "sources": [["LGD_SOURCES", "D_TID"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.LGD_Project.LGD_SOURCES.D_TID"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.LGD_Project.v_reskontro_kks_underkonto": {"database": "RISIKO", "schema": "LGD", "name": "v_reskontro_kks_underkonto", "resource_type": "model", "package_name": "LGD_Project", "path": "example/v_reskontro_kks_underkonto.sql", "original_file_path": "models/example/v_reskontro_kks_underkonto.sql", "unique_id": "model.LGD_Project.v_reskontro_kks_underkonto", "fqn": ["LGD_Project", "example", "v_reskontro_kks_underkonto"], "alias": "v_reskontro_kks_underkonto", "checksum": {"name": "sha256", "checksum": "8d5959fa8255291b0fcdf47db9b98dd14d60112f5ba047315edb660b4bffe890"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "LGD_Project://models/example/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1698755982.868859, "relation_name": "RISIKO.LGD.v_reskontro_kks_underkonto", "raw_code": "{{ config(materialized = 'view') }}\nselect\n/**********************************************************************************************\nBeskrivelse: Identifiserer SCD-rader der en konto er en KKS-underkonto\n             (og ikke balansef\u00f8rt utenom p\u00e5 hovedkontoen).\n\n\nTabellgrunnlag: d_reskontro\n\n\nEndringslogg:\nInitialier   Dato         Beskrivelse\nMBJ          16.12.20     Opprettet view\n\n***********************************************************************************************/\n rk.rk_bankkonto_id,\n rk.bk_bankkonto_id,\n rk.kks_kode,\n rk.kks_hovedkonto_nummer,\n rk.kks_eierkonto_nummer,\n rk.kks_konto_rolle_kode,\n rk.kks_konto_type_kode,\n rk.scd_gyldig_fom,\n rk.scd_gyldig_tom,\n rk.scd_aktiv_flagg\n  from {{ source('LGD_SOURCES', 'D_RESKONTRO') }} rk\n where rk.kks_hovedkonto_nummer is not null\n   and rk.kks_hovedkonto_nummer <> rk.bk_bankkonto_id\n   and rk.kks_konto_type_kode = 'KOVF'", "language": "sql", "refs": [], "sources": [["LGD_SOURCES", "D_RESKONTRO"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.LGD_Project.LGD_SOURCES.D_RESKONTRO"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.LGD_Project.v_cashpool_ikke_balanse": {"database": "RISIKO", "schema": "LGD", "name": "v_cashpool_ikke_balanse", "resource_type": "model", "package_name": "LGD_Project", "path": "example/v_cashpool_ikke_balanse.sql", "original_file_path": "models/example/v_cashpool_ikke_balanse.sql", "unique_id": "model.LGD_Project.v_cashpool_ikke_balanse", "fqn": ["LGD_Project", "example", "v_cashpool_ikke_balanse"], "alias": "v_cashpool_ikke_balanse", "checksum": {"name": "sha256", "checksum": "befb7cb14ca234b114a1f2b2cbeae67170a682758e3d08f21f7731e98cdcf9a8"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "LGD_Project://models/example/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1698755982.8692853, "relation_name": "RISIKO.LGD.v_cashpool_ikke_balanse", "raw_code": "select\n/**********************************************************************************************\nBeskrivelse: Identifiserer SCD-rader der en konto er en ikke-balansef\u00f8rt Cash Pool-konto\n             (kun balansef\u00f8rt p\u00e5 GCA-kontoen i samme valuta i hierarkiet).\n\n\nTabellgrunnlag: d_cashpoolhierarki\n\n\nEndringslogg:\nInitialier   Dato         Beskrivelse\nMBJ          16.12.20     Opprettet view\n\n***********************************************************************************************/\n cp.rk_bankkonto_id,\n cp.bk_bankkonto_id,\n cp.bk_sb1_selskap_id,\n cp.cashpoolkonto_type,\n cp.cashpoolkonto_status,\n cp.balansekonto_sb1_flagg,\n cp.scd_slettet_i_kilde_dato,\n cp.scd_gyldig_fom,\n cp.scd_gyldig_tom\n  from {{ source('LGD_SOURCES', 'D_CASHPOOLHIERARKI') }} cp\n where cp.balansekonto_sb1_flagg = '0'\n   and cp.scd_slettet_i_kilde_dato is null", "language": "sql", "refs": [], "sources": [["LGD_SOURCES", "D_CASHPOOLHIERARKI"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.LGD_Project.LGD_SOURCES.D_CASHPOOLHIERARKI"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "test.LGD_Project.unique_v_d_bankkunde_biii_9mnd_sk_bankkunde_biii_id.262c760c18": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "sk_bankkunde_biii_id", "model": "{{ get_where_subquery(ref('v_d_bankkunde_biii_9mnd')) }}"}, "namespace": null}, "database": "RISIKO", "schema": "LGD_dbt_test__audit", "name": "unique_v_d_bankkunde_biii_9mnd_sk_bankkunde_biii_id", "resource_type": "test", "package_name": "LGD_Project", "path": "unique_v_d_bankkunde_biii_9mnd_sk_bankkunde_biii_id.sql", "original_file_path": "models/example/schema.yml", "unique_id": "test.LGD_Project.unique_v_d_bankkunde_biii_9mnd_sk_bankkunde_biii_id.262c760c18", "fqn": ["LGD_Project", "example", "unique_v_d_bankkunde_biii_9mnd_sk_bankkunde_biii_id"], "alias": "unique_v_d_bankkunde_biii_9mnd_sk_bankkunde_biii_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1698755982.8869662, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "v_d_bankkunde_biii_9mnd", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.LGD_Project.v_d_bankkunde_biii_9mnd"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "sk_bankkunde_biii_id", "file_key_name": "models.v_d_bankkunde_biii_9mnd", "attached_node": "model.LGD_Project.v_d_bankkunde_biii_9mnd"}, "test.LGD_Project.unique_v_d_bankkunde_biii_korr_sk_bankkunde_biii_id.f2917cad72": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "sk_bankkunde_biii_id", "model": "{{ get_where_subquery(ref('v_d_bankkunde_biii_korr')) }}"}, "namespace": null}, "database": "RISIKO", "schema": "LGD_dbt_test__audit", "name": "unique_v_d_bankkunde_biii_korr_sk_bankkunde_biii_id", "resource_type": "test", "package_name": "LGD_Project", "path": "unique_v_d_bankkunde_biii_korr_sk_bankkunde_biii_id.sql", "original_file_path": "models/example/schema.yml", "unique_id": "test.LGD_Project.unique_v_d_bankkunde_biii_korr_sk_bankkunde_biii_id.f2917cad72", "fqn": ["LGD_Project", "example", "unique_v_d_bankkunde_biii_korr_sk_bankkunde_biii_id"], "alias": "unique_v_d_bankkunde_biii_korr_sk_bankkunde_biii_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1698755982.8898895, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "v_d_bankkunde_biii_korr", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique"], "nodes": ["model.LGD_Project.v_d_bankkunde_biii_korr"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "column_name": "sk_bankkunde_biii_id", "file_key_name": "models.v_d_bankkunde_biii_korr", "attached_node": "model.LGD_Project.v_d_bankkunde_biii_korr"}, "model.LGD_Project.m_sak_bankkunde_lgd_t": {"database": "RISIKO", "schema": "LGD", "name": "m_sak_bankkunde_lgd_t", "resource_type": "model", "package_name": "LGD_Project", "path": "example/m_sak_bankkunde_lgd_t.sql", "original_file_path": "models/example/m_sak_bankkunde_lgd_t.sql", "unique_id": "model.LGD_Project.m_sak_bankkunde_lgd_t", "fqn": ["LGD_Project", "example", "m_sak_bankkunde_lgd_t"], "alias": "m_sak_bankkunde_lgd_t", "checksum": {"name": "sha256", "checksum": "122c9e324ef3d592cbaa86a4c9c9e335e5d70a200fe13b0f3a59ba2cdf072b77"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "LGD_Project://models/example/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1698756241.599525, "relation_name": "RISIKO.LGD.m_sak_bankkunde_lgd_t", "raw_code": "with sak_bankkonto as \n    (select sk_bankkunde_biii_id, kontonummer, valutakode, rank() over(partition by sk_bankkunde_biii_id order by kontonummer desc) rnk\n     from (\n           select distinct sk_bankkunde_biii_id, kontonummer, t.valutakode \n           from {{ ref('m_sak_bankkonto_lgd_t') }} t\n           join {{source('LGD_SOURCES', 'M_KONFIGURASJON_BANK') }} kb on kb.maletidspunkt_kode = t.maletidspunkt_kode\n                                               and kb.bk_sb1_selskap_id = t.bk_sb1_selskap_id\n           where t.ekskludert_konto_flagg = '0'\n             and t.tid_id = '&uttrekksdato'\n             and t.batch_navn = '&batch_navn'\n          )\n    )\nselect\n       t.tid_id,t.maletidspunkt_kode,t.kontantstrom_kilde_kode,t.sk_bankkunde_biii_id,t.rk_bankkunde_id,t.bk_sb1_selskap_id,t.kundenummer,t.kundenavn,t.overforing_arsak_init_kode,t.overforing_arsak_oppdat_kode,t.sak_start_dato,\n       t.tilfrisket_dato,\n       max(t.beregn_til_dato) max_kto_beregn_til_dato,\n       uk.kontonummer_liste,\n       sum(t.mislighold_ead_total_daglast) mislighold_ead_total_daglast,\n       sum(t.mislighold_saldo_renter_belop) mislighold_saldo_renter_belop,\n       sum(t.naverdi_gjenvunnet_belop) naverdi_gjenvunnet_belop,\n       sum(t.naverdi_tid_saldo_renter_belop) naverdi_tid_saldo_renter_belop,\n       min(t.konstatert_tap_dato) min_konstatert_tap_dato,\n       sum(t.konstatert_tap_belop) sum_konstatert_tap_belop,\n       sum(case when t.konstatert_tap_dato is not null then 1 else 0 end) antall_kto_med_konstatert_tap,\n       max(t.konstatert_tap_dato) max_konstatert_tap_dato,\n       sum(t.naverdi_gjenvunnet_kt_belop) naverdi_gjenvunnet_kt_belop,\n       sum(t.mislighold_vintage_irba_ead) mislighold_vintage_irba_ead,\n       sum(t.mislighold_vintage_irba_sikk) mislighold_vintage_irba_sikk,\n       sum(t.gjenvunnet_nominelt_belop) gjenvunnet_nominelt_belop,\n       sum(t.gjenvunnet_nominelt_kt_belop) gjenvunnet_nominelt_kt_belop,\n       flagg.kredittforetak_flagg,flagg.syndikat_flagg,flagg.eierbytte_flagg,flagg.rk_trekkonto_utenfor_lgd_flagg,flagg.korr_kilde_trans_flagg,flagg.korr_kilde_gl_flagg,flagg.korr_kilde_konflikt_flagg,flagg.ekskludert_konto_flagg/* ,flagg.annet_spesielt*/,\n       sum(least(t.mislighold_saldo_nok, 0)) negativ_mislighold_saldo_nok,\n       vk.valutakode_liste,\n       sum(t.misl_ikkekap_kreditrente_belop) misl_ikkekap_kreditrente_belop,\n       sum(t.misl_ikkekap_debetrente_belop) misl_ikkekap_debetrente_belop,\n       sum(t.tid_saldo_renter_belop) tid_saldo_renter_belop,\n       t.rente_navn,t.rente_ppoeng,t.rente_referanse_ppoeng,t.sak_start_tid_id,t.sak_start_dato_biii,t.sak_start_dato_biii_siste,t.sak_kilde_init,t.sak_kilde_oppdatert,\n       t.tilfrisket_tid_id,\n       case when t.tilfrisket_dato <= max(t.beregn_til_dato) then '1' else '0' end tilfrisket_flagg,\n       t.tilfrisket_senere_flagg,t.kundesak_antall_9mnd,t.historisk_realisasjon_flagg,t.saker_i_sak_antall,t.markedssegment_kode,t.korrigert_sak_start_dato_flagg,\n       '&batch_navn' as batch_navn\n  from {{ ref('m_sak_bankkonto_lgd_t') }} t /* materialisert tabell iht. sb1_lgd.p_lgd_last*/\n  join {{source('LGD_SOURCES', 'P_LGD_M_KONFIGURASJON') }} kb on kb.maletidspunkt_kode = t.maletidspunkt_kode\n  join {{ ref('m_d_bankkunde_biii_flagg_t') }} flagg on flagg.tid_id = '&uttrekksdato'\n                                               and flagg.batch_navn = '&batch_navn'\n                                               and flagg.sk_bankkunde_biii_id = t.sk_bankkunde_biii_id\n                                               and flagg.maletidspunkt_kode = t.maletidspunkt_kode\n\n/*utvalgte_konti*/\n  join (select sk_bankkunde_biii_id, listagg(kontonummer, ', ') within group(order by kontonummer desc) kontonummer_liste,\n               listagg(valutakode, ', ') within group(order by valutakode desc) valutakode_liste\n        from sak_bankkonto\n        where rnk <= 30 /*Antall konti som skal med i listen*/\n        group by sk_bankkunde_biii_id\n       ) uk on uk.sk_bankkunde_biii_id = t.sk_bankkunde_biii_id\n\n  join (select sk_bankkunde_biii_id, listagg(valutakode, ', ') within group(order by valutakode desc) valutakode_liste\n        from \n           (select distinct sk_bankkunde_biii_id, valutakode\n            from sak_bankkonto\n           )\n        group by sk_bankkunde_biii_id\n       ) vk on vk.sk_bankkunde_biii_id = t.sk_bankkunde_biii_id\n where t.ekskludert_konto_flagg = '0'\n   and t.tid_id = '&uttrekksdato'\n   and t.batch_navn ='&batch_navn'\n group by t.tid_id,t.maletidspunkt_kode,t.kontantstrom_kilde_kode,t.sk_bankkunde_biii_id,t.rk_bankkunde_id,t.bk_sb1_selskap_id,t.kundenummer,t.kundenavn,t.overforing_arsak_init_kode,t.overforing_arsak_oppdat_kode,t.sak_start_dato,t.tilfrisket_dato,uk.kontonummer_liste,vk.valutakode_liste,flagg.kredittforetak_flagg,flagg.syndikat_flagg,flagg.eierbytte_flagg,flagg.rk_trekkonto_utenfor_lgd_flagg,flagg.korr_kilde_trans_flagg,flagg.korr_kilde_gl_flagg,flagg.korr_kilde_konflikt_flagg,flagg.ekskludert_konto_flagg,/*flagg.annet_spesielt,*/t.rente_navn,t.rente_ppoeng,t.rente_referanse_ppoeng,t.sak_start_tid_id,t.sak_start_dato_biii,t.sak_start_dato_biii_siste,t.sak_kilde_init,t.sak_kilde_oppdatert,t.tilfrisket_tid_id,t.tilfrisket_flagg,t.tilfrisket_senere_flagg,t.kundesak_antall_9mnd,t.historisk_realisasjon_flagg,t.saker_i_sak_antall,t.markedssegment_kode,t.korrigert_sak_start_dato_flagg", "language": "sql", "refs": [{"name": "m_sak_bankkonto_lgd_t", "package": null, "version": null}, {"name": "m_sak_bankkonto_lgd_t", "package": null, "version": null}, {"name": "m_d_bankkunde_biii_flagg_t", "package": null, "version": null}], "sources": [["LGD_SOURCES", "M_KONFIGURASJON_BANK"], ["LGD_SOURCES", "P_LGD_M_KONFIGURASJON"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK", "source.LGD_Project.LGD_SOURCES.P_LGD_M_KONFIGURASJON", "model.LGD_Project.m_sak_bankkonto_lgd_t", "model.LGD_Project.m_sak_bankkonto_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_flagg_t"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}, "model.LGD_Project.res_sak_bankkunde_lgd_t": {"database": "RISIKO", "schema": "LGD", "name": "res_sak_bankkunde_lgd_t", "resource_type": "model", "package_name": "LGD_Project", "path": "example/res_sak_bankkunde_lgd_t.sql", "original_file_path": "models/example/res_sak_bankkunde_lgd_t.sql", "unique_id": "model.LGD_Project.res_sak_bankkunde_lgd_t", "fqn": ["LGD_Project", "example", "res_sak_bankkunde_lgd_t"], "alias": "res_sak_bankkunde_lgd_t", "checksum": {"name": "sha256", "checksum": "4674efe80f12b336e3c196fcb322df2c0e54c85dddc963216d3ab38e85213d0b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": "LGD_Project://models/example/schema.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1698756310.2232122, "relation_name": "RISIKO.LGD.res_sak_bankkunde_lgd_t", "raw_code": "with sak_bankkonto as \n    (select sk_bankkunde_biii_id, kontonummer, valutakode, rank() over(partition by sk_bankkunde_biii_id order by kontonummer desc) rnk\n     from (\n           select distinct sk_bankkunde_biii_id, kontonummer, t.valutakode \n           from {{ ref('m_sak_bankkonto_lgd_t') }} t\n           join {{ source('LGD_SOURCES' ,'M_KONFIGURASJON_BANK') }} kb on kb.maletidspunkt_kode = t.maletidspunkt_kode\n                                               and kb.bk_sb1_selskap_id = t.bk_sb1_selskap_id\n           where t.ekskludert_konto_flagg = '0'\n             and t.tid_id = '&uttrekksdato'\n             and t.batch_navn = '&batch_navn'\n          )\n    )\nselect\n       t.tid_id,t.maletidspunkt_kode,t.kontantstrom_kilde_kode,t.sk_bankkunde_biii_id,t.rk_bankkunde_id,t.bk_sb1_selskap_id,t.kundenummer,t.kundenavn,t.overforing_arsak_init_kode,t.overforing_arsak_oppdat_kode,t.sak_start_dato,\n       t.tilfrisket_dato,\n       max(t.beregn_til_dato) max_kto_beregn_til_dato,\n       uk.kontonummer_liste,\n       sum(t.mislighold_ead_total_daglast) mislighold_ead_total_daglast,\n       sum(t.mislighold_saldo_renter_belop) mislighold_saldo_renter_belop,\n       sum(t.naverdi_gjenvunnet_belop) naverdi_gjenvunnet_belop,\n       sum(t.naverdi_tid_saldo_renter_belop) naverdi_tid_saldo_renter_belop,\n       min(t.konstatert_tap_dato) min_konstatert_tap_dato,\n       sum(t.konstatert_tap_belop) sum_konstatert_tap_belop,\n       sum(case when t.konstatert_tap_dato is not null then 1 else 0 end) antall_kto_med_konstatert_tap,\n       max(t.konstatert_tap_dato) max_konstatert_tap_dato,\n       sum(t.naverdi_gjenvunnet_kt_belop) naverdi_gjenvunnet_kt_belop,\n       sum(t.mislighold_vintage_irba_ead) mislighold_vintage_irba_ead,\n       sum(t.mislighold_vintage_irba_sikk) mislighold_vintage_irba_sikk,\n       sum(t.gjenvunnet_nominelt_belop) gjenvunnet_nominelt_belop,\n       sum(t.gjenvunnet_nominelt_kt_belop) gjenvunnet_nominelt_kt_belop,\n       flagg.kredittforetak_flagg,flagg.syndikat_flagg,flagg.eierbytte_flagg,flagg.rk_trekkonto_utenfor_lgd_flagg,flagg.korr_kilde_trans_flagg,flagg.korr_kilde_gl_flagg,flagg.korr_kilde_konflikt_flagg,flagg.ekskludert_konto_flagg,/*flagg.annet_spesielt,*/\n       sum(least(t.mislighold_saldo_nok, 0)) negativ_mislighold_saldo_nok,\n       vk.valutakode_liste,\n       sum(t.misl_ikkekap_kreditrente_belop) misl_ikkekap_kreditrente_belop,\n       sum(t.misl_ikkekap_debetrente_belop) misl_ikkekap_debetrente_belop,\n       sum(t.tid_saldo_renter_belop) tid_saldo_renter_belop,\n       t.rente_navn,t.rente_ppoeng,t.rente_referanse_ppoeng,t.sak_start_tid_id,t.sak_start_dato_biii,t.sak_start_dato_biii_siste,t.sak_kilde_init,t.sak_kilde_oppdatert,\n       t.tilfrisket_tid_id,\n       case when t.tilfrisket_dato <= max(t.beregn_til_dato) then '1' else '0' end tilfrisket_flagg,\n       t.tilfrisket_senere_flagg,t.kundesak_antall_9mnd,t.historisk_realisasjon_flagg,t.saker_i_sak_antall,t.markedssegment_kode,t.korrigert_sak_start_dato_flagg,\n       '&batch_navn' as batch_navn\n  from {{ ref('m_sak_bankkonto_lgd_t') }} t /* materialisert tabell iht. sb1_lgd.p_lgd_last*/\n  join {{ source('LGD_SOURCES' ,'P_LGD_M_KONFIGURASJON') }} kb on kb.maletidspunkt_kode = t.maletidspunkt_kode\n  join {{ ref('m_d_bankkunde_biii_flagg_t') }} flagg on flagg.tid_id = '&uttrekksdato'\n                                               and flagg.batch_navn = '&batch_navn'\n                                               and flagg.sk_bankkunde_biii_id = t.sk_bankkunde_biii_id\n                                               and flagg.maletidspunkt_kode = t.maletidspunkt_kode\n\n/*utvalgte_konti*/\n  join (select sk_bankkunde_biii_id, listagg(kontonummer, ', ') within group(order by kontonummer desc) kontonummer_liste,\n               listagg(valutakode, ', ') within group(order by valutakode desc) valutakode_liste\n        from sak_bankkonto\n        where rnk <= 30 /*Antall konti som skal med i listen*/\n        group by sk_bankkunde_biii_id\n       ) uk on uk.sk_bankkunde_biii_id = t.sk_bankkunde_biii_id\n\n  join (select sk_bankkunde_biii_id, listagg(valutakode, ', ') within group(order by valutakode desc) valutakode_liste\n        from \n           (select distinct sk_bankkunde_biii_id, valutakode\n            from sak_bankkonto\n           )\n        group by sk_bankkunde_biii_id\n       ) vk on vk.sk_bankkunde_biii_id = t.sk_bankkunde_biii_id\n where t.ekskludert_konto_flagg = '0'\n   and t.tid_id = '&uttrekksdato'\n   and t.batch_navn ='&batch_navn'\n group by t.tid_id,t.maletidspunkt_kode,t.kontantstrom_kilde_kode,t.sk_bankkunde_biii_id,t.rk_bankkunde_id,t.bk_sb1_selskap_id,t.kundenummer,t.kundenavn,t.overforing_arsak_init_kode,t.overforing_arsak_oppdat_kode,t.sak_start_dato,t.tilfrisket_dato,uk.kontonummer_liste,vk.valutakode_liste,flagg.kredittforetak_flagg,flagg.syndikat_flagg,flagg.eierbytte_flagg,flagg.rk_trekkonto_utenfor_lgd_flagg,flagg.korr_kilde_trans_flagg,flagg.korr_kilde_gl_flagg,flagg.korr_kilde_konflikt_flagg,flagg.ekskludert_konto_flagg,/*flagg.annet_spesielt,*/t.rente_navn,t.rente_ppoeng,t.rente_referanse_ppoeng,t.sak_start_tid_id,t.sak_start_dato_biii,t.sak_start_dato_biii_siste,t.sak_kilde_init,t.sak_kilde_oppdatert,t.tilfrisket_tid_id,t.tilfrisket_flagg,t.tilfrisket_senere_flagg,t.kundesak_antall_9mnd,t.historisk_realisasjon_flagg,t.saker_i_sak_antall,t.markedssegment_kode,t.korrigert_sak_start_dato_flagg", "language": "sql", "refs": [{"name": "m_sak_bankkonto_lgd_t", "package": null, "version": null}, {"name": "m_sak_bankkonto_lgd_t", "package": null, "version": null}, {"name": "m_d_bankkunde_biii_flagg_t", "package": null, "version": null}], "sources": [["LGD_SOURCES", "M_KONFIGURASJON_BANK"], ["LGD_SOURCES", "P_LGD_M_KONFIGURASJON"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK", "source.LGD_Project.LGD_SOURCES.P_LGD_M_KONFIGURASJON", "model.LGD_Project.m_sak_bankkonto_lgd_t", "model.LGD_Project.m_sak_bankkonto_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_flagg_t"]}, "compiled_path": null, "contract": {"enforced": false, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null}}, "sources": {"source.LGD_Project.LGD_SOURCES.FAKE_D_BANKKUNDE_BIII": {"database": "RISIKO", "schema": "LGD", "name": "FAKE_D_BANKKUNDE_BIII", "resource_type": "source", "package_name": "LGD_Project", "path": "models/example/schema.yml", "original_file_path": "models/example/schema.yml", "unique_id": "source.LGD_Project.LGD_SOURCES.FAKE_D_BANKKUNDE_BIII", "fqn": ["LGD_Project", "example", "LGD_SOURCES", "FAKE_D_BANKKUNDE_BIII"], "source_name": "LGD_SOURCES", "source_description": "", "loader": "", "identifier": "FAKE_D_BANKKUNDE_BIII", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Tabellen er en oversikt over misligholdssaker for kunde som har g\u00e5tt i mislighold", "columns": {"sk_bankkunde_biii_id": {"name": "sk_bankkunde_biii_id", "description": "Prim\u00e6rn\u00f8kkel for tabellen som henviser til en enkel misligholdssak", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "RISIKO.LGD.FAKE_D_BANKKUNDE_BIII", "created_at": 1698755982.9148278}, "source.LGD_Project.LGD_SOURCES.D_BANKKUNDE": {"database": "RISIKO", "schema": "LGD", "name": "D_BANKKUNDE", "resource_type": "source", "package_name": "LGD_Project", "path": "models/example/schema.yml", "original_file_path": "models/example/schema.yml", "unique_id": "source.LGD_Project.LGD_SOURCES.D_BANKKUNDE", "fqn": ["LGD_Project", "example", "LGD_SOURCES", "D_BANKKUNDE"], "source_name": "LGD_SOURCES", "source_description": "", "loader": "", "identifier": "D_BANKKUNDE", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "RISIKO.LGD.D_BANKKUNDE", "created_at": 1698755982.9150248}, "source.LGD_Project.LGD_SOURCES.FAKE_D_BANKKONTO": {"database": "RISIKO", "schema": "LGD", "name": "FAKE_D_BANKKONTO", "resource_type": "source", "package_name": "LGD_Project", "path": "models/example/schema.yml", "original_file_path": "models/example/schema.yml", "unique_id": "source.LGD_Project.LGD_SOURCES.FAKE_D_BANKKONTO", "fqn": ["LGD_Project", "example", "LGD_SOURCES", "FAKE_D_BANKKONTO"], "source_name": "LGD_SOURCES", "source_description": "", "loader": "", "identifier": "FAKE_D_BANKKONTO", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "RISIKO.LGD.FAKE_D_BANKKONTO", "created_at": 1698755982.9151905}, "source.LGD_Project.LGD_SOURCES.F_KONSTATERT_TAP": {"database": "RISIKO", "schema": "LGD", "name": "F_KONSTATERT_TAP", "resource_type": "source", "package_name": "LGD_Project", "path": "models/example/schema.yml", "original_file_path": "models/example/schema.yml", "unique_id": "source.LGD_Project.LGD_SOURCES.F_KONSTATERT_TAP", "fqn": ["LGD_Project", "example", "LGD_SOURCES", "F_KONSTATERT_TAP"], "source_name": "LGD_SOURCES", "source_description": "", "loader": "", "identifier": "F_KONSTATERT_TAP", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "RISIKO.LGD.F_KONSTATERT_TAP", "created_at": 1698755982.9153368}, "source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK": {"database": "RISIKO", "schema": "LGD", "name": "M_KONFIGURASJON_BANK", "resource_type": "source", "package_name": "LGD_Project", "path": "models/example/schema.yml", "original_file_path": "models/example/schema.yml", "unique_id": "source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK", "fqn": ["LGD_Project", "example", "LGD_SOURCES", "M_KONFIGURASJON_BANK"], "source_name": "LGD_SOURCES", "source_description": "", "loader": "", "identifier": "M_KONFIGURASJON_BANK", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "RISIKO.LGD.M_KONFIGURASJON_BANK", "created_at": 1698755982.915476}, "source.LGD_Project.LGD_SOURCES.P_LGD_M_KONFIGURASJON": {"database": "RISIKO", "schema": "LGD", "name": "P_LGD_M_KONFIGURASJON", "resource_type": "source", "package_name": "LGD_Project", "path": "models/example/schema.yml", "original_file_path": "models/example/schema.yml", "unique_id": "source.LGD_Project.LGD_SOURCES.P_LGD_M_KONFIGURASJON", "fqn": ["LGD_Project", "example", "LGD_SOURCES", "P_LGD_M_KONFIGURASJON"], "source_name": "LGD_SOURCES", "source_description": "", "loader": "", "identifier": "P_LGD_M_KONFIGURASJON", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "RISIKO.LGD.P_LGD_M_KONFIGURASJON", "created_at": 1698755982.915612}, "source.LGD_Project.LGD_SOURCES.P_MALETIDSPUNKT": {"database": "RISIKO", "schema": "LGD", "name": "P_MALETIDSPUNKT", "resource_type": "source", "package_name": "LGD_Project", "path": "models/example/schema.yml", "original_file_path": "models/example/schema.yml", "unique_id": "source.LGD_Project.LGD_SOURCES.P_MALETIDSPUNKT", "fqn": ["LGD_Project", "example", "LGD_SOURCES", "P_MALETIDSPUNKT"], "source_name": "LGD_SOURCES", "source_description": "", "loader": "", "identifier": "P_MALETIDSPUNKT", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "RISIKO.LGD.P_MALETIDSPUNKT", "created_at": 1698755982.9157488}, "source.LGD_Project.LGD_SOURCES.F_KONSTATERT_TAP_KORR": {"database": "RISIKO", "schema": "LGD", "name": "F_KONSTATERT_TAP_KORR", "resource_type": "source", "package_name": "LGD_Project", "path": "models/example/schema.yml", "original_file_path": "models/example/schema.yml", "unique_id": "source.LGD_Project.LGD_SOURCES.F_KONSTATERT_TAP_KORR", "fqn": ["LGD_Project", "example", "LGD_SOURCES", "F_KONSTATERT_TAP_KORR"], "source_name": "LGD_SOURCES", "source_description": "", "loader": "", "identifier": "F_KONSTATERT_TAP_KORR", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "RISIKO.LGD.F_KONSTATERT_TAP_KORR", "created_at": 1698755982.915892}, "source.LGD_Project.LGD_SOURCES.D_TID": {"database": "RISIKO", "schema": "LGD", "name": "D_TID", "resource_type": "source", "package_name": "LGD_Project", "path": "models/example/schema.yml", "original_file_path": "models/example/schema.yml", "unique_id": "source.LGD_Project.LGD_SOURCES.D_TID", "fqn": ["LGD_Project", "example", "LGD_SOURCES", "D_TID"], "source_name": "LGD_SOURCES", "source_description": "", "loader": "", "identifier": "D_TID", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "RISIKO.LGD.D_TID", "created_at": 1698755982.9160357}, "source.LGD_Project.LGD_SOURCES.F_KNYTNING_SYNDIKAT": {"database": "RISIKO", "schema": "LGD", "name": "F_KNYTNING_SYNDIKAT", "resource_type": "source", "package_name": "LGD_Project", "path": "models/example/schema.yml", "original_file_path": "models/example/schema.yml", "unique_id": "source.LGD_Project.LGD_SOURCES.F_KNYTNING_SYNDIKAT", "fqn": ["LGD_Project", "example", "LGD_SOURCES", "F_KNYTNING_SYNDIKAT"], "source_name": "LGD_SOURCES", "source_description": "", "loader": "", "identifier": "F_KNYTNING_SYNDIKAT", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "RISIKO.LGD.F_KNYTNING_SYNDIKAT", "created_at": 1698755982.9161725}, "source.LGD_Project.LGD_SOURCES.P_KORR_TRANS_KILDE_KODE": {"database": "RISIKO", "schema": "LGD", "name": "P_KORR_TRANS_KILDE_KODE", "resource_type": "source", "package_name": "LGD_Project", "path": "models/example/schema.yml", "original_file_path": "models/example/schema.yml", "unique_id": "source.LGD_Project.LGD_SOURCES.P_KORR_TRANS_KILDE_KODE", "fqn": ["LGD_Project", "example", "LGD_SOURCES", "P_KORR_TRANS_KILDE_KODE"], "source_name": "LGD_SOURCES", "source_description": "", "loader": "", "identifier": "P_KORR_TRANS_KILDE_KODE", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "RISIKO.LGD.P_KORR_TRANS_KILDE_KODE", "created_at": 1698755982.9163058}, "source.LGD_Project.LGD_SOURCES.F_KONTOBALANSE_T": {"database": "RISIKO", "schema": "LGD", "name": "F_KONTOBALANSE_T", "resource_type": "source", "package_name": "LGD_Project", "path": "models/example/schema.yml", "original_file_path": "models/example/schema.yml", "unique_id": "source.LGD_Project.LGD_SOURCES.F_KONTOBALANSE_T", "fqn": ["LGD_Project", "example", "LGD_SOURCES", "F_KONTOBALANSE_T"], "source_name": "LGD_SOURCES", "source_description": "", "loader": "", "identifier": "F_KONTOBALANSE_T", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "RISIKO.LGD.F_KONTOBALANSE_T", "created_at": 1698755982.916444}, "source.LGD_Project.LGD_SOURCES.F_EAD_T": {"database": "RISIKO", "schema": "LGD", "name": "F_EAD_T", "resource_type": "source", "package_name": "LGD_Project", "path": "models/example/schema.yml", "original_file_path": "models/example/schema.yml", "unique_id": "source.LGD_Project.LGD_SOURCES.F_EAD_T", "fqn": ["LGD_Project", "example", "LGD_SOURCES", "F_EAD_T"], "source_name": "LGD_SOURCES", "source_description": "", "loader": "", "identifier": "F_EAD_T", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "RISIKO.LGD.F_EAD_T", "created_at": 1698755982.9165716}, "source.LGD_Project.LGD_SOURCES.D_RESKONTRO_TREKKONTO": {"database": "RISIKO", "schema": "LGD", "name": "D_RESKONTRO_TREKKONTO", "resource_type": "source", "package_name": "LGD_Project", "path": "models/example/schema.yml", "original_file_path": "models/example/schema.yml", "unique_id": "source.LGD_Project.LGD_SOURCES.D_RESKONTRO_TREKKONTO", "fqn": ["LGD_Project", "example", "LGD_SOURCES", "D_RESKONTRO_TREKKONTO"], "source_name": "LGD_SOURCES", "source_description": "", "loader": "", "identifier": "D_RESKONTRO_TREKKONTO", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "RISIKO.LGD.D_RESKONTRO_TREKKONTO", "created_at": 1698755982.9166996}, "source.LGD_Project.LGD_SOURCES.F_GL_BANKKONTO_TRANS_B": {"database": "RISIKO", "schema": "LGD", "name": "F_GL_BANKKONTO_TRANS_B", "resource_type": "source", "package_name": "LGD_Project", "path": "models/example/schema.yml", "original_file_path": "models/example/schema.yml", "unique_id": "source.LGD_Project.LGD_SOURCES.F_GL_BANKKONTO_TRANS_B", "fqn": ["LGD_Project", "example", "LGD_SOURCES", "F_GL_BANKKONTO_TRANS_B"], "source_name": "LGD_SOURCES", "source_description": "", "loader": "", "identifier": "F_GL_BANKKONTO_TRANS_B", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "RISIKO.LGD.F_GL_BANKKONTO_TRANS_B", "created_at": 1698755982.9168322}, "source.LGD_Project.LGD_SOURCES.F_KAPITALTRANSAKSJON_T": {"database": "RISIKO", "schema": "LGD", "name": "F_KAPITALTRANSAKSJON_T", "resource_type": "source", "package_name": "LGD_Project", "path": "models/example/schema.yml", "original_file_path": "models/example/schema.yml", "unique_id": "source.LGD_Project.LGD_SOURCES.F_KAPITALTRANSAKSJON_T", "fqn": ["LGD_Project", "example", "LGD_SOURCES", "F_KAPITALTRANSAKSJON_T"], "source_name": "LGD_SOURCES", "source_description": "", "loader": "", "identifier": "F_KAPITALTRANSAKSJON_T", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "RISIKO.LGD.F_KAPITALTRANSAKSJON_T", "created_at": 1698755982.916962}, "source.LGD_Project.LGD_SOURCES.P_KAPITALTRANSAKSJONSKODE": {"database": "RISIKO", "schema": "LGD", "name": "P_KAPITALTRANSAKSJONSKODE", "resource_type": "source", "package_name": "LGD_Project", "path": "models/example/schema.yml", "original_file_path": "models/example/schema.yml", "unique_id": "source.LGD_Project.LGD_SOURCES.P_KAPITALTRANSAKSJONSKODE", "fqn": ["LGD_Project", "example", "LGD_SOURCES", "P_KAPITALTRANSAKSJONSKODE"], "source_name": "LGD_SOURCES", "source_description": "", "loader": "", "identifier": "P_KAPITALTRANSAKSJONSKODE", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "RISIKO.LGD.P_KAPITALTRANSAKSJONSKODE", "created_at": 1698755982.9170904}, "source.LGD_Project.LGD_SOURCES.D_RESKONTRO": {"database": "RISIKO", "schema": "LGD", "name": "D_RESKONTRO", "resource_type": "source", "package_name": "LGD_Project", "path": "models/example/schema.yml", "original_file_path": "models/example/schema.yml", "unique_id": "source.LGD_Project.LGD_SOURCES.D_RESKONTRO", "fqn": ["LGD_Project", "example", "LGD_SOURCES", "D_RESKONTRO"], "source_name": "LGD_SOURCES", "source_description": "", "loader": "", "identifier": "D_RESKONTRO", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "RISIKO.LGD.D_RESKONTRO", "created_at": 1698755982.9172192}, "source.LGD_Project.LGD_SOURCES.D_CASHPOOLHIERARKI": {"database": "RISIKO", "schema": "LGD", "name": "D_CASHPOOLHIERARKI", "resource_type": "source", "package_name": "LGD_Project", "path": "models/example/schema.yml", "original_file_path": "models/example/schema.yml", "unique_id": "source.LGD_Project.LGD_SOURCES.D_CASHPOOLHIERARKI", "fqn": ["LGD_Project", "example", "LGD_SOURCES", "D_CASHPOOLHIERARKI"], "source_name": "LGD_SOURCES", "source_description": "", "loader": "", "identifier": "D_CASHPOOLHIERARKI", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "RISIKO.LGD.D_CASHPOOLHIERARKI", "created_at": 1698755982.9173582}, "source.LGD_Project.LGD_SOURCES.F_NEDSKRIVNING": {"database": "RISIKO", "schema": "LGD", "name": "F_NEDSKRIVNING", "resource_type": "source", "package_name": "LGD_Project", "path": "models/example/schema.yml", "original_file_path": "models/example/schema.yml", "unique_id": "source.LGD_Project.LGD_SOURCES.F_NEDSKRIVNING", "fqn": ["LGD_Project", "example", "LGD_SOURCES", "F_NEDSKRIVNING"], "source_name": "LGD_SOURCES", "source_description": "", "loader": "", "identifier": "F_NEDSKRIVNING", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "RISIKO.LGD.F_NEDSKRIVNING", "created_at": 1698755982.9174874}, "source.LGD_Project.LGD_SOURCES.D_RENTE_BASIS_SATS": {"database": "RISIKO", "schema": "LGD", "name": "D_RENTE_BASIS_SATS", "resource_type": "source", "package_name": "LGD_Project", "path": "models/example/schema.yml", "original_file_path": "models/example/schema.yml", "unique_id": "source.LGD_Project.LGD_SOURCES.D_RENTE_BASIS_SATS", "fqn": ["LGD_Project", "example", "LGD_SOURCES", "D_RENTE_BASIS_SATS"], "source_name": "LGD_SOURCES", "source_description": "", "loader": "", "identifier": "D_RENTE_BASIS_SATS", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "RISIKO.LGD.D_RENTE_BASIS_SATS", "created_at": 1698755982.9176161}, "source.LGD_Project.LGD_SOURCES.P_LGD_BATCH": {"database": "RISIKO", "schema": "LGD", "name": "P_LGD_BATCH", "resource_type": "source", "package_name": "LGD_Project", "path": "models/example/schema.yml", "original_file_path": "models/example/schema.yml", "unique_id": "source.LGD_Project.LGD_SOURCES.P_LGD_BATCH", "fqn": ["LGD_Project", "example", "LGD_SOURCES", "P_LGD_BATCH"], "source_name": "LGD_SOURCES", "source_description": "", "loader": "", "identifier": "P_LGD_BATCH", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "RISIKO.LGD.P_LGD_BATCH", "created_at": 1698755982.9177444}, "source.LGD_Project.LGD_SOURCES.F_FORDELT_SIKKERHETSVERDI_T": {"database": "RISIKO", "schema": "LGD", "name": "F_FORDELT_SIKKERHETSVERDI_T", "resource_type": "source", "package_name": "LGD_Project", "path": "models/example/schema.yml", "original_file_path": "models/example/schema.yml", "unique_id": "source.LGD_Project.LGD_SOURCES.F_FORDELT_SIKKERHETSVERDI_T", "fqn": ["LGD_Project", "example", "LGD_SOURCES", "F_FORDELT_SIKKERHETSVERDI_T"], "source_name": "LGD_SOURCES", "source_description": "", "loader": "", "identifier": "F_FORDELT_SIKKERHETSVERDI_T", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "RISIKO.LGD.F_FORDELT_SIKKERHETSVERDI_T", "created_at": 1698755982.9179013}, "source.LGD_Project.LGD_SOURCES.F_LGD_T": {"database": "RISIKO", "schema": "LGD", "name": "F_LGD_T", "resource_type": "source", "package_name": "LGD_Project", "path": "models/example/schema.yml", "original_file_path": "models/example/schema.yml", "unique_id": "source.LGD_Project.LGD_SOURCES.F_LGD_T", "fqn": ["LGD_Project", "example", "LGD_SOURCES", "F_LGD_T"], "source_name": "LGD_SOURCES", "source_description": "", "loader": "", "identifier": "F_LGD_T", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "RISIKO.LGD.F_LGD_T", "created_at": 1698755982.9180481}}, "macros": {"macro.dbt_snowflake.snowflake__copy_grants": {"name": "snowflake__copy_grants", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.8912897, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"name": "snowflake__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/apply_grants.sql", "original_file_path": "macros/apply_grants.sql", "unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.8915262, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_table_as": {"name": "snowflake__create_table_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set transient = config.get('transient', default=true) -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {% if temporary -%}\n          temporary\n        {%- elif transient -%}\n          transient\n        {%- endif %} table {{ relation }}\n        {%- set contract_config = config.get('contract') -%}\n        {%- if contract_config.enforced -%}\n          {{ get_assert_columns_equivalent(sql) }}\n          {{ get_table_columns_and_constraints() }}\n          {% set compiled_code = get_select_subquery(compiled_code) %}\n        {% endif %}\n        {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from (\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery", "macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9122896, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"name": "get_column_comment_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.913729, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"name": "get_persist_docs_column_list", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9142718, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag": {"name": "snowflake__create_view_as_with_temp_flag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro_sql": "{% macro snowflake__create_view_as_with_temp_flag(relation, sql, is_temporary=False) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} {% if is_temporary -%}\n    temporary\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {%- set contract_config = config.get('contract') -%}\n  {%- if contract_config.enforced -%}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list", "macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9160657, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"name": "snowflake__create_view_as", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {{ snowflake__create_view_as_with_temp_flag(relation, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9163747, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"name": "snowflake__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9178276, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"name": "snowflake__list_schemas", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9188614, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"name": "snowflake__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many objects in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.919796, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"name": "snowflake__check_schema_exists", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9204302, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"name": "snowflake__rename_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9207935, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"name": "snowflake__alter_column_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9212582, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"name": "snowflake__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.921704, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"name": "snowflake__alter_column_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9227703, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"name": "get_current_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9231248, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"name": "set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9234314, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"name": "snowflake__set_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9243531, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"name": "unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9246984, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"name": "snowflake__unset_query_tag", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.925624, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"name": "snowflake__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9272335, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"name": "snowflake_dml_explicit_transaction", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9276564, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"name": "snowflake__truncate_relation", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.928136, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"name": "snowflake__get_catalog", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9297886, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"name": "snowflake__safe_cast", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9301255, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"name": "snowflake__bool_or", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt_snowflake.snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9303763, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"name": "snowflake__current_timestamp", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.930809, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"name": "snowflake__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9311574, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"name": "snowflake__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9313564, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"name": "snowflake__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.931553, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"name": "snowflake__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/timestamps.sql", "original_file_path": "macros/utils/timestamps.sql", "unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9318035, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"name": "snowflake__escape_single_quotes", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9321473, "supported_languages": null}, "macro.dbt_snowflake.snowflake__array_construct": {"name": "snowflake__array_construct", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt_snowflake.snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9325, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"name": "snowflake__right", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt_snowflake.snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.932887, "supported_languages": null}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"name": "dbt_snowflake_get_tmp_relation_type", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n{%- set tmp_relation_type = config.get('tmp_relation_type') -%}\n  /* {#\n       High-level principles:\n       If we are running multiple statements (DELETE + INSERT),\n       and we want to guarantee identical inputs to both statements,\n       then we must first save the model query results as a temporary table\n       (which presumably comes with a performance cost).\n       If we are running a single statement (MERGE or INSERT alone),\n       we _may_ save the model query definition as a view instead,\n       for (presumably) faster overall incremental processing.\n\n       Low-level specifics:\n       If an invalid option is specified, then we will raise an\n       excpetion with corresponding message.\n\n       Languages other than SQL (like Python) will use a temporary table.\n       With the default strategy of merge, the user may choose between a temporary\n       table and view (defaulting to view).\n\n       The append strategy can use a view because it will run a single INSERT statement.\n\n       When unique_key is none, the delete+insert strategy can use a view beacuse a\n       single INSERT statement is run with no DELETES as part of the statement.\n       Otherwise, play it safe by using a temporary table.\n  #} */\n\n  {% if language == \"python\" and tmp_relation_type is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"Python models currently only support 'table' for tmp_relation_type but \"\n       ~ tmp_relation_type ~ \" was specified.\"\n    ) %}\n  {% endif %}\n\n  {% if strategy == \"delete+insert\" and tmp_relation_type is not none and tmp_relation_type != \"table\" and unique_key is not none %}\n    {% do exceptions.raise_compiler_error(\n      \"In order to maintain consistent results when `unique_key` is not none,\n      the `delete+insert` strategy only supports `table` for `tmp_relation_type` but \"\n      ~ tmp_relation_type ~ \" was specified.\"\n      )\n  %}\n  {% endif %}\n\n  {% if language != \"sql\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"table\" %}\n    {{ return(\"table\") }}\n  {% elif tmp_relation_type == \"view\" %}\n    {{ return(\"view\") }}\n  {% elif strategy in (\"default\", \"merge\", \"append\") %}\n    {{ return(\"view\") }}\n  {% elif strategy == \"delete+insert\" and unique_key is none %}\n    {{ return(\"view\") }}\n  {% else %}\n    {{ return(\"table\") }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9369037, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"name": "materialization_incremental_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ snowflake__create_view_as_with_temp_flag(tmp_relation, compiled_code, True) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_snowflake.snowflake__create_view_as_with_temp_flag", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9431298, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"name": "snowflake__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9434516, "supported_languages": null}, "macro.dbt_snowflake.materialization_table_snowflake": {"name": "materialization_table_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.947614, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          session.use_database(target_relation.database)\n          session.use_schema(target_relation.schema)\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    {% set target_relation_name = resolve_model_name(target_relation) %}\n    df.write.mode(\"overwrite\").save_as_table('{{ target_relation_name }}', create_temp_table={{temporary}})\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.948173, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_snowflake.py_script_comment", "macro_sql": "{% macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9484043, "supported_languages": null}, "macro.dbt_snowflake.materialization_view_snowflake": {"name": "materialization_view_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.949389, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"name": "snowflake__get_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, incremental_predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9513798, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"name": "snowflake__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9519465, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"name": "snowflake__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9524505, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"name": "materialization_test_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9530818, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"name": "materialization_snapshot_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9537299, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"name": "snowflake__load_csv_rows", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9573262, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"name": "materialization_seed_snowflake", "resource_type": "macro", "package_name": "dbt_snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.957912, "supported_languages": ["sql"]}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9583654, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9585598, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.959123, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9594278, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9599833, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9603179, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9608014, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9610395, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9614677, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9617107, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9621987, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.962452, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9628382, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.962989, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.963466, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9638734, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.964674, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9649851, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9654012, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9658358, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9660263, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9664145, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9665523, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.966964, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9671512, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9677072, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9680061, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9685102, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.968758, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9693074, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9698021, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9700685, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.970524, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.970786, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9711945, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9714918, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9721236, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9726052, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9730523, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.973262, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.974223, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9751506, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9765153, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9767983, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9770973, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.977373, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9776738, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9779575, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9782498, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9785705, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9788585, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9791405, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9794335, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9796953, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9799821, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9802792, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.980748, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9810412, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9815602, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9818118, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9822912, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9825366, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9843628, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.984726, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9849865, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9852571, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9855423, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9861233, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.986863, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9874337, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9882023, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9887555, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9939322, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9942436, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9946628, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9959583, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9962761, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9965935, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221324.9991615, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0015836, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0062306, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0067637, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0070662, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0072343, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.007499, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0077112, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.008078, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0098279, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0102508, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0107527, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0115533, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.020769, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0267532, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.028445, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0288672, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.029776, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.03012, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0303671, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0306234, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0308347, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0311317, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.031355, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0322409, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0325837, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0348928, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.040287, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.043901, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.044669, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.045238, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0458434, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0465384, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.050758, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.053345, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0540485, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0543451, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0546727, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0554612, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0559895, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.056648, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0608745, "supported_languages": ["sql"]}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0623353, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0625548, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0636697, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0639858, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0642548, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(model['columns'])) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.066253, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.066946, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/columns_spec_ddl.sql", "original_file_path": "macros/materializations/models/table/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.067564, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0688457, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0691745, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0699599, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0711572, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0714877, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select\n    {% for column in model['columns'] %}\n      {{ column }}{{ \", \" if not loop.last }}\n    {% endfor %}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0719926, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0805047, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.08724, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0895061, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0917046, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.0933332, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1005244, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1035783, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1040547, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.106031, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1065161, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.107693, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1099966, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.111002, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.112218, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.112677, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1140223, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1153126, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.115732, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1160643, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.116615, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1169496, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.11747, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1178114, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1182718, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1185992, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1188703, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1195767, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1206937, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1228635, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.123143, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1246452, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.125383, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.126452, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1273205, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.127453, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1297805, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1299903, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1303082, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1305819, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.131372, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1317592, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1319554, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1324115, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1327717, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1331952, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1335516, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1339555, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1351843, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1355166, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1359713, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1364148, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1390698, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1401105, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.140454, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.140818, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1411207, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1416066, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.142484, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1431844, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1441417, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1480222, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1484795, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1492872, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1497743, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql) %}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1500587, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1505184, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {{ col_err.append(col['name']) }}\n      {%- endif -%}\n      cast(null as {{ col['data_type'] }}) as {{ col['name'] }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1520479, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1526878, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1530292, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1537037, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1541169, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1552212, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.15568, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1572566, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1593041, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1597898, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1601238, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1606386, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1609685, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.161416, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1617897, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.162339, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1626804, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1629853, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1637287, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1639786, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1642966, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1650393, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1657836, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1660538, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1663182, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1665115, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1668093, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.16695, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1672509, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1675484, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.171715, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1720138, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1724393, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1730008, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1734333, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1740232, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.174348, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.174737, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1752436, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1755373, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1758943, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1764288, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1768658, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.177867, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1782775, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.178531, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1788857, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1794918, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1798232, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.180109, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1804626, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1829393, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1839712, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1845343, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1870632, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.189304, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1907017, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.191124, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1917686, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1922588, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1929388, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1936448, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1944385, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.194919, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.195446, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1958652, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1964378, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1972034, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1981838, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.198986, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1994078, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.1999176, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1698221325.2004402, "supported_languages": null}}, "docs": {"doc.LGD_Project.docs_v_d_bankkunde_biii_9mnd": {"name": "docs_v_d_bankkunde_biii_9mnd", "resource_type": "doc", "package_name": "LGD_Project", "path": "docs.md", "original_file_path": "docs/docs.md", "unique_id": "doc.LGD_Project.docs_v_d_bankkunde_biii_9mnd", "block_contents": "# 9mnd model\n\n### Om tabellen\nDenne modelen/view sammenstiller saker fra samme kunde som har mindre enn 9 m\u00e5neder forskjell mellom avsluttet dato p\u00e5 den eldste og saks start dato p\u00e5 den nyeste, iht til EBA rettningslinjer.\n\n### Datakilder\nDenne tabellen henter data fra:\n - f_lgd_bankkunde_biii_t: dette er m\u00e5ltabellen for skyggeimplementeringen av misligholdsmodulen. Tabellen her b\u00e5de SCD1 og SCD2 h\u00e5ndteres i overf\u00f8ringen til LGD schemaet."}, "doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "groups": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.LGD_Project.res_sak_bankkonto_lgd_t": ["model.LGD_Project.m_sak_bankkonto_lgd_t", "model.LGD_Project.res_sak_bankkunde_lgd_t", "source.LGD_Project.LGD_SOURCES.D_TID", "source.LGD_Project.LGD_SOURCES.F_LGD_T", "source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK", "source.LGD_Project.LGD_SOURCES.P_LGD_BATCH"], "model.LGD_Project.m_sak_bankkonto_lgd_t": ["model.LGD_Project.d_virkedag", "model.LGD_Project.d_virkedag", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_sak_bankkonto_kontantstrom_t", "model.LGD_Project.v_reskontro_kks_underkonto", "source.LGD_Project.LGD_SOURCES.D_CASHPOOLHIERARKI", "source.LGD_Project.LGD_SOURCES.F_EAD_T", "source.LGD_Project.LGD_SOURCES.F_FORDELT_SIKKERHETSVERDI_T", "source.LGD_Project.LGD_SOURCES.F_KONTOBALANSE_T", "source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK", "source.LGD_Project.LGD_SOURCES.P_LGD_BATCH"], "model.LGD_Project.res_sak_bankkonto_kontantstr_t": ["model.LGD_Project.m_sak_bankkonto_kontantstrom_t", "source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK"], "model.LGD_Project.m_sak_bankkonto_kontantstrom_t": ["model.LGD_Project.d_virkedag", "model.LGD_Project.d_virkedag", "model.LGD_Project.m_d_bankkonto_biii_flagg_t", "model.LGD_Project.m_d_bankkunde_biii_flagg_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_gl_kontantstrom_t", "model.LGD_Project.m_gl_kontantstrom_t", "model.LGD_Project.m_gl_kontantstrom_t", "model.LGD_Project.m_trans_kontantstrom_rente_t", "model.LGD_Project.m_trans_kontantstrom_t", "model.LGD_Project.m_trans_kontantstrom_t", "model.LGD_Project.v_reskontro_kks_underkonto", "model.LGD_Project.v_trans_kontantstrom_cp_kks", "source.LGD_Project.LGD_SOURCES.D_CASHPOOLHIERARKI", "source.LGD_Project.LGD_SOURCES.D_RENTE_BASIS_SATS", "source.LGD_Project.LGD_SOURCES.F_KNYTNING_SYNDIKAT", "source.LGD_Project.LGD_SOURCES.P_LGD_M_KONFIGURASJON"], "model.LGD_Project.m_d_bankkunde_biii_flagg_t": ["model.LGD_Project.m_d_bankkonto_biii_flagg_t", "model.LGD_Project.m_gl_periode_t", "source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK"], "model.LGD_Project.m_d_bankkonto_biii_flagg_t": ["model.LGD_Project.d_virkedag", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "source.LGD_Project.LGD_SOURCES.D_RESKONTRO_TREKKONTO", "source.LGD_Project.LGD_SOURCES.FAKE_D_BANKKONTO", "source.LGD_Project.LGD_SOURCES.F_EAD_T", "source.LGD_Project.LGD_SOURCES.F_KNYTNING_SYNDIKAT", "source.LGD_Project.LGD_SOURCES.F_KONTOBALANSE_T", "source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK", "source.LGD_Project.LGD_SOURCES.P_KORR_TRANS_KILDE_KODE"], "model.LGD_Project.m_gl_kontantstrom_t": ["model.LGD_Project.m_gl_kontantstrom_temp1", "model.LGD_Project.v_cashpool_ikke_balanse", "model.LGD_Project.v_reskontro_kks_underkonto", "source.LGD_Project.LGD_SOURCES.F_KONTOBALANSE_T", "source.LGD_Project.LGD_SOURCES.F_NEDSKRIVNING", "source.LGD_Project.LGD_SOURCES.P_LGD_M_KONFIGURASJON"], "model.LGD_Project.m_gl_kontantstrom_temp1": ["model.LGD_Project.d_virkedag", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "source.LGD_Project.LGD_SOURCES.D_TID", "source.LGD_Project.LGD_SOURCES.F_GL_BANKKONTO_TRANS_B", "source.LGD_Project.LGD_SOURCES.F_KAPITALTRANSAKSJON_T", "source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK", "source.LGD_Project.LGD_SOURCES.P_KAPITALTRANSAKSJONSKODE"], "model.LGD_Project.m_trans_kontantstrom_rente_t": ["model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_kapitaltransaksjon_lgd", "model.LGD_Project.v_cashpool_ikke_balanse", "source.LGD_Project.LGD_SOURCES.D_TID", "source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK"], "model.LGD_Project.m_trans_kontantstrom_t": ["model.LGD_Project.d_virkedag", "model.LGD_Project.d_virkedag", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_kapitaltransaksjon_lgd", "model.LGD_Project.v_reskontro_kks_underkonto", "source.LGD_Project.LGD_SOURCES.D_CASHPOOLHIERARKI", "source.LGD_Project.LGD_SOURCES.F_KAPITALTRANSAKSJON_T", "source.LGD_Project.LGD_SOURCES.F_KNYTNING_SYNDIKAT", "source.LGD_Project.LGD_SOURCES.F_KONTOBALANSE_T", "source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK", "source.LGD_Project.LGD_SOURCES.P_KAPITALTRANSAKSJONSKODE", "source.LGD_Project.LGD_SOURCES.P_LGD_M_KONFIGURASJON"], "model.LGD_Project.m_kapitaltransaksjon_lgd": ["model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "source.LGD_Project.LGD_SOURCES.F_KAPITALTRANSAKSJON_T", "source.LGD_Project.LGD_SOURCES.F_KNYTNING_SYNDIKAT", "source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK"], "model.LGD_Project.v_trans_kontantstrom_cp_kks": ["model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "source.LGD_Project.LGD_SOURCES.D_CASHPOOLHIERARKI", "source.LGD_Project.LGD_SOURCES.D_RESKONTRO", "source.LGD_Project.LGD_SOURCES.D_TID", "source.LGD_Project.LGD_SOURCES.F_KONTOBALANSE_T"], "model.LGD_Project.m_d_bankkunde_biii_lgd_t": ["model.LGD_Project.d_virkedag", "model.LGD_Project.m_d_bankkunde_biii_kto_t", "model.LGD_Project.m_d_bankkunde_biii_kto_t", "source.LGD_Project.LGD_SOURCES.D_TID", "source.LGD_Project.LGD_SOURCES.F_KONSTATERT_TAP", "source.LGD_Project.LGD_SOURCES.F_KONSTATERT_TAP_KORR", "source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK", "source.LGD_Project.LGD_SOURCES.P_LGD_M_KONFIGURASJON"], "model.LGD_Project.testfile": ["model.LGD_Project.d_virkedag", "model.LGD_Project.m_d_bankkunde_biii_kto_t", "source.LGD_Project.LGD_SOURCES.D_TID", "source.LGD_Project.LGD_SOURCES.F_KONSTATERT_TAP", "source.LGD_Project.LGD_SOURCES.F_KONSTATERT_TAP_KORR", "source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK"], "model.LGD_Project.m_d_bankkunde_biii_kto_t": ["model.LGD_Project.v_d_bankkunde_biii_korr", "source.LGD_Project.LGD_SOURCES.FAKE_D_BANKKONTO", "source.LGD_Project.LGD_SOURCES.F_KONSTATERT_TAP", "source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK", "source.LGD_Project.LGD_SOURCES.P_LGD_M_KONFIGURASJON", "source.LGD_Project.LGD_SOURCES.P_MALETIDSPUNKT"], "model.LGD_Project.v_d_bankkunde_biii_korr": ["model.LGD_Project.v_d_bankkunde_biii_9mnd", "source.LGD_Project.LGD_SOURCES.D_BANKKUNDE", "source.LGD_Project.LGD_SOURCES.FAKE_D_BANKKUNDE_BIII"], "model.LGD_Project.v_d_bankkunde_biii_9mnd": ["source.LGD_Project.LGD_SOURCES.FAKE_D_BANKKUNDE_BIII"], "model.LGD_Project.m_gl_periode_t": ["source.LGD_Project.LGD_SOURCES.F_GL_BANKKONTO_TRANS_B", "source.LGD_Project.LGD_SOURCES.P_LGD_M_KONFIGURASJON"], "model.LGD_Project.d_virkedag": ["source.LGD_Project.LGD_SOURCES.D_TID"], "model.LGD_Project.v_reskontro_kks_underkonto": ["source.LGD_Project.LGD_SOURCES.D_RESKONTRO"], "model.LGD_Project.v_cashpool_ikke_balanse": ["source.LGD_Project.LGD_SOURCES.D_CASHPOOLHIERARKI"], "test.LGD_Project.unique_v_d_bankkunde_biii_9mnd_sk_bankkunde_biii_id.262c760c18": ["model.LGD_Project.v_d_bankkunde_biii_9mnd"], "test.LGD_Project.unique_v_d_bankkunde_biii_korr_sk_bankkunde_biii_id.f2917cad72": ["model.LGD_Project.v_d_bankkunde_biii_korr"], "model.LGD_Project.m_sak_bankkunde_lgd_t": ["model.LGD_Project.m_d_bankkunde_biii_flagg_t", "model.LGD_Project.m_sak_bankkonto_lgd_t", "model.LGD_Project.m_sak_bankkonto_lgd_t", "source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK", "source.LGD_Project.LGD_SOURCES.P_LGD_M_KONFIGURASJON"], "model.LGD_Project.res_sak_bankkunde_lgd_t": ["model.LGD_Project.m_d_bankkunde_biii_flagg_t", "model.LGD_Project.m_sak_bankkonto_lgd_t", "model.LGD_Project.m_sak_bankkonto_lgd_t", "source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK", "source.LGD_Project.LGD_SOURCES.P_LGD_M_KONFIGURASJON"], "source.LGD_Project.LGD_SOURCES.FAKE_D_BANKKUNDE_BIII": [], "source.LGD_Project.LGD_SOURCES.D_BANKKUNDE": [], "source.LGD_Project.LGD_SOURCES.FAKE_D_BANKKONTO": [], "source.LGD_Project.LGD_SOURCES.F_KONSTATERT_TAP": [], "source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK": [], "source.LGD_Project.LGD_SOURCES.P_LGD_M_KONFIGURASJON": [], "source.LGD_Project.LGD_SOURCES.P_MALETIDSPUNKT": [], "source.LGD_Project.LGD_SOURCES.F_KONSTATERT_TAP_KORR": [], "source.LGD_Project.LGD_SOURCES.D_TID": [], "source.LGD_Project.LGD_SOURCES.F_KNYTNING_SYNDIKAT": [], "source.LGD_Project.LGD_SOURCES.P_KORR_TRANS_KILDE_KODE": [], "source.LGD_Project.LGD_SOURCES.F_KONTOBALANSE_T": [], "source.LGD_Project.LGD_SOURCES.F_EAD_T": [], "source.LGD_Project.LGD_SOURCES.D_RESKONTRO_TREKKONTO": [], "source.LGD_Project.LGD_SOURCES.F_GL_BANKKONTO_TRANS_B": [], "source.LGD_Project.LGD_SOURCES.F_KAPITALTRANSAKSJON_T": [], "source.LGD_Project.LGD_SOURCES.P_KAPITALTRANSAKSJONSKODE": [], "source.LGD_Project.LGD_SOURCES.D_RESKONTRO": [], "source.LGD_Project.LGD_SOURCES.D_CASHPOOLHIERARKI": [], "source.LGD_Project.LGD_SOURCES.F_NEDSKRIVNING": [], "source.LGD_Project.LGD_SOURCES.D_RENTE_BASIS_SATS": [], "source.LGD_Project.LGD_SOURCES.P_LGD_BATCH": [], "source.LGD_Project.LGD_SOURCES.F_FORDELT_SIKKERHETSVERDI_T": [], "source.LGD_Project.LGD_SOURCES.F_LGD_T": []}, "child_map": {"model.LGD_Project.res_sak_bankkonto_lgd_t": [], "model.LGD_Project.m_sak_bankkonto_lgd_t": ["model.LGD_Project.m_sak_bankkunde_lgd_t", "model.LGD_Project.m_sak_bankkunde_lgd_t", "model.LGD_Project.res_sak_bankkonto_lgd_t", "model.LGD_Project.res_sak_bankkunde_lgd_t", "model.LGD_Project.res_sak_bankkunde_lgd_t"], "model.LGD_Project.res_sak_bankkonto_kontantstr_t": [], "model.LGD_Project.m_sak_bankkonto_kontantstrom_t": ["model.LGD_Project.m_sak_bankkonto_lgd_t", "model.LGD_Project.res_sak_bankkonto_kontantstr_t"], "model.LGD_Project.m_d_bankkunde_biii_flagg_t": ["model.LGD_Project.m_sak_bankkonto_kontantstrom_t", "model.LGD_Project.m_sak_bankkunde_lgd_t", "model.LGD_Project.res_sak_bankkunde_lgd_t"], "model.LGD_Project.m_d_bankkonto_biii_flagg_t": ["model.LGD_Project.m_d_bankkunde_biii_flagg_t", "model.LGD_Project.m_sak_bankkonto_kontantstrom_t"], "model.LGD_Project.m_gl_kontantstrom_t": ["model.LGD_Project.m_sak_bankkonto_kontantstrom_t", "model.LGD_Project.m_sak_bankkonto_kontantstrom_t", "model.LGD_Project.m_sak_bankkonto_kontantstrom_t"], "model.LGD_Project.m_gl_kontantstrom_temp1": ["model.LGD_Project.m_gl_kontantstrom_t"], "model.LGD_Project.m_trans_kontantstrom_rente_t": ["model.LGD_Project.m_sak_bankkonto_kontantstrom_t"], "model.LGD_Project.m_trans_kontantstrom_t": ["model.LGD_Project.m_sak_bankkonto_kontantstrom_t", "model.LGD_Project.m_sak_bankkonto_kontantstrom_t"], "model.LGD_Project.m_kapitaltransaksjon_lgd": ["model.LGD_Project.m_trans_kontantstrom_rente_t", "model.LGD_Project.m_trans_kontantstrom_t"], "model.LGD_Project.v_trans_kontantstrom_cp_kks": ["model.LGD_Project.m_sak_bankkonto_kontantstrom_t"], "model.LGD_Project.m_d_bankkunde_biii_lgd_t": ["model.LGD_Project.m_d_bankkonto_biii_flagg_t", "model.LGD_Project.m_d_bankkonto_biii_flagg_t", "model.LGD_Project.m_d_bankkonto_biii_flagg_t", "model.LGD_Project.m_d_bankkonto_biii_flagg_t", "model.LGD_Project.m_d_bankkonto_biii_flagg_t", "model.LGD_Project.m_d_bankkonto_biii_flagg_t", "model.LGD_Project.m_d_bankkonto_biii_flagg_t", "model.LGD_Project.m_d_bankkonto_biii_flagg_t", "model.LGD_Project.m_d_bankkonto_biii_flagg_t", "model.LGD_Project.m_gl_kontantstrom_temp1", "model.LGD_Project.m_gl_kontantstrom_temp1", "model.LGD_Project.m_kapitaltransaksjon_lgd", "model.LGD_Project.m_kapitaltransaksjon_lgd", "model.LGD_Project.m_kapitaltransaksjon_lgd", "model.LGD_Project.m_sak_bankkonto_kontantstrom_t", "model.LGD_Project.m_sak_bankkonto_lgd_t", "model.LGD_Project.m_sak_bankkonto_lgd_t", "model.LGD_Project.m_trans_kontantstrom_rente_t", "model.LGD_Project.m_trans_kontantstrom_t", "model.LGD_Project.m_trans_kontantstrom_t", "model.LGD_Project.v_trans_kontantstrom_cp_kks", "model.LGD_Project.v_trans_kontantstrom_cp_kks"], "model.LGD_Project.testfile": [], "model.LGD_Project.m_d_bankkunde_biii_kto_t": ["model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.testfile"], "model.LGD_Project.v_d_bankkunde_biii_korr": ["model.LGD_Project.m_d_bankkunde_biii_kto_t", "test.LGD_Project.unique_v_d_bankkunde_biii_korr_sk_bankkunde_biii_id.f2917cad72"], "model.LGD_Project.v_d_bankkunde_biii_9mnd": ["model.LGD_Project.v_d_bankkunde_biii_korr", "test.LGD_Project.unique_v_d_bankkunde_biii_9mnd_sk_bankkunde_biii_id.262c760c18"], "model.LGD_Project.m_gl_periode_t": ["model.LGD_Project.m_d_bankkunde_biii_flagg_t"], "model.LGD_Project.d_virkedag": ["model.LGD_Project.m_d_bankkonto_biii_flagg_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_gl_kontantstrom_temp1", "model.LGD_Project.m_sak_bankkonto_kontantstrom_t", "model.LGD_Project.m_sak_bankkonto_kontantstrom_t", "model.LGD_Project.m_sak_bankkonto_lgd_t", "model.LGD_Project.m_sak_bankkonto_lgd_t", "model.LGD_Project.m_trans_kontantstrom_t", "model.LGD_Project.m_trans_kontantstrom_t", "model.LGD_Project.testfile"], "model.LGD_Project.v_reskontro_kks_underkonto": ["model.LGD_Project.m_gl_kontantstrom_t", "model.LGD_Project.m_sak_bankkonto_kontantstrom_t", "model.LGD_Project.m_sak_bankkonto_lgd_t", "model.LGD_Project.m_trans_kontantstrom_t"], "model.LGD_Project.v_cashpool_ikke_balanse": ["model.LGD_Project.m_gl_kontantstrom_t", "model.LGD_Project.m_trans_kontantstrom_rente_t"], "test.LGD_Project.unique_v_d_bankkunde_biii_9mnd_sk_bankkunde_biii_id.262c760c18": [], "test.LGD_Project.unique_v_d_bankkunde_biii_korr_sk_bankkunde_biii_id.f2917cad72": [], "model.LGD_Project.m_sak_bankkunde_lgd_t": [], "model.LGD_Project.res_sak_bankkunde_lgd_t": ["model.LGD_Project.res_sak_bankkonto_lgd_t"], "source.LGD_Project.LGD_SOURCES.FAKE_D_BANKKUNDE_BIII": ["model.LGD_Project.v_d_bankkunde_biii_9mnd", "model.LGD_Project.v_d_bankkunde_biii_korr"], "source.LGD_Project.LGD_SOURCES.D_BANKKUNDE": ["model.LGD_Project.v_d_bankkunde_biii_korr"], "source.LGD_Project.LGD_SOURCES.FAKE_D_BANKKONTO": ["model.LGD_Project.m_d_bankkonto_biii_flagg_t", "model.LGD_Project.m_d_bankkunde_biii_kto_t"], "source.LGD_Project.LGD_SOURCES.F_KONSTATERT_TAP": ["model.LGD_Project.m_d_bankkunde_biii_kto_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.testfile"], "source.LGD_Project.LGD_SOURCES.M_KONFIGURASJON_BANK": ["model.LGD_Project.m_d_bankkonto_biii_flagg_t", "model.LGD_Project.m_d_bankkunde_biii_flagg_t", "model.LGD_Project.m_d_bankkunde_biii_kto_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_gl_kontantstrom_temp1", "model.LGD_Project.m_kapitaltransaksjon_lgd", "model.LGD_Project.m_sak_bankkonto_lgd_t", "model.LGD_Project.m_sak_bankkunde_lgd_t", "model.LGD_Project.m_trans_kontantstrom_rente_t", "model.LGD_Project.m_trans_kontantstrom_t", "model.LGD_Project.res_sak_bankkonto_kontantstr_t", "model.LGD_Project.res_sak_bankkonto_lgd_t", "model.LGD_Project.res_sak_bankkunde_lgd_t", "model.LGD_Project.testfile"], "source.LGD_Project.LGD_SOURCES.P_LGD_M_KONFIGURASJON": ["model.LGD_Project.m_d_bankkunde_biii_kto_t", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_gl_kontantstrom_t", "model.LGD_Project.m_gl_periode_t", "model.LGD_Project.m_sak_bankkonto_kontantstrom_t", "model.LGD_Project.m_sak_bankkunde_lgd_t", "model.LGD_Project.m_trans_kontantstrom_t", "model.LGD_Project.res_sak_bankkunde_lgd_t"], "source.LGD_Project.LGD_SOURCES.P_MALETIDSPUNKT": ["model.LGD_Project.m_d_bankkunde_biii_kto_t"], "source.LGD_Project.LGD_SOURCES.F_KONSTATERT_TAP_KORR": ["model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.testfile"], "source.LGD_Project.LGD_SOURCES.D_TID": ["model.LGD_Project.d_virkedag", "model.LGD_Project.m_d_bankkunde_biii_lgd_t", "model.LGD_Project.m_gl_kontantstrom_temp1", "model.LGD_Project.m_trans_kontantstrom_rente_t", "model.LGD_Project.res_sak_bankkonto_lgd_t", "model.LGD_Project.testfile", "model.LGD_Project.v_trans_kontantstrom_cp_kks"], "source.LGD_Project.LGD_SOURCES.F_KNYTNING_SYNDIKAT": ["model.LGD_Project.m_d_bankkonto_biii_flagg_t", "model.LGD_Project.m_kapitaltransaksjon_lgd", "model.LGD_Project.m_sak_bankkonto_kontantstrom_t", "model.LGD_Project.m_trans_kontantstrom_t"], "source.LGD_Project.LGD_SOURCES.P_KORR_TRANS_KILDE_KODE": ["model.LGD_Project.m_d_bankkonto_biii_flagg_t"], "source.LGD_Project.LGD_SOURCES.F_KONTOBALANSE_T": ["model.LGD_Project.m_d_bankkonto_biii_flagg_t", "model.LGD_Project.m_gl_kontantstrom_t", "model.LGD_Project.m_sak_bankkonto_lgd_t", "model.LGD_Project.m_trans_kontantstrom_t", "model.LGD_Project.v_trans_kontantstrom_cp_kks"], "source.LGD_Project.LGD_SOURCES.F_EAD_T": ["model.LGD_Project.m_d_bankkonto_biii_flagg_t", "model.LGD_Project.m_sak_bankkonto_lgd_t"], "source.LGD_Project.LGD_SOURCES.D_RESKONTRO_TREKKONTO": ["model.LGD_Project.m_d_bankkonto_biii_flagg_t"], "source.LGD_Project.LGD_SOURCES.F_GL_BANKKONTO_TRANS_B": ["model.LGD_Project.m_gl_kontantstrom_temp1", "model.LGD_Project.m_gl_periode_t"], "source.LGD_Project.LGD_SOURCES.F_KAPITALTRANSAKSJON_T": ["model.LGD_Project.m_gl_kontantstrom_temp1", "model.LGD_Project.m_kapitaltransaksjon_lgd", "model.LGD_Project.m_trans_kontantstrom_t"], "source.LGD_Project.LGD_SOURCES.P_KAPITALTRANSAKSJONSKODE": ["model.LGD_Project.m_gl_kontantstrom_temp1", "model.LGD_Project.m_trans_kontantstrom_t"], "source.LGD_Project.LGD_SOURCES.D_RESKONTRO": ["model.LGD_Project.v_reskontro_kks_underkonto", "model.LGD_Project.v_trans_kontantstrom_cp_kks"], "source.LGD_Project.LGD_SOURCES.D_CASHPOOLHIERARKI": ["model.LGD_Project.m_sak_bankkonto_kontantstrom_t", "model.LGD_Project.m_sak_bankkonto_lgd_t", "model.LGD_Project.m_trans_kontantstrom_t", "model.LGD_Project.v_cashpool_ikke_balanse", "model.LGD_Project.v_trans_kontantstrom_cp_kks"], "source.LGD_Project.LGD_SOURCES.F_NEDSKRIVNING": ["model.LGD_Project.m_gl_kontantstrom_t"], "source.LGD_Project.LGD_SOURCES.D_RENTE_BASIS_SATS": ["model.LGD_Project.m_sak_bankkonto_kontantstrom_t"], "source.LGD_Project.LGD_SOURCES.P_LGD_BATCH": ["model.LGD_Project.m_sak_bankkonto_lgd_t", "model.LGD_Project.res_sak_bankkonto_lgd_t"], "source.LGD_Project.LGD_SOURCES.F_FORDELT_SIKKERHETSVERDI_T": ["model.LGD_Project.m_sak_bankkonto_lgd_t"], "source.LGD_Project.LGD_SOURCES.F_LGD_T": ["model.LGD_Project.res_sak_bankkonto_lgd_t"]}, "group_map": {}}